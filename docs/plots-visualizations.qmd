---
title: "Plots & Visualizations"
subtitle: "Specialized plotting functions and visualization utilities for CPAL workflows"
---

## Why Specialized Plotting Functions Matter

While CPAL themes and colors provide the visual foundation, **specialized plotting functions solve specific challenges that arise in professional data visualization workflows.** These functions bridge the gap between ggplot2's flexibility and CPAL's specific needs.

### **Common Plotting Challenges**

| **Challenge** | **Standard ggplot2 Approach** | **CPAL Solution** |
|---------------|-------------------------------|------------------|
| **Consistent output sizing** | Remember ggsave parameters | `save_cpal_plot()` with preset dimensions |
| **Mixed continuous/discrete scales** | Manual scale management | Extended scale functions with clear naming |
| **Professional branding** | Manual logo placement | `add_cpal_logo()` with smart positioning |
| **Table styling** | Raw gt/kable output | `cpal_table()` with CPAL branding |
| **Accessibility compliance** | Manual checking | `check_plot_accessibility()` automated testing |

### **What CPAL Plotting Functions Provide**

- **Automated best practices**: Functions encode professional visualization standards
- **Workflow optimization**: Reduce repetitive tasks and decision fatigue  
- **Quality assurance**: Built-in accessibility and branding consistency
- **Output reliability**: Consistent results across different environments and users

## CPAL Plotting Function Overview

The cpaltemplates package provides **8 specialized plotting functions** that enhance and extend ggplot2 for CPAL workflows:

| **Function** | **Category** | **Purpose** | **Key Benefit** |
|--------------|--------------|-------------|-----------------|
| `save_cpal_plot()` | **Output Management** | Professional plot saving with CPAL standards | Consistent sizing and quality |
| `add_cpal_logo()` | **Branding** | Smart logo integration | Automatic brand recognition |
| `cpal_table()` | **Tables** | CPAL-styled table creation | Consistent table branding |
| `check_plot_accessibility()` | **Quality Assurance** | Automated accessibility testing | Ensures inclusive design |
| `scale_color_cpal_c()` | **Color Scales** | Continuous color scales | Explicit continuous mapping |
| `scale_fill_cpal_c()` | **Color Scales** | Continuous fill scales | Explicit continuous mapping |
| `scale_color_cpal_d()` | **Color Scales** | Discrete color scales | Explicit discrete mapping |
| `scale_fill_cpal_d()` | **Color Scales** | Discrete fill scales | Explicit discrete mapping |

## Professional Plot Output: save_cpal_plot()

### **Why Use save_cpal_plot() Instead of ggsave()**

**The problem with ggsave():** You need to remember optimal dimensions, DPI settings, file formats, and background colors for different use cases. **Inconsistent saving leads to unprofessional-looking outputs.**

**CPAL solution:** `save_cpal_plot()` encodes professional standards and provides preset dimensions optimized for common CPAL use cases.

```{r}
# Instead of this (requires remembering settings)
ggsave("plot.png", width = 8, height = 6, dpi = 300, bg = "white")

# Use this (professional standards built-in)
save_cpal_plot(plot, "plot.png")
```

### **Size Presets for Different Use Cases**

**Understanding the presets:** Each size is optimized for specific viewing contexts and output formats.

```{r}
# Default: Perfect for most reports and documents
save_cpal_plot(plot, "report_chart.png", size = "default")  # 8×6 inches

# Slide: Optimized for presentation screens  
save_cpal_plot(plot, "presentation_chart.png", size = "slide")  # 10×7.5 inches

# Half: Compact for multi-plot layouts
save_cpal_plot(plot, "compact_chart.png", size = "half")  # 6×4 inches

# Third: Small spaces, thumbnail views
save_cpal_plot(plot, "thumbnail_chart.png", size = "third")  # 4×3 inches

# Custom: When standard sizes don't fit your need
save_cpal_plot(plot, "custom_chart.png", size = c(12, 8))  # Custom width × height
```

### **Size Selection Decision Guide**

| **Output Context** | **Recommended Size** | **Reasoning** |
|-------------------|--------------------|--------------| 
| **Word/PDF reports** | `"default"` (8×6) | Optimal readability without overwhelming page |
| **PowerPoint slides** | `"slide"` (10×7.5) | Fills slide area, readable from presentation distance |
| **Dashboard panels** | `"half"` (6×4) | Compact but clear for multi-chart layouts |
| **Email/quick sharing** | `"half"` (6×4) | Loads quickly, readable on mobile devices |
| **Poster presentations** | `c(16, 12)` | Large format for viewing from distance |
| **Web articles/blogs** | `"default"` or `c(10, 6)` | Good web resolution, fast loading |
| **Social media** | `c(8, 8)` or `c(10, 10)` | Square formats work well on platforms |

### **Advanced Output Parameters**

```{r}
# High-resolution for print materials
save_cpal_plot(plot, "print_version.png", dpi = 600, size = "default")

# Transparent background for overlays
save_cpal_plot(plot, "overlay.png", bg = "transparent", size = "half")

# Pass additional ggsave parameters
save_cpal_plot(plot, "special.pdf", size = "slide", device = "pdf", useDingbats = FALSE)
```

**When to adjust parameters:**
- **Print materials**: Use higher DPI (600) for crisp printing
- **Overlay graphics**: Transparent backgrounds for layering
- **PDF output**: Consider text embedding and font compatibility
- **Web optimization**: Balance quality vs. file size

## Extended Color Scale Functions

### **Why Explicit Scale Functions Exist**

**The clarity problem:** ggplot2's automatic discrete/continuous detection sometimes guesses wrong, especially with factors that represent continuous values or continuous variables used categorically.

**CPAL solution:** Explicit functions that clearly state your intention and ensure correct color mapping.

### **Continuous Scale Functions**

**When your data represents continuous values** (quantities, measurements, scales):

```{r}
# Continuous color mapping (points, lines by continuous variable)
ggplot(data, aes(x = year, y = value, color = temperature)) +
  geom_point() +
  scale_color_cpal_c(palette = "teal_seq_5")  # Explicit continuous

# Continuous fill mapping (heatmaps, choropleths)  
ggplot(map_data, aes(x = long, y = lat, fill = population_density)) +
  geom_polygon() +
  scale_fill_cpal_c(palette = "yellow_teal_seq_5")  # Explicit continuous
```

**Available continuous palettes:**
- `"teal_seq_4"`, `"teal_seq_5"`, `"teal_seq_6"` - Single-hue progressions
- `"yellow_teal_seq_4"`, `"yellow_teal_seq_5"`, `"yellow_teal_seq_6"` - Multi-hue progressions
- `"pink_teal_3"`, `"pink_teal_5"`, `"pink_teal_6"` - Diverging scales

### **Discrete Scale Functions**

**When your data represents distinct categories** (groups, classifications, types):

```{r}
# Discrete color mapping (points, lines by category)
ggplot(data, aes(x = month, y = sales, color = department)) +
  geom_line(size = 1) +
  scale_color_cpal_d(palette = "main")  # Explicit discrete

# Discrete fill mapping (bars, areas by category)
ggplot(data, aes(x = quarter, y = revenue, fill = division)) +
  geom_col(position = "dodge") +
  scale_fill_cpal_d(palette = "main_4")  # Explicit discrete
```

**Available discrete palettes:**
- `"main"`, `"main_3"`, `"main_4"`, `"main_gray"` - Primary categorical palettes
- `"blues"`, `"compare"` - Specialized two-color palettes

### **When to Use Explicit vs. Standard Scale Functions**

```{r}
# Use explicit functions when:
# 1. ggplot2 might guess wrong about your data type
temperature_factor <- as.factor(temperature_numeric)  # Factor but should be continuous
scale_color_cpal_c(palette = "teal_seq_5")  # Force continuous treatment

# 2. You want to be absolutely clear about your intentions
scale_fill_cpal_d(palette = "main")  # Clearly discrete categories

# 3. You're working with complex data transformations
mutate(temperature_binned = cut(temperature, breaks = 5)) %>%
  scale_fill_cpal_c(palette = "teal_seq_5")  # Binned continuous data
```

## Logo Integration: add_cpal_logo()

*(See detailed coverage in [Themes & Styling](themes-styling.qmd#logo-integration-with-cpal-themes))*

### **Quick Reference**

**Basic logo addition:**
```{r}
plot |> add_cpal_logo()  # Smart defaults
```

**Strategic positioning:**
```{r}
# Choose based on plot content
add_cpal_logo(plot, position = "top-right")    # Default safe choice
add_cpal_logo(plot, position = "bottom-left")  # Maps, traditional placement
add_cpal_logo(plot, size = 0.06)              # Subtle for complex plots
add_cpal_logo(plot, size = 0.12)              # Prominent for presentations
```

## Table Creation: cpal_table()

### **Why a Specialized Table Function**

**The challenge:** Creating professional tables that match CPAL's visual branding requires consistent font choices, colors, spacing, and styling. **Raw gt or kable output looks generic and unprofessional.**

```{r}
# Instead of generic table output
gt::gt(data)  # Generic styling, inconsistent with CPAL branding

# Use CPAL-branded table creation
cpal_table(data, 
          title = "Q4 Performance Summary",
          subtitle = "Key metrics by division")
```

### **Table Features and Customization**

```{r}
# Basic branded table
cpal_table(performance_data,
          title = "Department Performance",
          subtitle = "Q4 2024 Results")

# Custom font integration
cpal_table(data,
          font_family = "Inter",  # Matches CPAL theme fonts
          title = "Financial Overview")

# Integration with other gt features
cpal_table(data, title = "Summary") %>%
  gt::fmt_currency(columns = revenue) %>%
  gt::tab_source_note("Source: Internal data")
```

**When to use cpal_table():**
- **Executive summaries**: Professional appearance for stakeholder reports
- **Dashboard components**: Consistent styling with other CPAL elements
- **Report appendices**: Statistical tables that need professional formatting
- **Presentation slides**: Tables that complement CPAL-themed visualizations

**Technical requirements:**
```{r}
# Requires gt package
install.packages("gt")

# Function provides helpful error if gt is missing
cpal_table(data)  # Informative error message if dependency missing
```

## Accessibility Testing: check_plot_accessibility()

### **Why Automated Accessibility Testing Matters**

**The inclusion imperative:** Approximately 8% of men and 0.5% of women have some form of color vision deficiency. **Without accessibility testing, your visualizations may exclude significant portions of your audience.**

**CPAL commitment:** All CPAL visualizations should be accessible to users with different visual capabilities.

```{r}
# Test any ggplot for accessibility issues
accessibility_results <- check_plot_accessibility(my_plot)

# Detailed testing with recommendations
check_plot_accessibility(complex_plot, verbose = TRUE)
```

### **What the Function Checks**

**Accessibility dimensions tested:**

1. **Color contrast**: Sufficient contrast between elements
2. **Color blind safety**: Distinctness for different color vision types  
3. **Text size**: Readability across different viewing conditions
4. **Alt text**: Presence of descriptive text for screen readers

### **Understanding Test Results**

```{r}
# Example usage and interpretation
plot_to_test <- ggplot(data, aes(x = category, y = value, fill = type)) +
  geom_col() +
  scale_fill_cpal(palette = "main") +
  theme_cpal() +
  labs(title = "Performance by Category and Type")

results <- check_plot_accessibility(plot_to_test, verbose = TRUE)

# Results structure:
# $color_contrast - Pass/fail for contrast ratios
# $color_blind_safe - Assessment for different color vision types  
# $text_size - Evaluation of font sizes for readability
# $alt_text - Check for descriptive text elements
```

### **Acting on Accessibility Results**

**Common issues and solutions:**

| **Issue Found** | **Solution** | **CPAL Implementation** |
|-----------------|--------------|-------------------------|
| **Poor color contrast** | Increase contrast between elements | Use `theme_cpal_print()` for high contrast |
| **Colors too similar** | Switch to high-contrast palette | Use `"compare"` palette for binary comparisons |
| **Text too small** | Increase base font size | `theme_cpal(base_size = 16)` or larger |
| **Missing alt text** | Add descriptive labels | Comprehensive `labs()` with descriptions |

```{r}
# Improving accessibility based on test results
accessible_plot <- ggplot(data, aes(x = category, y = value, fill = type)) +
  geom_col() +
  scale_fill_cpal(palette = "compare") +  # High contrast palette
  theme_cpal(base_size = 16) +           # Larger text
  labs(
    title = "Performance Comparison by Category",
    subtitle = "Blue bars show Type A, orange bars show Type B",  # Alt text
    x = "Business Category", 
    y = "Performance Score"
  )

# Verify improvements
check_plot_accessibility(accessible_plot, verbose = TRUE)
```

## Workflow Integration Examples

### **Complete Professional Workflow**

```{r}
library(cpaltemplates)
library(ggplot2)

# 1. Set up session with accessibility in mind
setup_cpal_google_fonts()
set_theme_cpal("default", base_size = 16)  # Larger text for accessibility

# 2. Create visualization with explicit scale choices
performance_plot <- ggplot(quarterly_data, aes(x = quarter, y = revenue, fill = division)) +
  geom_col(position = "dodge") +
  scale_fill_cpal_d(palette = "main_4") +  # Explicit discrete mapping
  labs(
    title = "Quarterly Revenue Performance",
    subtitle = "Revenue by division showing growth trends",
    x = "Quarter", 
    y = "Revenue ($ millions)",
    fill = "Division",
    caption = "Data: Financial reporting system"
  ) |>
  add_cpal_logo(position = "top-right", size = 0.09)  # Professional branding

# 3. Test for accessibility compliance
accessibility_check <- check_plot_accessibility(performance_plot)

# 4. Save with appropriate dimensions for intended use
save_cpal_plot(performance_plot, "quarterly_revenue_report.png", size = "default")
save_cpal_plot(performance_plot, "quarterly_revenue_slide.png", size = "slide")
```

### **Multi-Output Workflow**

```{r}
# Create base visualization
base_plot <- ggplot(trend_data, aes(x = date, y = metric, color = category)) +
  geom_line(size = 1) +
  scale_color_cpal_d(palette = "main") +
  labs(
    title = "Trend Analysis Over Time",
    x = "Date", 
    y = "Metric Value",
    color = "Category"
  )

# Customize for different outputs
report_version <- base_plot + 
  theme_cpal(base_size = 14) |>
  add_cpal_logo(position = "bottom-right", size = 0.08)

presentation_version <- base_plot + 
  theme_cpal(base_size = 18) |>  # Larger for presentation
  add_cpal_logo(position = "top-right", size = 0.10)

web_version <- base_plot + 
  theme_cpal_minimal(base_size = 12) |>  # Clean for web
  add_cpal_logo(position = "top-right", size = 0.06)

# Save optimized versions
save_cpal_plot(report_version, "trend_report.png", size = "default")
save_cpal_plot(presentation_version, "trend_slide.png", size = "slide") 
save_cpal_plot(web_version, "trend_web.png", size = "half")
```

## Best Practices and Guidelines

### **Function Selection Decision Tree**

```{mermaid}
graph TD
    A[What do you need?] --> B[Save plot]
    A --> C[Add branding]
    A --> D[Create table]
    A --> E[Color scaling]
    A --> F[Check accessibility]
    
    B --> G[save_cpal_plot with size preset]
    C --> H[add_cpal_logo with smart positioning]  
    D --> I[cpal_table with CPAL styling]
    
    E --> J[Data type?]
    J --> K[Continuous: scale_*_cpal_c]
    J --> L[Discrete: scale_*_cpal_d]
    
    F --> M[check_plot_accessibility before sharing]
```

### **Quality Assurance Workflow**

**Every professional visualization should go through these steps:**

1. **Create with CPAL standards**: Use theme and color functions
2. **Add explicit scales**: Use `_c()` or `_d()` functions for clarity
3. **Include branding**: Add logo with `add_cpal_logo()`
4. **Test accessibility**: Run `check_plot_accessibility()`
5. **Save appropriately**: Use `save_cpal_plot()` with correct size preset

### **Common Mistakes and Solutions**

❌ **Don't do this:**
```{r}
# Mixing different quality standards
plot1 + theme_cpal()
ggsave("plot1.png", width = 6, height = 4)  # Inconsistent with CPAL standards

plot2 + theme_minimal()  # Not CPAL branded
save_cpal_plot(plot2, "plot2.png")  # Mixed approach
```

✅ **Do this instead:**
```{r}
# Consistent professional approach
plot1 + theme_cpal() |> add_cpal_logo()
save_cpal_plot(plot1, "plot1.png", size = "default")

plot2 + theme_cpal() |> add_cpal_logo()
save_cpal_plot(plot2, "plot2.png", size = "default")
```

## Troubleshooting Common Issues

### **Save Function Problems**

**Issue**: Plots look different when saved vs. displayed
```{r}
# Check your plot object before saving
print(my_plot)  # Verify it looks correct

# Use consistent background settings
save_cpal_plot(my_plot, "test.png", bg = "white")  # Explicit background

# Test with different sizes
save_cpal_plot(my_plot, "test_default.png", size = "default")
save_cpal_plot(my_plot, "test_slide.png", size = "slide")
```

### **Scale Function Issues**

**Issue**: Colors not mapping as expected
```{r}
# Check your data type
str(your_data$color_variable)  # Is it factor, numeric, character?

# Use explicit scale functions to force correct treatment
scale_color_cpal_c(palette = "teal_seq_5")  # Force continuous
scale_color_cpal_d(palette = "main")        # Force discrete
```

### **Logo Placement Problems**

**Issue**: Logo interferes with plot elements
```{r}
# Try different positions
add_cpal_logo(plot, position = "top-left")     # If legend is on right
add_cpal_logo(plot, position = "bottom-left")  # If caption is on right

# Adjust logo size
add_cpal_logo(plot, size = 0.06)  # Smaller for complex plots
```

---

*The CPAL plotting functions provide professional polish and workflow optimization for your data visualizations. Use them consistently to ensure high-quality, accessible, and professionally branded outputs across all your analytical work.*
