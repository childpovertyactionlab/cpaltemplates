---
title: "cpaltemplates: CPAL Data Team R Package Guide"
subtitle: "Comprehensive documentation and examples"
author: "CPAL Data Team"
date: today
date-format: "MMMM D, YYYY"
format:
  html:
    theme: cosmo
    toc: true
    toc-depth: 3
    toc-location: left
    toc-title: "Contents"
    number-sections: true
    number-depth: 2
    code-fold: show
    code-tools: true
    code-copy: true
    code-overflow: wrap
    fig-width: 8
    fig-height: 5
    fig-dpi: 300
    fig-align: center
    embed-resources: false
    smooth-scroll: true
    link-external-newwindow: true
    citations-hover: true
    footnotes-hover: true
    crossref:
      fig-title: "Figure"
      tbl-title: "Table"
    css: |
      .callout-note {
        border-left-color: #008097;
      }
      .callout-tip {
        border-left-color: #AB8C01;
      }
      .callout-important {
        border-left-color: #C3257B;
      }
      .callout-warning {
        border-left-color: #ED683F;
      }
      .navbar-brand {
        font-weight: bold;
      }
      code {
        background-color: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 3px;
        padding: 2px 4px;
      }
      .sourceCode {
        background-color: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 5px;
      }
      h1, h2, h3 {
        color: #004855;
      }
      .quarto-title-block .quarto-title-banner {
        background: linear-gradient(135deg, #004855 0%, #008097 100%);
        color: white;
      }
editor: visual
output-dir: docs
execute:
  echo: true
  warning: false
  message: false
  error: false
  cache: false
  freeze: auto
  fig-show: hold
  results: hold
knitr:
  opts_chunk:
    collapse: true
    comment: "#>"
    fig.path: "docs/figures/"
    dpi: 300
    out.width: "100%"
---

# cpaltemplates: CPAL Data Team R Package Documentation

This documentation provides comprehensive examples and usage guidelines for the `cpaltemplates` R package. The package standardizes CPAL data team workflows through templates, data visualizations, and consistent styling.

## Installation and Setup

```{r}
# Install from GitHub (when available)
# remotes::install_github("cpal/cpaltemplates")

# Load the package
library(cpaltemplates)
library(ggplot2)
library(dplyr)

# Import CPAL fonts (recommended)
import_inter_font()
```

## 1. Color System (`cpal_colors.R`)

### Available Color Palettes

The package provides comprehensive color palettes aligned with CPAL branding:

```{r}
# View all available palettes
#view_all_palettes()

# Or view them one at a time
view_palette()
```

### Primary Brand Colors

```{r}
# Get primary CPAL colors
primary_colors <- cpal_colors("primary")
print(primary_colors)

# Access specific colors by name
cpal_colors(c("teal", "orange", "midnight"))
```

### Sequential Palettes

Perfect for continuous data visualization:

```{r}
# Example with sequential data
set.seed(123)
data <- data.frame(
  x = 1:100,
  y = cumsum(rnorm(100))
)

ggplot(data, aes(x = x, y = y, color = y)) +
  geom_line(size = 1.2) +
  scale_color_cpal(palette = "teal_seq_5", discrete = FALSE) +
  theme_cpal() +
  labs(
    title = "Sequential Color Palette Example",
    subtitle = "Using CPAL teal sequential palette",
    x = "Time", y = "Value"
  )
```

### Diverging Palettes

Ideal for data with meaningful midpoints:

```{r}
# Create sample diverging data
div_data <- expand.grid(x = 1:10, y = 1:10) %>%
  mutate(z = (x - 5.5) * (y - 5.5))

ggplot(div_data, aes(x = x, y = y, fill = z)) +
  geom_tile() +
  scale_fill_cpal(palette = "pink_teal_5", discrete = FALSE) +
  theme_cpal() +
  labs(
    title = "Diverging Color Palette Example",
    subtitle = "Using CPAL pink-teal diverging palette"
  )
```

### Categorical Palettes

For discrete categories:

```{r}
# Sample categorical data
cat_data <- mtcars %>%
  mutate(
    transmission = ifelse(am == 1, "Manual", "Automatic"),
    engine = case_when(
      cyl == 4 ~ "4-cylinder",
      cyl == 6 ~ "6-cylinder", 
      cyl == 8 ~ "8-cylinder"
    )
  )

ggplot(cat_data, aes(x = wt, y = mpg, color = engine)) +
  geom_point(size = 3, alpha = 0.8) +
  scale_color_cpal(palette = "main_3") +
  theme_cpal() +
  labs(
    title = "Categorical Color Palette Example",
    subtitle = "Using CPAL main categorical palette",
    x = "Weight (1000 lbs)", y = "Miles per Gallon",
    color = "Engine Type"
  )
```

## 2. Theme System (`theme_cpal.R`)

### Basic CPAL Theme

```{r}
# Basic scatter plot with CPAL theme
ggplot(mtcars, aes(x = wt, y = mpg)) +
  geom_point(color = cpal_colors("teal"), size = 3, alpha = 0.7) +
  theme_cpal() +
  labs(
    title = "Basic CPAL Theme Example",
    subtitle = "Clean, professional styling for data visualization",
    x = "Weight (1000 lbs)", y = "Miles per Gallon"
  )
```

### Theme Variants

```{r}
# Minimal theme
p_minimal <- ggplot(mtcars, aes(x = factor(cyl), y = mpg)) +
  geom_boxplot(fill = cpal_colors("teal"), alpha = 0.7) +
  theme_cpal_minimal() +
  labs(title = "Minimal Theme", x = "Cylinders", y = "MPG")

# Dark theme
p_dark <- ggplot(mtcars, aes(x = factor(cyl), y = mpg)) +
  geom_boxplot(fill = cpal_colors("orange"), alpha = 0.8) +
  theme_cpal_dark() +
  labs(title = "Dark Theme", x = "Cylinders", y = "MPG")

# Classic theme
p_classic <- ggplot(mtcars, aes(x = factor(cyl), y = mpg)) +
  geom_boxplot(fill = cpal_colors("pink"), alpha = 0.7) +
  theme_cpal_classic() +
  labs(title = "Classic Theme", x = "Cylinders", y = "MPG")

# Display themes side by side (requires patchwork)
library(patchwork)
p_minimal + p_dark + p_classic
```

### Customizing Theme Options

```{r}
# Custom theme with specific options
ggplot(economics, aes(x = date, y = unemploy)) +
  geom_line(color = cpal_colors("midnight"), size = 1) +
  theme_cpal(
    base_size = 14,
    grid = "both", 
    axis_line = "none",
    legend_position = "top"
  ) +
  labs(
    title = "Customized CPAL Theme",
    subtitle = "With larger text and both grid lines",
    x = "Date", y = "Unemployment (thousands)"
  )
```

### Print and Map Themes

```{r}
# Print theme for publications
ggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl))) +
  geom_point(size = 2) +
  scale_color_cpal(palette = "main_3") +
  theme_cpal_print() +
  labs(
    title = "Print-Optimized Theme",
    x = "Weight", y = "MPG", color = "Cylinders"
  )

# Map theme (for spatial data)
# Note: Requires spatial data
#theme_cpal_map(scale = "continuous")
```

### Setting Default Theme

```{r}
# Set CPAL theme as default for all plots in session
set_theme_cpal()

# All subsequent plots will use CPAL theme
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +
  geom_point()
```

## 3. Interactive Features (`cpal_interactive.R`)

### Interactive Plots with ggiraph

```{r}
library(ggiraph)

# Interactive scatter plot
p_interactive <- ggplot(mtcars, aes(x = wt, y = mpg)) +
  cpal_point_interactive(
    aes(tooltip = paste("Car:", rownames(mtcars), 
                       "<br>Weight:", wt, 
                       "<br>MPG:", mpg)),
    size = 3, alpha = 0.7, color = cpal_colors("teal")
  ) +
  theme_cpal() +
  labs(
    title = "Interactive Scatter Plot",
    subtitle = "Hover over points for details",
    x = "Weight (1000 lbs)", y = "Miles per Gallon"
  )

# Render interactive plot
#cpal_interactive(p_interactive)
```

### Interactive Bar Charts

```{r}
# Sample data for bar chart
bar_data <- mtcars %>%
  count(cyl, name = "count") %>%
  mutate(
    cyl_label = paste(cyl, "cylinders"),
    tooltip_text = paste("Engine:", cyl_label, "<br>Count:", count)
  )

p_bar <- ggplot(bar_data, aes(x = factor(cyl), y = count)) +
  cpal_col_interactive(
    aes(tooltip = tooltip_text, fill = factor(cyl))
  ) +
  scale_fill_cpal(palette = "main_3") +
  theme_cpal() +
  labs(
    title = "Interactive Bar Chart",
    x = "Cylinders", y = "Count",
    fill = "Engine Type"
  )

#cpal_interactive(p_bar)
```

### Interactive Tables

```{r}
library(tidyverse)
library(reactable)

# Create interactive table with CPAL styling
sample_data <- mtcars %>%
  rownames_to_column("car") %>%
  select(car, mpg, cyl, hp, wt) %>%
  head(10)

cpal_table_interactive(
  sample_data,
  columns = list(
    mpg = colDef(name = "MPG", format = colFormat(digits = 1)),
    hp = colDef(name = "Horsepower"),
    wt = colDef(name = "Weight", format = colFormat(digits = 2))
  )
)
```

## 4. Plot Utilities (`cpal_plots.R`)

### Saving Plots with Standard Dimensions

```{r}
# Create a plot
p <- ggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl))) +
  geom_point(size = 3) +
  scale_color_cpal() +
  theme_cpal() +
  labs(
    title = "Sample Plot for Saving",
    x = "Weight", y = "MPG", color = "Cylinders"
  )

# Save with different size presets
#save_cpal_plot(p, "standard_plot.png", size = "default")
#save_cpal_plot(p, "slide_plot.png", size = "slide") 
#save_cpal_plot(p, "small_plot.png", size = "half")

# Custom dimensions
#save_cpal_plot(p, "custom_plot.png", size = c(12, 8))
```

### Creating Formatted Tables

```{r}
library(gt)

# Create a formatted table with CPAL styling
table_data <- mtcars %>%
  rownames_to_column("model") %>%
  select(model, mpg, cyl, hp, wt) %>%
  head(8)

cpal_table(
  table_data,
  title = "Sample Car Data",
  subtitle = "Formatted with CPAL styling"
) %>%
  gt::fmt_number(columns = c(mpg, wt), decimals = 1) %>%
  gt::fmt_number(columns = hp, decimals = 0)
```

### Plot Accessibility Checking

```{r}
# Check accessibility of a plot
p_check <- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
  geom_point(size = 2) +
  scale_color_cpal() +
  theme_cpal()

# Run accessibility check
check_plot_accessibility(p_check, verbose = TRUE)
```

### Adding CPAL Logo âœ¨ NEW!

The `add_cpal_logo()` function now intelligently adds the appropriate CPAL icon to your plots:

```{r}
# Create sample plots
p_light <- ggplot(mtcars, aes(x = wt, y = mpg)) +
  geom_point(color = cpal_colors("teal"), size = 3) +
  theme_cpal() +
  labs(
    title = "Light Theme with Logo",
    subtitle = "Teal icon automatically selected",
    x = "Weight (1000 lbs)", y = "Miles per Gallon"
  )

p_dark <- ggplot(mtcars, aes(x = wt, y = mpg)) +
  geom_point(color = cpal_colors("orange"), size = 3) +
  theme_cpal_dark() +
  labs(
    title = "Dark Theme with Logo",
    subtitle = "White icon automatically selected",
    x = "Weight (1000 lbs)", y = "Miles per Gallon"
  )

# Add logos (automatically detects theme and chooses appropriate icon)
p_light_logo <- add_cpal_logo(p_light)  # Uses CPAL_Icon_Teal.png, top-right
p_dark_logo <- add_cpal_logo(p_dark)    # Uses CPAL_Icon_White.png, top-right

# Custom positioning
p_custom <- add_cpal_logo(p_light, position = "bottom-left", size = 0.1)

# Display plots
print(p_light_logo)
print(p_dark_logo)
print(p_custom)
```

**Logo Features:** - **Smart theme detection**: Automatically uses teal icon for light themes, white icon for dark themes - **Default position**: Top-right corner - **Customizable**: Position (`"top-right"`, `"top-left"`, `"bottom-right"`, `"bottom-left"`) and size - **Brand consistent**: Uses official CPAL icon assets

## 5. Project Creation (`start_project.R`)

### Creating New Projects

```{r}
# Interactive project creation (will prompt for options)
#start_project()

# Create specific project types programmatically
#start_project(
#  name = "my_analysis_project",
#  path = "~/projects",
#  project_type = "analysis",
#  features = c("renv", "git", "targets"),
#  interactive = FALSE
#)

# Create a Quarto report project  
#start_project(
#  name = "quarterly_report",
#  project_type = "quarto-report", 
#  features = c("renv", "git"),
#  interactive = FALSE
#)

# âœ¨ NEW: Create a Quarto website
#start_project(
#  name = "cpal_website",
#  project_type = "quarto-web",
#  features = c("renv", "git"),
#  interactive = FALSE
#)

# Create a Shiny dashboard
#start_project(
#  name = "data_dashboard",
#  project_type = "shiny-dashboard",
#  features = c("renv", "git", "tests"),
#  interactive = FALSE
#)
```

### Available Project Types

1.  **analysis** - General analysis with targets pipeline
2.  **quarto-report** - Quarto report (HTML, PDF, Word)
3.  **quarto-slides** - Quarto presentation slides\
4.  **quarto-web** - âœ¨ **NEW!** Quarto website with multiple pages
5.  **shiny-dashboard** - Full-featured Shiny dashboard
6.  **shiny-app** - Simple Shiny application
7.  **package** - R package development

### Available Features

-   **renv** - Dependency management
-   **git** - Version control
-   **github** - GitHub integration\
-   **targets** - Pipeline management
-   **tests** - Testing framework

## 6. Adding Components to Existing Projects (`utils.R`)

### Adding Quarto Reports

```{r}
# Add Quarto reporting capability to existing project
#use_quarto_report(path = ".", overwrite = FALSE)

# This creates:
# - _quarto.yml configuration
# - report.qmd template
# - assets/css/cpal-style.css
# - R/functions.R with helpers
```

### Adding Quarto Slides

```{r}
# Add presentation slides
#use_quarto_slides(
#  path = ".", 
#  filename = "presentation.qmd",
#  overwrite = FALSE
#)
```

### âœ¨ NEW: Adding Quarto Website

```{r}
# Add website capability to existing project
#use_quarto_web(path = ".", overwrite = FALSE)

# This creates:
# - _quarto.yml website configuration
# - index.qmd homepage
# - assets/css/cpal-style.css
# - All CPAL brand assets (logos, icons, favicons)
# - docs/ output directory
```

### Adding Shiny Components

```{r}
# Add full dashboard
#use_shiny_dashboard(path = ".", overwrite = FALSE)

# Or add simple app
#use_shiny_app(path = ".", overwrite = FALSE)
```

### âœ¨ NEW: Adding Custom Shiny Theme

```{r}
# Add professional CPAL theme to Shiny projects
#use_shiny_theme(path = ".", overwrite = FALSE)

# This creates:
# - www/cpal-theme.css (custom CPAL styling)
# - app_enhanced.R (example with theme integration)
# - All CPAL brand assets in www/
```

### Adding Targets Pipeline

```{r}
# Add targets workflow
#use_targets(
#  path = ".", 
#  type = "analysis",  # or "basic", "report"
#  overwrite = FALSE
#)
```

### Updating CPAL Assets

```{r}
# Update CSS and images to latest versions
#update_cpal_assets(path = ".", components = "all")

# Update only specific components
#update_cpal_assets(path = ".", components = c("css"))
```

## Advanced Examples

### Complete Data Visualization Workflow

```{r}
library(cpaltemplates)
library(ggplot2)
library(dplyr)

# Set up environment
import_inter_font()
set_theme_cpal()

# Create sample analysis
analysis_data <- economics %>%
  filter(date >= as.Date("2000-01-01")) %>%
  mutate(
    year = lubridate::year(date),
    unemployment_rate = unemploy / pop * 100
  )

# Main visualization with logo
p1 <- ggplot(analysis_data, aes(x = date, y = unemployment_rate)) +
  geom_line(color = cpal_colors("teal"), size = 1.2) +
  geom_smooth(
    method = "loess", 
    color = cpal_colors("orange"), 
    fill = cpal_colors("orange"),
    alpha = 0.2
  ) +
  scale_y_continuous(labels = scales::percent_format(scale = 1)) +
  labs(
    title = "U.S. Unemployment Rate Trends",
    subtitle = "2000-2015, with smoothed trend line",
    x = "Year", 
    y = "Unemployment Rate (%)",
    caption = "Source: FRED Economic Data"
  )

# Add CPAL logo
p1_final <- add_cpal_logo(p1)

# Supporting visualization
p2 <- analysis_data %>%
  mutate(decade = ifelse(year < 2010, "2000s", "2010s")) %>%
  ggplot(aes(x = decade, y = unemployment_rate, fill = decade)) +
  geom_boxplot(alpha = 0.7) +
  scale_fill_cpal(palette = "compare") +
  labs(
    title = "Unemployment by Decade",
    x = "Decade", y = "Unemployment Rate (%)",
    fill = "Decade"
  )

# Add logo to supporting plot
p2_final <- add_cpal_logo(p2, position = "bottom-right", size = 0.06)

# Save publication-ready versions
save_cpal_plot(p1_final, "unemployment_trend.png", size = "default")
save_cpal_plot(p2_final, "unemployment_comparison.png", size = "half")

# Check accessibility
check_plot_accessibility(p1_final)
```

### Interactive Dashboard Example

```{r}
# Interactive version with hover details
library(ggiraph)

p_interactive <- ggplot(analysis_data, aes(x = date, y = unemployment_rate)) +
  cpal_line_interactive(
    aes(tooltip = paste("Date:", format(date, "%Y-%m"), 
                       "<br>Rate:", round(unemployment_rate, 1), "%")),
    color = cpal_colors("teal"), size = 1.2
  ) +
  scale_y_continuous(labels = scales::percent_format(scale = 1)) +
  labs(
    title = "Interactive U.S. Unemployment Rate",
    subtitle = "Hover over line for details",
    x = "Year", y = "Unemployment Rate (%)"
  )

# Add logo and make interactive
p_interactive_final <- add_cpal_logo(p_interactive)
#cpal_interactive(p_interactive_final, width_svg = 10, height_svg = 6)
```

## Package Development Notes

### Current Status

-   âœ… Color system complete with comprehensive palettes
-   âœ… Theme system with multiple variants
-   âœ… Interactive plotting capabilities
-   âœ… Project scaffolding system with **7 project types** (including new quarto-web)
-   âœ… Utility functions for adding templates to existing projects
-   âœ… **Logo functions implemented** with smart theme detection
-   âœ… **Complete CPAL asset management** (logos, icons, favicons)
-   âœ… **Custom Shiny theme system**

### Dependencies

-   **Required**: ggplot2, cli, fs
-   **Optional**: ggiraph, reactable, mapgl, gt, cowplot, magick, sysfonts, showtext, renv, gert, yaml

### Best Practices

1.  Always run `import_inter_font()` when starting analysis
2.  Use `set_theme_cpal()` to establish consistent styling
3.  Choose appropriate color palettes for your data type
4.  Check plot accessibility with `check_plot_accessibility()`
5.  Save plots with standard dimensions using `save_cpal_plot()`
6.  **Add CPAL branding** with `add_cpal_logo()` for professional outputs
7.  **Use appropriate project types** for different workflows (analysis, reports, websites, dashboards)

------------------------------------------------------------------------

*This documentation covers the current state of the cpaltemplates package with all new features. For the most up-to-date information, check the package README and function documentation.*
