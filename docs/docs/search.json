[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "cpaltemplates",
    "section": "",
    "text": "The cpaltemplates package transforms how the Child Poverty Action Lab (CPAL) data team creates analyses, reports, and visualizations. Instead of spending time on formatting and setup, you can focus on insights and impact.\n\n\nThe Challenge: CPAL data team members were spending significant time on repetitive tasks: - 30-60 minutes setting up each new project with proper folder structure, version control, and dependencies - Inconsistent branding across visualizations, reports, and presentations\n- Manual styling of every plot, table, and document to match CPAL standards - Difficult onboarding for new team members learning CPAL‚Äôs preferred workflows - Accessibility gaps when visualizations weren‚Äôt tested for colorblind users or proper contrast\nThe Solution: cpaltemplates automates professional best practices: - Quick project setup with enterprise-grade workflows built-in - Automatic CPAL branding for all visualizations, reports, and dashboards - Built-in accessibility ensuring inclusive design from the start - Standardized workflows that scale from simple analysis to complex multi-output projects - Team consistency with shared templates, functions, and quality standards\n\n\n\n\n\n\n\n\n\n\n\nBefore cpaltemplates\nWith cpaltemplates\nTime Saved\n\n\n\n\nManual project setup with inconsistent structures\nstart_project() with standardized templates\n45+ minutes per project\n\n\nCustom styling each plot individually\ntheme_cpal() + scale_color_cpal() automatic styling\n10+ minutes per visualization\n\n\nManual logo placement and sizing\nadd_cpal_logo() with smart positioning\n5+ minutes per branded output\n\n\nLearning complex interactive libraries\ncpal_interactive() with one-function conversion\n30+ minutes per interactive viz\n\n\nManual accessibility checking\ncheck_plot_accessibility() automated testing\n15+ minutes per visualization\n\n\nInconsistent table formatting\ncpal_table_gt() professional styling\n20+ minutes per table\n\n\n\nTotal time savings: 2+ hours per typical analysis project, plus immeasurable improvements in consistency and professional quality."
  },
  {
    "objectID": "index.html#welcome-to-cpaltemplates",
    "href": "index.html#welcome-to-cpaltemplates",
    "title": "cpaltemplates",
    "section": "",
    "text": "The cpaltemplates package transforms how the Child Poverty Action Lab (CPAL) data team creates analyses, reports, and visualizations. Instead of spending time on formatting and setup, you can focus on insights and impact.\n\n\nThe Challenge: CPAL data team members were spending significant time on repetitive tasks: - 30-60 minutes setting up each new project with proper folder structure, version control, and dependencies - Inconsistent branding across visualizations, reports, and presentations\n- Manual styling of every plot, table, and document to match CPAL standards - Difficult onboarding for new team members learning CPAL‚Äôs preferred workflows - Accessibility gaps when visualizations weren‚Äôt tested for colorblind users or proper contrast\nThe Solution: cpaltemplates automates professional best practices: - Quick project setup with enterprise-grade workflows built-in - Automatic CPAL branding for all visualizations, reports, and dashboards - Built-in accessibility ensuring inclusive design from the start - Standardized workflows that scale from simple analysis to complex multi-output projects - Team consistency with shared templates, functions, and quality standards\n\n\n\n\n\n\n\n\n\n\n\nBefore cpaltemplates\nWith cpaltemplates\nTime Saved\n\n\n\n\nManual project setup with inconsistent structures\nstart_project() with standardized templates\n45+ minutes per project\n\n\nCustom styling each plot individually\ntheme_cpal() + scale_color_cpal() automatic styling\n10+ minutes per visualization\n\n\nManual logo placement and sizing\nadd_cpal_logo() with smart positioning\n5+ minutes per branded output\n\n\nLearning complex interactive libraries\ncpal_interactive() with one-function conversion\n30+ minutes per interactive viz\n\n\nManual accessibility checking\ncheck_plot_accessibility() automated testing\n15+ minutes per visualization\n\n\nInconsistent table formatting\ncpal_table_gt() professional styling\n20+ minutes per table\n\n\n\nTotal time savings: 2+ hours per typical analysis project, plus immeasurable improvements in consistency and professional quality."
  },
  {
    "objectID": "index.html#package-scope-and-capabilities",
    "href": "index.html#package-scope-and-capabilities",
    "title": "cpaltemplates",
    "section": "Package Scope and Capabilities",
    "text": "Package Scope and Capabilities\ncpaltemplates provides 59 functions across 7 integrated systems that work together seamlessly:\n\n\nüé® Visual Design Foundation\nColors & Palettes (7 functions) - 23 distinct color palettes Designed for different data types - Accessibility built-in: All palettes tested for colorblind users - Brand consistency: Midnight (#004855) as primary brand color, plus teal, pink, orange, gold - Data-appropriate: Sequential, diverging, categorical palettes for proper data representation\n\n# Automatic brand-consistent colors\nscale_fill_cpal(palette = \"main\")\nview_cpal_palettes(\"all\")  # Interactive exploration\n\nThemes & Styling (8 functions)\n- 6 theme variants optimized for different outputs (reports, presentations, web, print, maps, dark mode) - Google Fonts integration: Inter and Roboto with cross-platform fallbacks - Customizable parameters: Grid lines, axis styling, legend positioning - Session-wide consistency: set_theme_cpal() for automatic application\n\n# Professional theming for any context\ntheme_cpal()           # Most reports and presentations\ntheme_cpal_dark()      # Dark backgrounds and night viewing\ntheme_cpal_print()     # PDFs and printed materials\n\n\n\nüìä Data Presentation Tools\nPlots & Visualizations (8 functions) - Professional output management: save_cpal_plot() with preset dimensions for different uses - Smart logo integration: add_cpal_logo() with automatic theme detection - Accessibility assurance: check_plot_accessibility() for inclusive design - Explicit scale control: Clear continuous vs.¬†discrete color mapping\n\n# Professional plot workflow\nplot + theme_cpal() |&gt; \n  add_cpal_logo() |&gt;\n  save_cpal_plot(\"output.png\", size = \"slide\")\n\nTables & GT Styling (2 functions) - Static tables: GT integration with CPAL branding and advanced formatting - Interactive tables: Reactable integration with sorting, filtering, data bars - Consistent typography: Automatic font coordination with plot themes - Multiple output formats: Optimized for reports, dashboards, presentations\n\n# Professional table creation\ncpal_table_gt(data, title = \"Executive Summary\",\n              highlight_columns = c(\"key\", \"metrics\"))\n\n\n\n\n\n\n‚ö° Interactive & Dynamic Features\nInteractive Features (9 functions) - ggiraph integration: Transform any CPAL plot into interactive exploration - Geographic mapping: Mapbox integration with Dallas-area defaults - Font management: Google Fonts working correctly in web contexts - Specialized interactivity: Point, line, column, polygon interactive geoms\n\n# Interactive visualization\nggplot(data, aes(x = x, y = y)) +\n  cpal_point_interactive(aes(tooltip = \"details\")) +\n  theme_cpal() |&gt;\n  cpal_interactive()\n\n\n\nüõ†Ô∏è Project Infrastructure\nProject Setup (17 functions) - 6 project types: Analysis, Quarto reports/slides/web, Shiny dashboards/apps, R packages - Modern workflows: renv, git, GitHub, targets, testing integration - Template system: Professional starting code for every project type - CPAL asset integration: Logos, CSS, fonts automatically included\n\n# Complete project setup in minutes\nstart_project(\n  name = \"impact-analysis\",\n  project_type = \"analysis\", \n  features = c(\"renv\", \"git\", \"targets\")\n)\n\n\n\n\n\nüîß Enhancement & Management\nUtilities & Helpers (12 functions) - Existing project enhancement: Add CPAL capabilities to any project - Asset management: Update branding, access specific logos/CSS - Template addition: Quarto reports, Shiny apps, workflow automation - Font utilities: Consistent typography across all contexts\n\n# Enhance existing projects\nuse_quarto_report()     # Add professional reporting\nuse_shiny_dashboard()   # Add interactive dashboard\nupdate_cpal_assets()    # Refresh branding\n\n\n\nüìã Team Collaboration\nWorkflow Integration - Complete end-to-end examples: 5 comprehensive workflow types - Team standardization: Shared functions and quality standards - Automation patterns: Reproducible analysis pipelines - Knowledge sharing: Documentation and troubleshooting resources\n\n# Team-standard project creation\ncreate_cpal_standard_project(\"analysis-name\", \n                            lead_analyst = \"Your Name\")"
  },
  {
    "objectID": "index.html#who-should-use-cpaltemplates",
    "href": "index.html#who-should-use-cpaltemplates",
    "title": "cpaltemplates",
    "section": "Who Should Use cpaltemplates",
    "text": "Who Should Use cpaltemplates\n\nPerfect for CPAL Data Team Members Who‚Ä¶\n\n\n\n\n\n\n\n\nYour Situation\nHow cpaltemplates Helps\nKey Benefits\n\n\n\n\nCreate visualizations for reports or presentations\nAutomatic CPAL branding, professional themes, accessibility testing\nConsistent brand presence, time savings\n\n\nStart new analysis projects regularly\nAutomated project setup with best practices\n45+ minutes saved per project\n\n\nCollaborate with other team members\nStandardized templates and workflows\nSeamless collaboration and handoffs\n\n\nCreate interactive dashboards or applications\nPre-configured Shiny templates with CPAL theming\nProfessional dashboards without UI expertise\n\n\nGenerate regular reports or presentations\nQuarto templates with CPAL branding and automation\nConsistent professional outputs\n\n\nNeed to make visualizations accessible\nBuilt-in accessibility testing and colorblind-safe palettes\nInclusive design without expertise\n\n\nWant to follow modern R best practices\nrenv, git, targets integration in all project templates\nProfessional workflows without configuration\n\n\n\n\n\nLess Useful If You‚Ä¶\n\nWork primarily on non-CPAL projects (package is CPAL-specific)\nNeed completely custom styling that conflicts with CPAL brand standards\nDo only quick, internal exploratory analysis with no sharing or presentation needs\nWork in environments where package installation is restricted"
  },
  {
    "objectID": "index.html#quick-start-journey",
    "href": "index.html#quick-start-journey",
    "title": "cpaltemplates",
    "section": "Quick Start Journey",
    "text": "Quick Start Journey\n\nFirst-Time Setup\n\n# Quick Start section\nlibrary(cpaltemplates)\npackageVersion(\"cpaltemplates\")\n\nsetup_cpal_google_fonts()\nview_cpal_palettes(\"all\")  # See all color options\n\n# First-Time Setup section  \nview_cpal_palettes(\"all\")  # Interactive exploration\n\n\n\nCreate Your First Professional Visualization\n\nlibrary(ggplot2)\n\n# Your first CPAL-branded visualization\nfirst_plot &lt;- ggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl))) +\n  geom_point(size = 3, alpha = 0.8) +\n  scale_color_cpal(palette = \"main\") +     # CPAL colors\n  theme_cpal() +                           # CPAL theme\n  labs(\n    title = \"Vehicle Weight vs Fuel Efficiency\",\n    subtitle = \"Professional visualization with CPAL branding\",\n    x = \"Weight (1000 lbs)\",\n    y = \"Miles per Gallon\", \n    color = \"Cylinders\",\n    caption = \"Data: mtcars dataset\"\n  ) |&gt;\n  add_cpal_logo(position = \"top-right\") |&gt; # CPAL logo\n  save_cpal_plot(\"my_first_cpal_plot.png\") # Professional output\n\n# Check accessibility\ncheck_plot_accessibility(first_plot)\n\n\n\nStart Your First CPAL Project\n\n# Interactive setup guides you through choices\nstart_project()\n\n# Or direct setup if you know what you want\nstart_project(\n  name = \"my-first-analysis\", \n  project_type = \"analysis\",\n  features = c(\"renv\", \"git\", \"targets\")\n)\n\n# Project opens automatically with:\n# ‚úì Professional folder structure\n# ‚úì CPAL assets and branding\n# ‚úì Modern workflow tools (renv, git, targets)\n# ‚úì Template code to get started\n# ‚úì Documentation and next steps"
  },
  {
    "objectID": "index.html#real-world-impact-examples",
    "href": "index.html#real-world-impact-examples",
    "title": "cpaltemplates",
    "section": "Real-World Impact Examples",
    "text": "Real-World Impact Examples\n\nBefore and After: Quarterly Report Creation\nTraditional Approach (4-6 hours): 1. Set up project folders manually (15 min) 2. Configure Quarto with custom CSS (30 min) 3. Find and resize CPAL logos (15 min) 4. Create each visualization with manual styling (45 min each √ó 6 charts = 4.5 hours) 5. Format tables manually (30 min) 6. Test outputs and fix inconsistencies (45 min)\nWith cpaltemplates (45 minutes): 1. start_project(project_type = \"quarto-report\") (2 min) 2. Write analysis with automatic CPAL styling (30 min) 3. check_plot_accessibility() on all outputs (5 min) 4. quarto::quarto_render() for professional report (3 min) 5. Share with stakeholders (5 min)\nResult: Same professional quality, 5+ hours saved, more consistent branding, built-in accessibility.\n\n\nBefore and After: Team Onboarding\nTraditional Approach (2-3 days): - Learn CPAL color codes and brand guidelines - Set up development environment manually - Learn project structure conventions - Understand output formatting requirements - Create first visualization with proper styling\nWith cpaltemplates (2-3 hours): - library(cpaltemplates) and setup_cpal_google_fonts() - start_project() with guided setup - Follow Getting Started Guide - Create professional visualization with automatic CPAL styling - Access team knowledge through documentation and Notion guide\nResult: New team members productive immediately with professional-quality outputs."
  },
  {
    "objectID": "index.html#documentation-architecture",
    "href": "index.html#documentation-architecture",
    "title": "cpaltemplates",
    "section": "Documentation Architecture",
    "text": "Documentation Architecture\nThis documentation system is designed for both quick reference and comprehensive learning:\n\n\nFunction Reference Documentation\nCore Systems: - Colors & Palettes - 23 palettes, color theory, accessibility guidance - Themes & Styling - 8 themes, typography, logo integration - Plots & Visualizations - 8 functions, professional output management - Interactive Features - 9 functions, ggiraph, mapping, dashboards\nData Presentation: - Tables & GT Styling - 4 functions, static and interactive tables\n\n\nWorkflow and Integration Guides\nProject Management: - Project Setup - 17 functions, 6 project types, modern workflows - Utilities & Helpers - 12 functions, existing project enhancement\nTeam Resources: - Workflow Integration - Complete end-to-end workflow examples - Troubleshooting - Problem-solving guide with team support resources\n\n\n\nDocumentation Standards\nEach documentation page includes: - Why and when guidance: Context for choosing functions and approaches - Real-world examples: Complete, working code that solves actual problems - Decision support: Tables, flowcharts, and matrices for choosing optimal approaches - Troubleshooting: Common issues and diagnostic code for each function group - Best practices: Professional standards and quality guidelines - Team integration: How functions work together and with team workflows"
  },
  {
    "objectID": "index.html#getting-started-path",
    "href": "index.html#getting-started-path",
    "title": "cpaltemplates",
    "section": "Getting Started Path",
    "text": "Getting Started Path\n\nFor New Team Members\n\nStart here: Getting Started Guide - Installation, setup, first plot, project creation\nExplore capabilities: Browse function group documentation to understand what‚Äôs available\nFollow workflows: Workflow Integration for complete project examples\nGet help: Troubleshooting and CPAL Data Team Notion Guide for support\n\n\n\nFor Experienced R Users\n\nQuick overview: This page for package scope and capabilities\nFunction reference: Jump directly to relevant function group documentation\nIntegration patterns: Workflow Integration for advanced usage\nEnhancement: Utilities & Helpers for adding to existing projects\n\n\n\nFor Team Leaders and Project Managers\n\nImpact assessment: Review time savings and consistency benefits above\nTeam adoption: Project Setup for standardized team workflows\nQuality assurance: Built-in accessibility and branding consistency features\nCollaboration: Workflow Integration for multi-person project coordination"
  },
  {
    "objectID": "index.html#package-philosophy-and-design-principles",
    "href": "index.html#package-philosophy-and-design-principles",
    "title": "cpaltemplates",
    "section": "Package Philosophy and Design Principles",
    "text": "Package Philosophy and Design Principles\n\nAutomation Over Configuration\nSmart defaults that work immediately: - Colors automatically match CPAL brand guidelines - Themes apply professional styling without customization - Project templates include modern best practices by default - Interactive features inherit CPAL styling automatically\nCustomization when needed: - All functions provide parameters for specific adjustments - Themes can be modified while maintaining brand consistency - Project types can be mixed and enhanced with utility functions - Advanced users can build on CPAL foundations\n\n\nAccessibility First\nInclusive design built-in: - All color palettes tested for colorblind accessibility - Automated accessibility checking with check_plot_accessibility() - High contrast themes available for visibility needs - Screen reader friendly table structures and labeling\n\n\nTeam Collaboration Focus\nDesigned for multi-person teams: - Consistent outputs regardless of individual styling preferences - Shared templates and standards reduce coordination overhead - Version control and reproducibility built into project templates - Knowledge sharing through documentation and team resources\n\n\nProgressive Enhancement\nStart simple, add complexity as needed: - Basic functions work with minimal parameters - Advanced features available for complex requirements\n- Existing projects can be enhanced incrementally - New capabilities can be added without disrupting existing work"
  },
  {
    "objectID": "index.html#success-stories-and-use-cases",
    "href": "index.html#success-stories-and-use-cases",
    "title": "cpaltemplates",
    "section": "Success Stories and Use Cases",
    "text": "Success Stories and Use Cases\n\nTypical CPAL Use Cases\n\n\n\n\n\n\n\n\nProject Type\ncpaltemplates Functions Used\nOutcome\n\n\n\n\nQuarterly program evaluation\nColors, themes, plots, project setup, reporting\nProfessional stakeholder report with consistent branding\n\n\nBoard presentation preparation\nAll visualization functions + slides + interactive dashboard\nCoordinated presentation package with live data exploration\n\n\nOngoing program monitoring\nInteractive features, dashboard templates, automation\nReal-time monitoring system with automated alerts\n\n\nResearch paper publication\nFull function suite with accessibility focus\nReproducible research with multiple output formats\n\n\nNew team member onboarding\nProject templates, documentation, troubleshooting\nProductive team member within hours instead of days\n\n\n\n\n\nMeasurable Team Benefits\nQuality improvements: - Brand consistency across all team outputs - Universal accessibility compliance through automated testing - Reproducible workflows with version control and dependency management - Professional presentation quality without design expertise"
  },
  {
    "objectID": "index.html#technical-requirements-and-compatibility",
    "href": "index.html#technical-requirements-and-compatibility",
    "title": "cpaltemplates",
    "section": "Technical Requirements and Compatibility",
    "text": "Technical Requirements and Compatibility\n\nSystem Requirements\nMinimum requirements: - R 4.0+ (required for modern package features) - RStudio (recommended for optimal project integration) - Internet connection (for Google Fonts and template downloads)\nOptional but recommended: - Git (for version control features) - Quarto (for advanced reporting capabilities)\n- Modern web browser (for interactive features)\n\n\nDependency Management\nCore dependencies (automatically installed): - ggplot2, cli, fs - Essential for all cpaltemplates functions\nOptional dependencies (installed as needed): - ggiraph, reactable, mapgl - For interactive features - gt - For advanced table formatting - renv, gert, yaml - For project management features - cowplot, magick - For logo integration\nGraceful degradation: All functions provide helpful error messages and alternatives when optional packages are missing."
  },
  {
    "objectID": "index.html#getting-support-and-contributing",
    "href": "index.html#getting-support-and-contributing",
    "title": "cpaltemplates",
    "section": "Getting Support and Contributing",
    "text": "Getting Support and Contributing\n\nWhen You Need Help\n\nFunction-specific help: Use ?function_name for detailed parameter documentation\nCommon issues: Check Troubleshooting for systematic problem-solving\nTeam support: Use CPAL Data Team Notion Guide for team-specific guidance and to connect with team members\nAdvanced workflows: Review Workflow Integration for complete examples\n\n\n\nContributing to Team Knowledge\nHelp improve cpaltemplates for everyone: - Document solutions: Add new troubleshooting discoveries to CPAL Data Team Notion Guide - Share workflows: Contribute successful project patterns to team knowledge base - Report issues: Use team communication channels to report bugs or suggest improvements - Mentor others: Help onboard new team members using your cpaltemplates experience\n\n\nPackage Evolution\ncpaltemplates continues evolving based on CPAL team needs: - New functions added based on common team requirements - Templates updated to reflect changing best practices - Branding assets refreshed to match organizational updates - Documentation improved based on team feedback and common questions"
  },
  {
    "objectID": "index.html#ready-to-transform-your-workflow",
    "href": "index.html#ready-to-transform-your-workflow",
    "title": "cpaltemplates",
    "section": "Ready to Transform Your Workflow?",
    "text": "Ready to Transform Your Workflow?\nStart with what you need most:\n\n\nNew to cpaltemplates?\nGetting Started ‚Üí\nInstallation, setup, and your first professional visualization in 10 minutes.\n\n\nNeed specific functions?\nFunction Reference ‚Üí\nDetailed documentation for colors, themes, plots, tables, and interactive features.\n\n\nWant complete workflows?\nIntegration Examples ‚Üí\nEnd-to-end workflows for analysis, reporting, dashboards, and team collaboration.\n\n\n\ncpaltemplates is developed and maintained by the CPAL Data Team to transform data analysis workflows from time-consuming, inconsistent processes into efficient, professional, and collaborative systems that amplify your analytical impact."
  },
  {
    "objectID": "colors-palettes.html",
    "href": "colors-palettes.html",
    "title": "Colors & Palettes",
    "section": "",
    "text": "Color is one of the most powerful tools in data visualization, but it‚Äôs also one of the most commonly misused. Poor color choices can mislead your audience, make data inaccessible to colorblind users, or simply make your visualizations look unprofessional.\nThe cpaltemplates color system solves these problems by providing:\n\nBrand consistency: All colors align with CPAL‚Äôs visual identity\nAccessibility built-in: All palettes are tested for colorblind accessibility\n\nData-type appropriate: Different palettes optimized for different kinds of data\nProfessional quality: Colors chosen by design professionals, not left to chance\n\n\n\n\n\n\n\n\n\n\n\nCommon Problem\nWhy It Happens\nCPAL Solution\n\n\n\n\nCategories look ranked\nUsing sequential colors for unordered categories\nCategorical palettes with distinct, unordered colors\n\n\nCan‚Äôt see differences\nColors too similar or poor contrast\nHigh-contrast palettes tested for visibility\n\n\nColorblind users excluded\nNo testing for color vision deficiency\nAll palettes verified for colorblind accessibility\n\n\nInconsistent branding\nRandom color choices across projects\nStandardized brand color system\n\n\nData misinterpreted\nWrong palette type for data structure\nClear guidance on palette selection"
  },
  {
    "objectID": "colors-palettes.html#why-color-matters-in-data-visualization",
    "href": "colors-palettes.html#why-color-matters-in-data-visualization",
    "title": "Colors & Palettes",
    "section": "",
    "text": "Color is one of the most powerful tools in data visualization, but it‚Äôs also one of the most commonly misused. Poor color choices can mislead your audience, make data inaccessible to colorblind users, or simply make your visualizations look unprofessional.\nThe cpaltemplates color system solves these problems by providing:\n\nBrand consistency: All colors align with CPAL‚Äôs visual identity\nAccessibility built-in: All palettes are tested for colorblind accessibility\n\nData-type appropriate: Different palettes optimized for different kinds of data\nProfessional quality: Colors chosen by design professionals, not left to chance\n\n\n\n\n\n\n\n\n\n\n\nCommon Problem\nWhy It Happens\nCPAL Solution\n\n\n\n\nCategories look ranked\nUsing sequential colors for unordered categories\nCategorical palettes with distinct, unordered colors\n\n\nCan‚Äôt see differences\nColors too similar or poor contrast\nHigh-contrast palettes tested for visibility\n\n\nColorblind users excluded\nNo testing for color vision deficiency\nAll palettes verified for colorblind accessibility\n\n\nInconsistent branding\nRandom color choices across projects\nStandardized brand color system\n\n\nData misinterpreted\nWrong palette type for data structure\nClear guidance on palette selection"
  },
  {
    "objectID": "colors-palettes.html#cpal-color-system-overview",
    "href": "colors-palettes.html#cpal-color-system-overview",
    "title": "Colors & Palettes",
    "section": "CPAL Color System Overview",
    "text": "CPAL Color System Overview\nThe cpaltemplates package provides 23 distinct color palettes organized into 4 main categories, each designed for specific types of data and use cases:\n\n\n\n\n\n\n\n\n\nCategory\nPalettes Available\nPurpose\nWhen to Use\n\n\n\n\nBrand Colors\n2 palettes\nCore CPAL colors\nIndividual color needs, brand elements\n\n\nCategorical\n8 palettes\nUnordered categories\nGroups, categories, classifications\n\n\nSequential\n6 palettes\nContinuous data\nQuantities, ranks, progressions\n\n\nDiverging\n3 palettes\nData with meaningful center\nChanges from baseline, comparisons\n\n\n\n\nThe Science Behind the Choices\nWhy these specific colors? CPAL‚Äôs color palettes are built on color theory principles:\n\nPerceptual uniformity: Equal visual steps between colors represent equal data steps\nCultural considerations: Colors chosen to avoid cultural biases or negative associations\nTechnical requirements: Colors work across digital displays, print, and projection\nAccessibility standards: Meet WCAG guidelines for color contrast and colorblind visibility"
  },
  {
    "objectID": "colors-palettes.html#core-functions-overview",
    "href": "colors-palettes.html#core-functions-overview",
    "title": "Colors & Palettes",
    "section": "Core Functions Overview",
    "text": "Core Functions Overview\ncpaltemplates provides 7 main color functions that work together to give you complete control over CPAL‚Äôs color system:\n\n\n\n\n\n\n\n\n\nFunction\nPurpose\nReturns\nPrimary Use\n\n\n\n\ncpal_colors()\nGet specific colors or palettes\nVector of hex codes\nBuilding custom visualizations\n\n\nscale_color_cpal()\nApply CPAL colors to ggplot2 color aesthetic\nggplot2 scale object\nAutomatic ggplot2 integration\n\n\nscale_fill_cpal()\nApply CPAL colors to ggplot2 fill aesthetic\nggplot2 scale object\nAutomatic ggplot2 integration\n\n\nview_cpal_palettes()\nDisplay all or specific palettes with options\nVisual display\nChoosing and exploring palettes\n\n\nquick_palette()\nSimple palette preview\nVisual display\nQuick palette reference\n\n\nlist_cpal_palettes()\nList available palettes with details\nCharacter vector or list\nProgrammatic palette discovery"
  },
  {
    "objectID": "colors-palettes.html#brand-colors-cpals-core-identity",
    "href": "colors-palettes.html#brand-colors-cpals-core-identity",
    "title": "Colors & Palettes",
    "section": "Brand Colors: CPAL‚Äôs Core Identity",
    "text": "Brand Colors: CPAL‚Äôs Core Identity\n\nPrimary Colors\nWhen to use: Individual color needs, accent colors, brand elements in visualizations.\n\n# Get CPAL's primary brand colors\ncpal_colors(\"primary\")\n\n# Access individual colors by name\ncpal_colors(\"midnight\")  # CPAL's primary brand color: #004855\ncpal_colors(\"teal\")      # CPAL's signature teal: #008097\ncpal_colors(\"pink\")      # Brand pink: #C3257B  \ncpal_colors(\"orange\")    # Brand orange: #ED683F\ncpal_colors(\"gold\")      # Brand gold: #AB8C01\n\nCPAL‚Äôs primary color palette: - Midnight (#004855): CPAL‚Äôs main brand color, deep and authoritative, used throughout the organization - Teal (#008097): CPAL‚Äôs signature color, professional and trustworthy - Pink (#C3257B): Energy and passion, used for highlights and callouts - Orange (#ED683F): Warmth and engagement, great for calls-to-action - Gold (#AB8C01): Premium feel, used for emphasis and key findings\n\n\nExtended Colors\nWhen to use: When you need more color options than the primary set, but still want brand consistency.\n\n# Get the full extended palette\ncpal_colors(\"extended\")\n\nWhat‚Äôs included: The extended palette includes primary colors plus additional shades and complementary colors that maintain brand consistency while providing more variety for complex visualizations.\nPractical applications: - Complex charts with many categories - Dashboard elements that need varied but consistent colors\n- Supporting visual elements that shouldn‚Äôt compete with primary colors"
  },
  {
    "objectID": "colors-palettes.html#categorical-palettes-for-groups-and-classifications",
    "href": "colors-palettes.html#categorical-palettes-for-groups-and-classifications",
    "title": "Colors & Palettes",
    "section": "Categorical Palettes: For Groups and Classifications",
    "text": "Categorical Palettes: For Groups and Classifications\nThe challenge with categorical data: Categories have no inherent order, so colors shouldn‚Äôt imply ranking or progression. Traditional rainbow palettes often create false hierarchies.\nCPAL‚Äôs solution: Carefully selected colors that are visually distinct but don‚Äôt suggest any ordering.\n\nMain Categorical Palette\nWhen to use: Most categorical visualizations with 2-5 categories.\n\n# The most commonly used categorical palette\ncpal_colors(\"main\")\n\n# Use in ggplot2\nggplot(data, aes(x = variable, fill = category)) +\n  geom_col() +\n  scale_fill_cpal(palette = \"main\")\n\nWhat makes this palette special: - 5 distinct colors that work well together - No implied ordering - each color has equal visual weight - High contrast ensures categories are easily distinguishable - Colorblind safe - maintains distinctness for all color vision types\n\n\nExtended Categorical Options\n\n# For fewer categories, use optimized subsets\ncpal_colors(\"main_3\")    # Perfect for 3-category data\ncpal_colors(\"main_4\")    # Optimal for 4-category data\n\n# For special cases\ncpal_colors(\"main_gray\") # Includes neutral gray for \"other/none\" category\ncpal_colors(\"blues\")     # Two-color palette for binary comparisons\ncpal_colors(\"compare\")   # Optimized for before/after comparisons\n\nChoosing the right categorical palette:\n\n\n\n\n\n\n\n\nYour Data\nRecommended Palette\nWhy\n\n\n\n\n2-3 categories\n\"main_3\"\nOptimal color spacing, maximum distinction\n\n\n4 categories\n\"main_4\"\nBalanced set without visual overload\n\n\n5+ categories\n\"main\"\nFull palette, but consider simplifying data\n\n\nBinary comparison\n\"compare\"\nHigh contrast, clear opposition\n\n\nHas ‚Äúother/none‚Äù category\n\"main_gray\"\nGray appropriately de-emphasizes\n\n\n\n\n\nCommon Categorical Color Mistakes to Avoid\n‚ùå Don‚Äôt do this:\n\n# Using sequential colors for categories (implies false order)\nscale_fill_gradient(low = \"lightblue\", high = \"darkblue\")\n\n‚úÖ Do this instead:\n\n# Use categorical colors that don't imply order\nscale_fill_cpal(palette = \"main\")"
  },
  {
    "objectID": "colors-palettes.html#sequential-palettes-for-continuous-data",
    "href": "colors-palettes.html#sequential-palettes-for-continuous-data",
    "title": "Colors & Palettes",
    "section": "Sequential Palettes: For Continuous Data",
    "text": "Sequential Palettes: For Continuous Data\nThe principle: Sequential data goes from low to high, and colors should visually represent this progression. Light-to-dark or single-hue progressions work best.\nWhen to use sequential palettes: - Population counts, ages, income levels - Percentages, probabilities, rates\n- Any continuous measure without a meaningful center point - Heatmaps, choropleths, and intensity visualizations\n\nSingle-Hue Sequential (Teal)\nBest for: Most continuous data visualization needs.\n\n# Different lengths for different needs\n#cpal_colors(\"teal_seq_4\")  # 4 color steps\n#cpal_colors(\"teal_seq_5\")  # 5 color steps  \n#cpal_colors(\"teal_seq_6\")  # 6 color steps\n\n# Create example data for heatmap demonstration\nlibrary(ggplot2)\nlibrary(cpaltemplates)\n# Generate a correlation matrix from mtcars dataset\ncorrelation_data &lt;- cor(mtcars[, c(\"mpg\", \"hp\", \"wt\", \"qsec\", \"disp\")])\n\n# Convert correlation matrix to long format for ggplot2\nheatmap_data &lt;- expand.grid(\n  x = rownames(correlation_data),\n  y = colnames(correlation_data)\n)\nheatmap_data$correlation &lt;- as.vector(correlation_data)\n\n# Use in ggplot2 with real data\nggplot(heatmap_data, aes(x = x, y = y, fill = correlation)) +\n  geom_tile() +\n  scale_fill_cpal(palette = \"teal_seq_5\", discrete = FALSE) +\n  labs(\n    title = \"Vehicle Characteristics Correlation Matrix\",\n    x = \"\",\n    y = \"\",\n    fill = \"Correlation\"\n  ) +\n  theme_cpal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\nWhy teal for sequential? - Brand consistency: Uses CPAL‚Äôs signature color - Perceptual uniformity: Even visual steps represent equal data steps - Print friendly: Works well in both color and grayscale - Professional appearance: Sophisticated, not overwhelming\n\n\nMulti-Hue Sequential (Yellow-Teal)\nBest for: When you want more visual interest or need to distinguish between multiple sequential variables.\n\n# Multi-hue options\ncpal_colors(\"yellow_teal_seq_4\")\ncpal_colors(\"yellow_teal_seq_5\") \ncpal_colors(\"yellow_teal_seq_6\")\n\nWhen to choose multi-hue over single-hue: - Multiple related measures: Comparing different rates or counts - High visual impact needed: Presentations, dashboards, key findings - Complex visualizations: Where single-hue might be too subtle - Avoiding confusion: When other elements use teal\nColor progression explanation: - Yellow (#E5CB50): Represents low values, warm and approachable - Green-Teal transition: Middle values, natural progression\n- Dark Teal (#004855): High values, professional and serious\n\n\nChoosing Sequential Palette Length\n\n\n\n\n\n\n\n\nNumber of Colors\nBest For\nExample Use Cases\n\n\n\n\n4 colors\nSimple continuous data, clear distinctions\nQuartiles, basic heatmaps, simple choropleths\n\n\n5 colors\nMost common choice, balanced detail\nQuintiles, most continuous visualizations\n\n\n6 colors\nComplex data needing fine distinctions\nDetailed heatmaps, precise geographic data"
  },
  {
    "objectID": "colors-palettes.html#diverging-palettes-for-data-with-a-meaningful-center",
    "href": "colors-palettes.html#diverging-palettes-for-data-with-a-meaningful-center",
    "title": "Colors & Palettes",
    "section": "Diverging Palettes: For Data with a Meaningful Center",
    "text": "Diverging Palettes: For Data with a Meaningful Center\nThe concept: Some data has a natural center point where values above and below have different meanings. Diverging palettes use contrasting colors on each side of this center.\nClassic use cases: - Change from baseline: Profit/loss, above/below average, improvement/decline - Survey data: Agree/disagree, satisfaction scales, political leaning - Statistical data: Positive/negative correlations, z-scores, residuals - Geographic data: Temperature anomalies, election margins\n\nPink-Teal Diverging\nWhy this combination? Pink and teal are complementary colors that create maximum visual contrast while maintaining CPAL brand consistency.\n\n# Different granularity options\ncpal_colors(\"pink_teal_3\")  # Simple: negative, neutral, positive\ncpal_colors(\"pink_teal_5\")  # Moderate: adds nuance\ncpal_colors(\"pink_teal_6\")  # Detailed: maximum distinction\n\nColor psychology in the diverging palette: - Pink side: Often represents ‚Äúnegative‚Äù changes, but the color choice is intentionally less harsh than red - Gray center: Neutral, no change, baseline values - Teal side: ‚ÄúPositive‚Äù changes, using CPAL‚Äôs signature optimistic color\n\n\nPractical Applications\nExample 1: Survey Results\n\n# Likert scale data (Strongly Disagree to Strongly Agree)\nlibrary(ggplot2)\nlibrary(cpaltemplates)\n\n# Create realistic survey data\nset.seed(123)  # For reproducible example\nsurvey_data &lt;- data.frame(\n  question = rep(c(\"Job Satisfaction\", \"Work-Life Balance\", \"Team Collaboration\", \"Career Growth\"), each = 100),\n  response = sample(\n    c(\"Strongly Disagree\", \"Disagree\", \"Neutral\", \"Agree\", \"Strongly Agree\"),\n    400,\n    replace = TRUE,\n    prob = c(0.1, 0.2, 0.3, 0.3, 0.1)  # Realistic distribution\n  )\n)\n\n# Ensure proper factor ordering for Likert responses\nsurvey_data$response &lt;- factor(survey_data$response, \n                              levels = c(\"Strongly Disagree\", \"Disagree\", \"Neutral\", \"Agree\", \"Strongly Agree\"))\n\n# Create the plot\nggplot(survey_data, aes(x = question, fill = response)) +\n  geom_bar(position = \"stack\") +\n  scale_fill_cpal(palette = \"pink_teal_5\") +\n  theme_cpal() +\n  labs(\n    title = \"Employee Survey Results\",\n    x = \"\",\n    y = \"Number of Responses\",\n    fill = \"\"\n  ) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\nExample 2: Performance vs.¬†Target\n\n# Performance above/below target\nlibrary(ggplot2)\nlibrary(cpaltemplates)\n# Create realistic performance data for different departments\nset.seed(456)  # For reproducible example\nperformance_data &lt;- data.frame(\n  department = c(\"Mathematics\", \"English\", \"Science\", \"History\", \"Art\", \n                \"Physical Education\", \"Music\", \"Computer Science\"),\n  variance_from_target = c(12.5, -8.2, 15.3, -3.1, 6.7, -12.4, 9.8, 18.2)\n)\n\n# Alternative: could use random data that's more variable\n# performance_data$variance_from_target &lt;- runif(8, min = -20, max = 25)\n\n# Create the plot\nggplot(performance_data, aes(x = department, y = variance_from_target, \n                            fill = variance_from_target)) +\n  geom_col() +\n  scale_fill_cpal(palette = \"pink_teal_6\", discrete = FALSE) +\n  theme_cpal() +\n  labs(\n    title = \"Department Performance vs. Target Goals\",\n    subtitle = \"Positive values indicate above target, negative values below target\",\n    x = \"Department\",\n    y = \"Variance from Target (%)\",\n    fill = \"Performance\\nVariance\"\n  ) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  geom_hline(yintercept = 0, linetype = \"dashed\", color = \"black\", alpha = 0.7)\n\n\n\n\n\n\n\n\n\n\nCritical Design Decisions\nCenter point matters: Make sure your data actually has a meaningful center. If not, use sequential palettes instead.\n‚ùå Don‚Äôt use diverging for: - Age groups (no meaningful center) - Income levels (zero isn‚Äôt meaningful for most analyses) - Geographic regions (no inherent center)\n‚úÖ Do use diverging for: - Change scores (zero = no change) - Performance vs.¬†benchmarks (benchmark = center) - Balance measures (balanced = center)"
  },
  {
    "objectID": "colors-palettes.html#advanced-usage-and-customization",
    "href": "colors-palettes.html#advanced-usage-and-customization",
    "title": "Colors & Palettes",
    "section": "Advanced Usage and Customization",
    "text": "Advanced Usage and Customization\n\nExploring Available Palettes\nThe cpaltemplates package provides three complementary functions for palette exploration:\nlist_cpal_palettes() - Programmatic palette discovery - Returns palette names for use in code - Optional detailed information with descriptions and color counts - Perfect for building automated palette selection logic\nquick_palette() - Fast visual reference\n- Clean, simple display for quick reference - Optional color limiting for preview of large palettes - Ideal when you know the palette name and want a quick look\nview_cpal_palettes() - Comprehensive exploration - All palettes overview or specific palette deep dive - Customizable display options (hex codes, compact view, etc.) - Best for choosing between multiple palettes or detailed exploration\n\n\nGetting Specific Colors\n\n# Get individual colors by name\ncpal_colors(c(\"teal\", \"pink\", \"orange\"))\n\n# Get first N colors from any palette\ncpal_colors(\"main\", n = 3)\n\n# Reverse any palette\ncpal_colors(\"main\", reverse = TRUE)\n\n\n\nIntegration with ggplot2\nFor discrete data:\n\n# Automatic color selection based on your data\nscale_color_cpal(palette = \"main\")\nscale_fill_cpal(palette = \"main\") \n\nFor continuous data:\n\n# Set discrete = FALSE for continuous scales\nscale_color_cpal(palette = \"teal_seq_5\", discrete = FALSE)\nscale_fill_cpal(palette = \"pink_teal_5\", discrete = FALSE)\n\nAdvanced ggplot2 options:\n\n# Reverse palette direction\nscale_fill_cpal(palette = \"main\", reverse = TRUE)\n\n# Pass additional arguments to underlying ggplot2 scales\nscale_color_cpal(palette = \"main\", name = \"Categories\", guide = guide_legend(ncol = 2))\n\n\n\nExploring and Choosing Palettes\nVisual exploration:\n\n# See all palettes at once\nview_cpal_palettes()\n\n# Interactive exploration of individual palettes\nquick_palette()\n\n# Display specific palette with hex codes\nquick_palette(\"main\")\nquick_palette(\"teal_seq_5\")\n\nWhat each function shows: - view_cpal_palettes(): Grid layout showing every palette, perfect for comparison - quick_palette(): Interactive tool with color codes and accessibility information - view_cpal_palettes(): Clean display with hex codes, ideal for documentation"
  },
  {
    "objectID": "colors-palettes.html#best-practices-and-guidelines",
    "href": "colors-palettes.html#best-practices-and-guidelines",
    "title": "Colors & Palettes",
    "section": "Best Practices and Guidelines",
    "text": "Best Practices and Guidelines\n\nColor Selection Decision Tree\nStep 1: What type of data do you have?\n\ngraph TD\n    A[What type of data?] --&gt; B[Categorical&lt;br/&gt;Groups, categories, classifications]\n    A --&gt; C[Sequential&lt;br/&gt;Continuous, low to high]\n    A --&gt; D[Diverging&lt;br/&gt;Has meaningful center point]\n    \n    B --&gt; E[How many categories?]\n    E --&gt; F[2-3: main_3]\n    E --&gt; G[4: main_4]  \n    E --&gt; H[5+: main]\n    \n    C --&gt; I[Visual impact needed?]\n    I --&gt; J[Standard: teal_seq_5]\n    I --&gt; K[High impact: yellow_teal_seq_5]\n    \n    D --&gt; L[Level of detail?]\n    L --&gt; M[Simple: pink_teal_3]\n    L --&gt; N[Detailed: pink_teal_5 or pink_teal_6]\n\n\n\n\n\n\n\n\n\nFigure¬†1: CPAL Color Palette Decision Tree\n\n\n\n\n\n\n\nAccessibility Considerations\nAll CPAL palettes are designed to be accessible, but here are best practices:\n\nTest your visualizations with colorblind simulation tools\nDon‚Äôt rely only on color to convey information - use shapes, patterns, or labels too\n\nProvide legends and clear labeling for all color-coded elements\nConsider your audience - some contexts may need higher contrast\n\n\n\nCommon Use Cases and Recommendations\n\n\n\n\n\n\n\n\nVisualization Type\nRecommended Palette\nWhy\n\n\n\n\nBar/column charts\n\"main\" for categories, \"teal_seq_5\" for values\nClear categorical distinction or value progression\n\n\nLine charts\n\"main\" for multiple lines\nDistinct line identification\n\n\nScatter plots\n\"main\" for groups, \"teal_seq_5\" for density\nGroup identification or density visualization\n\n\nHeatmaps\n\"teal_seq_5\" or \"yellow_teal_seq_5\"\nClear intensity progression\n\n\nGeographic maps\n\"teal_seq_5\" for quantities, \"pink_teal_5\" for comparisons\nGeographic data best practices\n\n\nDashboards\nMix of \"main\" and \"teal_seq_5\"\nConsistent brand presence\n\n\n\n\n\nPerformance and Technical Considerations\nColor rendering: All CPAL colors are specified in hex format for consistency across platforms and outputs.\nFile size: Color complexity doesn‚Äôt significantly impact file sizes, so choose based on visual needs rather than technical constraints.\nPrint considerations: All palettes are tested for print reproduction, but sequential palettes generally print more reliably than complex categorical ones."
  },
  {
    "objectID": "colors-palettes.html#troubleshooting-common-issues",
    "href": "colors-palettes.html#troubleshooting-common-issues",
    "title": "Colors & Palettes",
    "section": "Troubleshooting Common Issues",
    "text": "Troubleshooting Common Issues\n\nColors Not Appearing\n\n# Check if colors are loading properly\ncpal_colors(\"main\")  # Should return hex codes\n\n# If empty, try refreshing\nlibrary(cpaltemplates)\n\n\n\nColors Look Different Than Expected\nPossible causes: - Display calibration: Colors appear different on different monitors - RStudio viewer: Colors may render differently in RStudio vs.¬†exported files - File format: PNG vs.¬†PDF may show slight color differences\nSolutions:\n\n# Always preview exported files\nsave_cpal_plot(your_plot, \"test.png\")\n\n# Use consistent export settings\nsave_cpal_plot(your_plot, \"final.png\", dpi = 300, bg = \"white\")\n\n\n\nPalette Too Long/Short for Data\n\n# Automatically adjust to your data length\ncpal_colors(\"main\", n = 7)  # Gets 7 colors even if palette has 5\n\n# Or choose appropriate palette length\ncpal_colors(\"teal_seq_6\")   # For 6-level data"
  },
  {
    "objectID": "colors-palettes.html#examples-and-implementation",
    "href": "colors-palettes.html#examples-and-implementation",
    "title": "Colors & Palettes",
    "section": "Examples and Implementation",
    "text": "Examples and Implementation\n\nComplete Workflow Example\n\nlibrary(cpaltemplates)\nlibrary(ggplot2)\n\n# Step 1: Explore available colors\nview_cpal_palettes()\n\n# Step 2: Choose appropriate palette for your data type\nmy_data &lt;- data.frame(\n  category = c(\"A\", \"B\", \"C\", \"D\"),\n  value = c(25, 40, 35, 20)\n)\n\n# Step 3: Create visualization with CPAL colors\np &lt;- ggplot(my_data, aes(x = category, y = value, fill = category)) +\n  geom_col() +\n  scale_fill_cpal(palette = \"main_4\") +  # 4 categories = main_4\n  theme_cpal() +\n  labs(\n    title = \"Sample Categorical Data\",\n    subtitle = \"Using CPAL's main_4 categorical palette\"\n  )\n\n# Step 4: Save with CPAL standards\nsave_cpal_plot(p, \"my_visualization.png\")\n\n\nThe CPAL color system provides the foundation for all effective data visualization. Choose palettes based on your data type, consider your audience‚Äôs needs, and always prioritize accessibility and clarity over visual complexity."
  },
  {
    "objectID": "themes-styling.html",
    "href": "themes-styling.html",
    "title": "Themes & Styling",
    "section": "",
    "text": "A theme controls every visual aspect of your plot that isn‚Äôt directly related to your data: fonts, colors, spacing, grid lines, backgrounds, and more. Without consistent theming, even great data analysis can look unprofessional or be hard to interpret.\nThe cpaltemplates theme system solves critical problems:\n\n\n\n\n\n\n\n\n\n\nIssue\nImpact\nCPAL Solution\n\n\n\n\nInconsistent branding\nVisualizations don‚Äôt look like CPAL materials\nAutomatic CPAL brand integration\n\n\nPoor font choices\nSystem fonts vary by computer, look unprofessional\nGoogle Fonts (Inter/Roboto) with fallbacks\n\n\nOverwhelming visual clutter\nGrid lines and decorations compete with data\nOptimized visual hierarchy\n\n\nNot output-optimized\nSame theme for web, print, presentations\nSpecialized themes for each medium\n\n\nAccessibility issues\nPoor contrast, small fonts\nBuilt-in accessibility standards\n\n\n\n\n\n\n\nProfessional appearance: Every plot looks publication-ready\nBrand consistency: Automatic CPAL colors, fonts, and styling standards\nOutput optimization: Different themes for web, print, presentations, and maps\nAccessibility built-in: High contrast, readable fonts, colorblind-safe defaults\nCustomizable: Easy to adjust while maintaining brand consistency"
  },
  {
    "objectID": "themes-styling.html#why-themes-matter-for-data-visualization",
    "href": "themes-styling.html#why-themes-matter-for-data-visualization",
    "title": "Themes & Styling",
    "section": "",
    "text": "A theme controls every visual aspect of your plot that isn‚Äôt directly related to your data: fonts, colors, spacing, grid lines, backgrounds, and more. Without consistent theming, even great data analysis can look unprofessional or be hard to interpret.\nThe cpaltemplates theme system solves critical problems:\n\n\n\n\n\n\n\n\n\n\nIssue\nImpact\nCPAL Solution\n\n\n\n\nInconsistent branding\nVisualizations don‚Äôt look like CPAL materials\nAutomatic CPAL brand integration\n\n\nPoor font choices\nSystem fonts vary by computer, look unprofessional\nGoogle Fonts (Inter/Roboto) with fallbacks\n\n\nOverwhelming visual clutter\nGrid lines and decorations compete with data\nOptimized visual hierarchy\n\n\nNot output-optimized\nSame theme for web, print, presentations\nSpecialized themes for each medium\n\n\nAccessibility issues\nPoor contrast, small fonts\nBuilt-in accessibility standards\n\n\n\n\n\n\n\nProfessional appearance: Every plot looks publication-ready\nBrand consistency: Automatic CPAL colors, fonts, and styling standards\nOutput optimization: Different themes for web, print, presentations, and maps\nAccessibility built-in: High contrast, readable fonts, colorblind-safe defaults\nCustomizable: Easy to adjust while maintaining brand consistency"
  },
  {
    "objectID": "themes-styling.html#cpal-theme-system-overview",
    "href": "themes-styling.html#cpal-theme-system-overview",
    "title": "Themes & Styling",
    "section": "CPAL Theme System Overview",
    "text": "CPAL Theme System Overview\nThe cpaltemplates package provides 8 comprehensive theme functions designed for different use cases and output formats:\n\n\n\n\n\n\n\n\n\nTheme Function\nPurpose\nBest For\nKey Features\n\n\n\n\ntheme_cpal()\nDefault theme for most uses\nReports, presentations, general analysis\nBalanced design, flexible parameters\n\n\ntheme_cpal_minimal()\nClean, distraction-free\nFocus-on-data visualizations\nReduced visual elements\n\n\ntheme_cpal_dark()\nDark mode presentations\nDark backgrounds, night viewing\nLight text, optimal dark contrast\n\n\ntheme_cpal_classic()\nTraditional academic style\nFormal reports, academic papers\nStructured appearance, axis lines\n\n\ntheme_cpal_print()\nPrint optimization\nPDFs, printed materials\nHigh contrast, print-safe styling\n\n\ntheme_cpal_map()\nGeographic visualizations\nMaps, spatial data\nMinimal competing elements\n\n\nset_theme_cpal()\nSet default theme\nSession-wide consistency\nAutomatic theme application\n\n\nget_shiny_theme_colors()\nShiny application styling\nInteractive dashboards\nCSS color integration\n\n\n\n\nThe Science Behind CPAL Themes\nTypography: All themes use Google Fonts (Inter for headings, Roboto for body text) with carefully chosen fallbacks for cross-platform consistency.\nColor hierarchy: Themes work seamlessly with CPAL‚Äôs color system, ensuring proper contrast and accessibility.\nVisual hierarchy: Strategic use of whitespace, font sizes, and element prominence guides the reader‚Äôs attention to your data.\nTechnical optimization: Each theme is tested across different output formats and screen sizes."
  },
  {
    "objectID": "themes-styling.html#core-theme-function-theme_cpal",
    "href": "themes-styling.html#core-theme-function-theme_cpal",
    "title": "Themes & Styling",
    "section": "Core Theme Function: theme_cpal()",
    "text": "Core Theme Function: theme_cpal()\nThe theme_cpal() function is your starting point for most visualizations. It‚Äôs highly customizable while maintaining CPAL brand standards.\n\nBasic Usage\n\nlibrary(ggplot2)\nlibrary(cpaltemplates)\n\n# Basic CPAL theme\nggplot(mtcars, aes(x = wt, y = mpg)) +\n  geom_point() +\n  theme_cpal() +\n  labs(title = \"Vehicle Weight vs Fuel Efficiency\")\n\n\n\n\n\n\n\n\n\n\nUnderstanding theme_cpal() Parameters\nWhy so many options? Different visualizations need different emphasis and styling. Rather than creating dozens of separate functions, theme_cpal() provides focused control over the most important design decisions.\n\ntheme_cpal(\n  base_size = 14,           # Controls overall text scaling\n  base_family = \"\",         # Font family (auto-detects Google Fonts)\n  style = \"default\",        # Overall theme style\n  grid = \"horizontal\",      # Grid line configuration\n  axis_line = \"x\",         # Axis line placement\n  axis_title = TRUE,       # Include axis titles\n  legend_position = \"bottom\"  # Legend placement\n)\n\n\nParameter Deep Dive\nbase_size - Text Scaling\nControls the size of all text elements proportionally:\n\n# For presentations (larger text)\ntheme_cpal(base_size = 18)\n\n# For dense dashboards (smaller text)  \ntheme_cpal(base_size = 12)\n\n# Default for reports\ntheme_cpal(base_size = 14)\n\nWhen to adjust: - Presentations: 16-20 for readability from distance - Reports: 14-16 for balanced readability and space efficiency - Dashboards: 10-14 for information density - Print materials: 12-16 depending on page size\nstyle - Overall Visual Approach\n\n# Clean, balanced (most common)\ntheme_cpal(style = \"default\")\n\n# Reduced visual elements\ntheme_cpal(style = \"minimal\")  \n\n# Traditional academic appearance\ntheme_cpal(style = \"classic\")\n\n# Optimized for dark backgrounds\ntheme_cpal(style = \"dark\")\n\nChoosing the right style: - ‚Äúdefault‚Äù: Start here for 90% of visualizations - ‚Äúminimal‚Äù: When data complexity is high and you need focus - ‚Äúclassic‚Äù: For formal academic or traditional business contexts - ‚Äúdark‚Äù: For presentations on dark backgrounds or night viewing\ngrid - Grid Line Strategy\nGrid lines help readers estimate values but can create visual clutter:\n\n# Horizontal only (best for most bar/line charts)\ntheme_cpal(grid = \"horizontal\")\n\n# Vertical only (good for time series)\ntheme_cpal(grid = \"vertical\")\n\n# Both directions (for scatter plots, heatmaps)\ntheme_cpal(grid = \"both\")\n\n# No grid lines (minimal, clean)\ntheme_cpal(grid = \"none\")\n\nDecision guide: - Bar charts: Horizontal grid helps estimate heights - Line charts: Horizontal for values, vertical for time references - Scatter plots: Both can help with coordinate reading - Maps/artistic: None to avoid distracting from shapes\naxis_line - Axis Emphasis\n\n# X-axis line only (emphasizes categories/time)\ntheme_cpal(axis_line = \"x\")\n\n# Y-axis line only (emphasizes value scale) \ntheme_cpal(axis_line = \"y\")\n\n# Both axes (traditional)\ntheme_cpal(axis_line = \"both\")\n\n# No axis lines (minimal)\ntheme_cpal(axis_line = \"none\")\n\nlegend_position - Legend Placement Strategy\n\n# Bottom (default, doesn't interfere with data)\ntheme_cpal(legend_position = \"bottom\")\n\n# Right side (traditional, saves vertical space)\ntheme_cpal(legend_position = \"right\")\n\n# Top (good for maps, minimal legends)\ntheme_cpal(legend_position = \"top\")\n\n# Remove legend entirely\ntheme_cpal(legend_position = \"none\")"
  },
  {
    "objectID": "themes-styling.html#specialized-theme-variants",
    "href": "themes-styling.html#specialized-theme-variants",
    "title": "Themes & Styling",
    "section": "Specialized Theme Variants",
    "text": "Specialized Theme Variants\n\ntheme_cpal_minimal() - Focus on the Data\nWhen to use: Complex visualizations where every element should direct attention to the data itself.\n\n# Perfect for dense data visualizations\nlibrary(ggplot2)\nlibrary(cpaltemplates)\n\n# Create realistic complex dataset with multiple categories and dense points\nset.seed(789)  # For reproducible example\nn_points &lt;- 500\n\ncomplex_data &lt;- data.frame(\n  variable1 = rnorm(n_points, mean = 50, sd = 15),\n  variable2 = rnorm(n_points, mean = 25, sd = 8),\n  category = sample(c(\"Elementary\", \"Middle School\", \"High School\", \"Adult Ed\", \"Special Programs\"), \n                   n_points, replace = TRUE)\n)\n\n# Add some correlation between variables for more realistic data\ncomplex_data$variable2 &lt;- complex_data$variable2 + 0.3 * complex_data$variable1 + rnorm(n_points, 0, 5)\n\n# Create the plot\nggplot(complex_data, aes(x = variable1, y = variable2, color = category)) +\n  geom_point(alpha = 0.7, size = 1.2) +\n  theme_cpal_minimal() +\n  scale_color_cpal(palette = \"main\") +\n  labs(\n    title = \"Student Performance Distribution by Program Type\",\n    subtitle = \"Dense scatter plot showing relationship between assessment scores\",\n    x = \"Reading Score\",\n    y = \"Math Score\",\n    color = \"Program Type\"\n  ) +\n  guides(color = guide_legend(override.aes = list(alpha = 1, size = 2)))\n\n\n\n\n\n\n\n\nWhat makes it minimal: - Reduced grid lines: Only where absolutely necessary - Minimal axis decorations: Clean lines without excessive marking - Subdued backgrounds: Pure focus on data elements - Simplified legend styling: Less visual weight\nBest for: - Scatter plots with many points - Complex multi-series line charts - Heatmaps and matrix visualizations - Scientific/technical audiences who want data-first design\n\n\ntheme_cpal_dark() - Dark Mode Excellence\nWhen to use: Presentations in dark rooms, night viewing, or when your overall design uses dark backgrounds.\n\n# Optimized for dark backgrounds\nlibrary(ggplot2)\nlibrary(cpaltemplates)\n\n# Create data showing funding allocation across educational programs\nfunding_data &lt;- data.frame(\n  category = c(\"STEM Programs\", \"Arts Education\", \"Special Needs\", \n               \"After School\", \"Teacher Training\"),\n  value = c(2.8, 1.9, 3.2, 1.5, 2.1)  # Values in millions\n)\n\n# Reorder by value for better visual impact\nfunding_data$category &lt;- factor(funding_data$category, \n                               levels = funding_data$category[order(funding_data$value, decreasing = TRUE)])\n\n# Create the dark-themed plot\nggplot(funding_data, aes(x = category, y = value, fill = category)) +\n  geom_col(width = 0.7) +\n  theme_cpal_dark() +\n  scale_fill_cpal(palette = \"main\") +\n  labs(\n    title = \"Educational Program Funding Allocation\",\n    subtitle = \"2024 Budget Distribution (in millions)\",\n    x = \"\",\n    y = \"Funding Amount ($M)\",\n    fill = \"Program\"\n  ) +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    legend.position = \"none\"  # Categories are labeled on x-axis\n  ) +\n  scale_y_continuous(labels = scales::dollar_format(scale = 1, suffix = \"M\"))\n\n\n\n\n\n\n\n\nDark mode optimization: - Light text on dark background: High contrast for readability - Adjusted grid colors: Subtle lines that don‚Äôt overpower - Modified color palettes: Colors adjusted for dark background visibility - Reduced eye strain: Optimized for extended viewing\nPerfect for: - Conference presentations - Dashboard displays in low-light environments\n- Late-night analysis sessions - Modern UI design aesthetics\n\n\ntheme_cpal_classic() - Traditional Professional\nWhen to use: Formal reports, academic papers, traditional business contexts where conservative styling is preferred.\n\n# Traditional academic/business appearance\nlibrary(ggplot2)\nlibrary(cpaltemplates)\n\n# Create realistic quarterly enrollment data by program division\nfinancial_data &lt;- data.frame(\n  quarter = rep(c(\"Q1 2023\", \"Q2 2023\", \"Q3 2023\", \"Q4 2023\", \n                  \"Q1 2024\", \"Q2 2024\", \"Q3 2024\", \"Q4 2024\"), times = 4),\n  division = rep(c(\"K-12 Programs\", \"Adult Education\", \"Community Outreach\", \"Professional Development\"), each = 8),\n  revenue = c(\n    # K-12 Programs (highest enrollment, seasonal patterns)\n    850, 920, 780, 890, 880, 950, 810, 920,\n    # Adult Education (steady growth)\n    420, 450, 480, 510, 530, 560, 590, 620,\n    # Community Outreach (variable funding)\n    280, 320, 350, 300, 310, 370, 380, 340,\n    # Professional Development (project-based)\n    180, 240, 200, 260, 220, 280, 240, 300\n  )\n)\n\n# Convert quarter to factor with proper ordering\nfinancial_data$quarter &lt;- factor(financial_data$quarter, \n                                levels = c(\"Q1 2023\", \"Q2 2023\", \"Q3 2023\", \"Q4 2023\",\n                                          \"Q1 2024\", \"Q2 2024\", \"Q3 2024\", \"Q4 2024\"))\n\n# Create the classic-themed plot\nggplot(financial_data, aes(x = quarter, y = revenue, color = division, group = division)) +\n  geom_line(size = 1.2) +\n  geom_point(size = 2.5) +\n  theme_cpal_classic() +\n  scale_color_cpal(palette = \"main\") +\n  labs(\n    title = \"Quarterly Enrollment Revenue by Program Division\",\n    subtitle = \"Two-year trend analysis (2023-2024)\",\n    x = \"\",\n    y = \"Revenue ($ thousands)\",\n    color = \"Program Division\"\n  ) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  scale_y_continuous(labels = scales::dollar_format(scale = 1, suffix = \"K\"))\n\n\n\n\n\n\n\n\nClassic elements: - Full axis lines: Traditional x and y axes - Structured grid system: Both horizontal and vertical references - Formal typography: Conservative font sizing and spacing - Academic conventions: Follows traditional statistical graphics standards\nBest for: - Academic publications - Financial reports - Government documentation - Conservative business environments\n\n\ntheme_cpal_print() - Print Optimization\nWhen to use: PDFs, printed reports, black-and-white reproduction, or any materials that will be printed.\n\n# Optimized for print reproduction\nlibrary(ggplot2)\nlibrary(cpaltemplates)\n\n# Create realistic Q4 performance metrics for educational outcomes\nreport_data &lt;- data.frame(\n  metric = c(\"Student Retention\", \"Course Completion\", \"Test Score Improvement\", \n             \"Parent Satisfaction\", \"Teacher Retention\", \"Budget Efficiency\"),\n  value = c(87.5, 92.3, 78.9, 85.2, 91.7, 88.4)\n)\n\n# Order by performance for better visual impact\nreport_data$metric &lt;- factor(report_data$metric, \n                            levels = report_data$metric[order(report_data$value, decreasing = TRUE)])\n\n# Create print-optimized chart\nggplot(report_data, aes(x = metric, y = value)) +\n  geom_col(fill = cpal_colors(\"midnight\"), width = 0.6) +\n  theme_cpal_print() +\n  labs(\n    title = \"Q4 Performance Metrics\",\n    subtitle = \"Key Educational Outcomes (Percentage Achievement)\",\n    x = \"\",\n    y = \"Achievement Rate (%)\"\n  ) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  scale_y_continuous(limits = c(0, 100), breaks = seq(0, 100, 20)) +\n  geom_text(aes(label = paste0(value, \"%\")), \n            vjust = -0.5, size = 3, color = \"black\")\n\n\n\n\n\n\n\n\nPrint optimizations: - High contrast elements: Ensures visibility when printed - Conservative font choices: System fonts that render reliably - Black and white friendly: Works even without color printing - Appropriate sizing: Text and elements sized for page reproduction\nTechnical considerations: - DPI independence: Looks good at any print resolution - Color-to-grayscale: Maintains distinction when printed in B&W - Font embedding: Uses widely available fonts for compatibility\n\n\ntheme_cpal_map() - Geographic Visualization\nWhen to use: Maps, geographic data, spatial visualizations where decorative elements would interfere with geographic interpretation.\n\n# Clean geographic visualization\nlibrary(ggplot2)\nlibrary(maps)\nlibrary(cpaltemplates)\n\n# Get US state map data and add educational metrics\nstate_data &lt;- map_data(\"state\")\n\n# Create realistic education data by state (sample of states)\neducation_metrics &lt;- data.frame(\n  region = c(\"california\", \"texas\", \"florida\", \"new york\", \"illinois\", \n             \"pennsylvania\", \"ohio\", \"georgia\", \"north carolina\", \"michigan\",\n             \"arizona\", \"washington\", \"massachusetts\", \"virginia\", \"indiana\"),\n  student_population = c(6200000, 5400000, 2800000, 2600000, 2000000,\n                        1750000, 1650000, 1600000, 1550000, 1450000,\n                        1100000, 1080000, 980000, 1250000, 1040000)\n)\n\n# Join geographic data with education data\ngeographic_data &lt;- merge(state_data, education_metrics, by = \"region\", all.x = TRUE)\n\n# Create the map\nggplot(geographic_data, aes(x = long, y = lat, group = group, fill = student_population)) +\n  geom_polygon(color = \"white\", size = 0.2) +\n  theme_cpal_map() +\n  scale_fill_cpal(palette = \"teal_seq_5\", discrete = FALSE, \n                  na.value = \"grey90\",\n                  labels = scales::number_format(scale = 1e-6, suffix = \"M\")) +\n  labs(\n    title = \"Student Population by State\",\n    subtitle = \"Public K-12 enrollment across selected US states\",\n    fill = \"Student\\nPopulation\"\n  ) +\n  coord_map(\"albers\", lat0 = 39, lat1 = 45) +\n  guides(fill = guide_colorbar(title.position = \"top\", \n                              barwidth = 15, barheight = 0.8))\n\n\n\n\n\n\n\n\nMap-specific design: - Minimal axis elements: No competing lines or grids - Clean backgrounds: Nothing to interfere with geographic shapes - Optimized legends: Positioned to not cover important map areas - Coordinate system friendly: Works well with map projections"
  },
  {
    "objectID": "themes-styling.html#logo-integration-with-cpal-themes",
    "href": "themes-styling.html#logo-integration-with-cpal-themes",
    "title": "Themes & Styling",
    "section": "Logo Integration with CPAL Themes",
    "text": "Logo Integration with CPAL Themes\n\nAdding CPAL Logos to Themed Plots\nWhy logos matter: Logos provide immediate brand recognition and professional credibility. The add_cpal_logo() function seamlessly integrates CPAL branding with your themed visualizations.\nSmart logo integration: The function automatically detects your theme style (light vs.¬†dark) and selects the appropriate logo variant for optimal visibility.\n\n# Basic logo addition to any CPAL-themed plot\nlibrary(ggplot2)\nlibrary(cpaltemplates)\n# Create sample performance data\nperformance_data &lt;- data.frame(\n  category = c(\"Reading Proficiency\", \"Math Achievement\", \"Science Scores\", \n               \"Writing Assessment\", \"Critical Thinking\"),\n  value = c(78, 82, 75, 80, 77)\n)\n\n# Reorder by value for better presentation\nperformance_data$category &lt;- factor(performance_data$category, \n                                   levels = performance_data$category[order(performance_data$value)])\n\n# Create the base plot\nplot_with_logo &lt;- ggplot(performance_data, aes(x = category, y = value)) +\n  geom_col(fill = cpal_colors(\"midnight\"), width = 0.7) +\n  theme_cpal() +\n  labs(\n    title = \"Performance Metrics\",\n    subtitle = \"Student Achievement Across Key Areas\",\n    x = \"\",\n    y = \"Proficiency Rate (%)\"\n  ) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  scale_y_continuous(limits = c(0, 100), breaks = seq(0, 100, 20)) +\n  geom_text(aes(label = paste0(value, \"%\")), \n            vjust = -0.5, size = 3.5, color = \"black\")\n\n# Add CPAL logo to the plot\nplot_with_logo &lt;- plot_with_logo |&gt;\n  add_cpal_logo()\n\n# Display the plot\nplot_with_logo\n\n\n\n\n\n\n\n\n\n\nLogo Positioning Strategy\nChoose position based on your visualization content:\n\n# Top-right (default) - doesn't interfere with most data\nadd_cpal_logo(plot, position = \"top-right\")\n\n# Top-left - good when legend is on the right\nadd_cpal_logo(plot, position = \"top-left\")\n\n# Bottom-right - traditional corporate position\nadd_cpal_logo(plot, position = \"bottom-right\")\n\n# Bottom-left - when caption/source is on the right\nadd_cpal_logo(plot, position = \"bottom-left\")\n\nPosition decision guide:\n\n\n\n\n\n\n\n\nYour Plot Has‚Ä¶\nRecommended Position\nWhy\n\n\n\n\nLegend on right side\n\"top-left\"\nAvoids legend overlap\n\n\nLong title/subtitle\n\"bottom-right\"\nKeeps title area clean\n\n\nCaption/source note\n\"bottom-left\"\nBalances bottom elements\n\n\nDense data in corners\n\"top-right\"\nDefault safe choice\n\n\nMap visualization\n\"bottom-left\"\nTraditional map logo placement\n\n\n\n\n\nLogo Size Optimization\nSize affects both visibility and data interference:\n\n# Subtle branding (good for complex visualizations)\nadd_cpal_logo(plot, size = 0.06)\n\n# Standard branding (default)\nadd_cpal_logo(plot, size = 0.09)\n\n# Prominent branding (presentations, key reports)\nadd_cpal_logo(plot, size = 0.12)\n\nWhen to adjust logo size: - Complex visualizations: Smaller logos (0.06-0.08) avoid data interference - Simple charts: Standard size (0.09) provides clear branding - Presentations: Larger logos (0.10-0.12) ensure visibility from distance - Print materials: Consider final print size when choosing logo scale\n\n\nTheme-Logo Integration Examples\nDifferent themes work best with different logo approaches:\n\n# Light themes - standard logo placement\nstandard_plot &lt;- ggplot(data, aes(x = x, y = y)) +\n  geom_point(color = cpal_colors(\"teal\")) +\n  theme_cpal() +\n  labs(title = \"Standard Report Visualization\") |&gt;\n  add_cpal_logo(position = \"top-right\", size = 0.09)\n\n# Dark themes - automatically uses light logo variant\ndark_plot &lt;- ggplot(data, aes(x = x, y = y)) +\n  geom_point(color = cpal_colors(\"teal\")) +\n  theme_cpal_dark() +\n  labs(title = \"Dark Theme Presentation\") |&gt;\n  add_cpal_logo(position = \"bottom-right\", size = 0.10)\n\n# Minimal themes - smaller, subtle logo\nminimal_plot &lt;- ggplot(complex_data, aes(x = x, y = y, color = category)) +\n  geom_point(alpha = 0.7) +\n  theme_cpal_minimal() +\n  scale_color_cpal(palette = \"main\") |&gt;\n  add_cpal_logo(position = \"top-left\", size = 0.06)\n\n# Map themes - traditional bottom-left placement\nmap_plot &lt;- ggplot(geographic_data, aes(x = long, y = lat, fill = value)) +\n  geom_polygon() +\n  theme_cpal_map() +\n  scale_fill_cpal(palette = \"teal_seq_5\", discrete = FALSE) |&gt;\n  add_cpal_logo(position = \"bottom-left\", size = 0.08)\n\n\n\nTechnical Requirements\nDependencies: The logo function requires two additional packages:\n\n# Install if needed (these are suggested dependencies)\ninstall.packages(c(\"cowplot\", \"magick\"))\n\n# The function will inform you if packages are missing\nadd_cpal_logo(plot)  # Provides helpful error messages if dependencies missing\n\nCustom logo paths: For special cases or updated logos:\n\n# Use custom logo file\nadd_cpal_logo(plot, logo_path = \"path/to/custom_cpal_logo.png\")\n\n\n\nLogo Best Practices\nProfessional guidelines: 1. Consistent placement: Use the same position across related visualizations 2. Appropriate sizing: Logo should be visible but not dominant 3. Theme coordination: Let the function auto-detect theme for logo variant 4. Output consideration: Test logo visibility in final output format\nWhen to skip logos: - Internal working documents or draft visualizations - Plots that will be embedded in already-branded materials - Highly complex visualizations where any addition reduces clarity - Academic publications with strict formatting requirements"
  },
  {
    "objectID": "themes-styling.html#advanced-theme-customization",
    "href": "themes-styling.html#advanced-theme-customization",
    "title": "Themes & Styling",
    "section": "Advanced Theme Customization",
    "text": "Advanced Theme Customization\n\nCombining Themes with Custom Modifications\nStart with a CPAL theme, then make specific adjustments:\n\n# Start with CPAL theme, then customize\nggplot(data, aes(x = x, y = y)) +\n  geom_point() +\n  theme_cpal() +\n  theme(\n    plot.title = element_text(size = 20, color = cpal_colors(\"midnight\")),\n    legend.position = \"top\",\n    panel.grid.minor = element_blank()\n  )\n\nBest practices for customization: - Start with a CPAL theme: Don‚Äôt start from scratch - Make minimal changes: Preserve brand consistency - Test across outputs: Ensure customizations work in different formats\n\n\nSetting Default Themes\nFor session-wide consistency:\n\n# Set CPAL theme as default for all plots in this session\nset_theme_cpal()\n\n# Set a specific variant as default\nset_theme_cpal(\"minimal\", base_size = 16)\n\n# Now all plots automatically use CPAL theming\nggplot(data, aes(x = x, y = y)) + geom_point()  # Automatically themed!\n\nWhy use set_theme_cpal(): - Consistency: Every plot in your analysis uses the same theme - Efficiency: No need to add theme functions to every plot - Team collaboration: Ensures all team members‚Äô plots look consistent\n\n\nIntegration with Shiny Applications\nFor interactive dashboards:\n\n# Get CPAL colors for Shiny theming\nshiny_colors &lt;- get_shiny_theme_colors(\"default\")\n\n# Use in Shiny UI\nfluidPage(\n  theme = shinythemes::shinytheme(\"flatly\"),\n  tags$style(HTML(paste0(\"\n    .content-wrapper, .right-side {\n      background-color: \", shiny_colors$background, \";\n    }\n  \")))\n)"
  },
  {
    "objectID": "themes-styling.html#theme-selection-decision-guide",
    "href": "themes-styling.html#theme-selection-decision-guide",
    "title": "Themes & Styling",
    "section": "Theme Selection Decision Guide",
    "text": "Theme Selection Decision Guide\n\nQuick Decision Tree\n\ngraph TD\n    A[What's your output format?] --&gt; B[Digital display]\n    A --&gt; C[Print/PDF]\n    A --&gt; D[Presentation]\n    A --&gt; E[Geographic/Map]\n    \n    B --&gt; F[Complex data?]\n    F --&gt;|Yes| G[theme_cpal_minimal]\n    F --&gt;|No| H[theme_cpal default]\n    \n    C --&gt; I[theme_cpal_print]\n    \n    D --&gt; J[Dark background?]\n    J --&gt;|Yes| K[theme_cpal_dark]\n    J --&gt;|No| L[theme_cpal with base_size=18]\n    \n    E --&gt; M[theme_cpal_map]\n\n\n\n\n\n\n\n\n\n\n\n\nUse Case Matrix\n\n\n\n\n\n\n\n\nYour Situation\nRecommended Theme\nKey Parameters\n\n\n\n\nStandard report visualization\ntheme_cpal()\nDefault parameters\n\n\nExecutive presentation\ntheme_cpal(base_size = 18)\nLarger text for readability\n\n\nComplex scatter plot\ntheme_cpal_minimal(grid = \"both\")\nFocus on data points\n\n\nFinancial time series\ntheme_cpal_classic(grid = \"horizontal\")\nTraditional business style\n\n\nMap visualization\ntheme_cpal_map()\nClean geographic focus\n\n\nDark background slide\ntheme_cpal_dark(base_size = 16)\nOptimized contrast\n\n\nPrinted report\ntheme_cpal_print(base_size = 14)\nPrint optimization\n\n\nDashboard panel\ntheme_cpal_minimal(base_size = 12)\nCompact, information-dense"
  },
  {
    "objectID": "themes-styling.html#typography-and-font-management",
    "href": "themes-styling.html#typography-and-font-management",
    "title": "Themes & Styling",
    "section": "Typography and Font Management",
    "text": "Typography and Font Management\n\nUnderstanding CPAL‚Äôs Font Strategy\nPrimary Font: Inter - Usage: Headings, titles, axis labels - Characteristics: Modern, clean, highly readable - Why chosen: Professional appearance, excellent screen rendering\nSecondary Font: Roboto\n- Usage: Body text, annotations, legends - Characteristics: Neutral, versatile, web-optimized - Why chosen: Pairs well with Inter, widely supported\n\n\nFont Integration\n\n# Fonts are automatically integrated when you use CPAL themes\nsetup_cpal_google_fonts()  # Run once per session\n\n# Themes automatically use the best available font\ntheme_cpal()  # Will use Inter if available, fallback to system fonts\n\nCross-platform font handling: - Windows: Downloads and registers Google Fonts - Mac: Uses Google Fonts with system fallbacks\n- Linux: Graceful degradation to system fonts - Server environments: Automatic fallback to reliable system fonts"
  },
  {
    "objectID": "themes-styling.html#best-practices-and-guidelines",
    "href": "themes-styling.html#best-practices-and-guidelines",
    "title": "Themes & Styling",
    "section": "Best Practices and Guidelines",
    "text": "Best Practices and Guidelines\n\nTheme Consistency Rules\n\nOne theme per analysis: Don‚Äôt mix themes within the same report/presentation\nConsistent parameters: If you use base_size = 16 for one plot, use it for all\nAppropriate for audience: Academic audiences expect different styling than business\nOutput-appropriate: Web themes for web, print themes for print\n\n\n\nCommon Theme Mistakes\n‚ùå Don‚Äôt do this:\n\n# Mixing themes inconsistently\nplot1 + theme_cpal()\nplot2 + theme_cpal_minimal()\nplot3 + theme_cpal_dark()\n\n‚úÖ Do this instead:\n\n# Consistent theming with set_theme_cpal()\nset_theme_cpal(\"default\", base_size = 16)\nplot1  # Automatically themed\nplot2  # Automatically themed\nplot3  # Automatically themed\n\n\n\nPerformance Considerations\nTheme rendering speed: Complex themes take longer to render. For iterative analysis: - Use theme_cpal_minimal() during development - Switch to full themes for final outputs\nMemory usage: Themes are lightweight objects, but Google Fonts require initial download - Run setup_cpal_google_fonts() once per session - Fonts are cached after first download"
  },
  {
    "objectID": "themes-styling.html#troubleshooting-common-issues",
    "href": "themes-styling.html#troubleshooting-common-issues",
    "title": "Themes & Styling",
    "section": "Troubleshooting Common Issues",
    "text": "Troubleshooting Common Issues\n\nFonts Not Displaying Correctly\nProblem: Plots show default system fonts instead of CPAL fonts\n\n# Check font setup\nsetup_cpal_google_fonts(verbose = TRUE)\n\n# Force font refresh\nsetup_cpal_google_fonts(force_refresh = TRUE)\n\n\n\nThemes Look Different Than Expected\nProblem: Visual elements don‚Äôt match documentation examples - Check your ggplot2 version: Older versions may render differently - Verify color integration: Ensure you‚Äôre using scale_color_cpal() functions - Review customizations: Custom theme modifications may override CPAL styling\n\n\nPrint Output Issues\nProblem: Plots look different when printed\n\n# Always use print theme for printed outputs\nplot + theme_cpal_print()\n\n# Test with appropriate dimensions\nsave_cpal_plot(plot, \"test.png\", size = \"default\")"
  },
  {
    "objectID": "themes-styling.html#complete-workflow-examples",
    "href": "themes-styling.html#complete-workflow-examples",
    "title": "Themes & Styling",
    "section": "Complete Workflow Examples",
    "text": "Complete Workflow Examples\n\nStandard Report Workflow\n\nlibrary(cpaltemplates)\nlibrary(ggplot2)\n\n# Set up session\nsetup_cpal_google_fonts()\nset_theme_cpal(\"default\", base_size = 14)\n\n# Create multiple plots - all automatically themed\nplot1 &lt;- ggplot(data1, aes(x = category, y = value)) +\n  geom_col(fill = cpal_colors(\"midnight\")) +\n  labs(title = \"Performance by Category\")\n\nplot2 &lt;- ggplot(data2, aes(x = date, y = metric, color = division)) +\n  geom_line(size = 1) +\n  scale_color_cpal(palette = \"main\") +\n  labs(title = \"Trends Over Time\")\n\n# Save with consistent styling\nsave_cpal_plot(plot1, \"category_performance.png\")\nsave_cpal_plot(plot2, \"trends_over_time.png\")\n\n\n\nPresentation Workflow\n\n# Optimized for presentation display\nsetup_cpal_google_fonts()\n\n# Larger text for readability from distance\npresentation_plot &lt;- ggplot(data, aes(x = factor, y = outcome, fill = factor)) +\n  geom_col(show.legend = FALSE) +\n  scale_fill_cpal(palette = \"main\") +\n  theme_cpal(base_size = 18, legend_position = \"none\") +\n  labs(\n    title = \"Key Findings\",\n    subtitle = \"Clear, compelling insights\",\n    x = \"\", y = \"Impact Score\"\n  )\n\nsave_cpal_plot(presentation_plot, \"presentation_slide.png\", size = \"slide\")\n\n\nCPAL themes provide the foundation for professional, consistent, and accessible data visualization. Choose themes based on your output format and audience, customize thoughtfully, and always prioritize clarity and readability."
  },
  {
    "objectID": "workflow-integration.html",
    "href": "workflow-integration.html",
    "title": "Education Impact Study 2024",
    "section": "",
    "text": "Individual functions are powerful, but the real magic happens when you combine them into complete workflows. This section shows how to use multiple cpaltemplates functions together to create professional, efficient, and reproducible data analysis workflows that reflect CPAL‚Äôs standards and best practices.\n\n\n\n\n\n\n\n\n\nIsolated Function Use\nIntegrated Workflow\n\n\n\n\nUse theme_cpal() for one plot\nConsistent theming across entire analysis\n\n\nCreate single interactive visualization\nCoordinated interactive dashboard with multiple elements\n\n\nGenerate one report manually\nAutomated pipeline from data to multiple outputs\n\n\nApply CPAL colors to individual charts\nComplete brand consistency across all deliverables\n\n\nSet up project structure once\nReproducible project templates for team standardization\n\n\n\n\n\n\n\nConsistency: Every output matches CPAL standards automatically\nEfficiency: Automated processes reduce manual work and errors\nReproducibility: Clear workflows can be repeated and shared\nScalability: Workflows work for simple analyses and complex multi-output projects\nProfessionalism: Integrated approach produces publication-ready results"
  },
  {
    "objectID": "workflow-integration.html#why-integrated-workflows-matter",
    "href": "workflow-integration.html#why-integrated-workflows-matter",
    "title": "Education Impact Study 2024",
    "section": "",
    "text": "Individual functions are powerful, but the real magic happens when you combine them into complete workflows. This section shows how to use multiple cpaltemplates functions together to create professional, efficient, and reproducible data analysis workflows that reflect CPAL‚Äôs standards and best practices.\n\n\n\n\n\n\n\n\n\nIsolated Function Use\nIntegrated Workflow\n\n\n\n\nUse theme_cpal() for one plot\nConsistent theming across entire analysis\n\n\nCreate single interactive visualization\nCoordinated interactive dashboard with multiple elements\n\n\nGenerate one report manually\nAutomated pipeline from data to multiple outputs\n\n\nApply CPAL colors to individual charts\nComplete brand consistency across all deliverables\n\n\nSet up project structure once\nReproducible project templates for team standardization\n\n\n\n\n\n\n\nConsistency: Every output matches CPAL standards automatically\nEfficiency: Automated processes reduce manual work and errors\nReproducibility: Clear workflows can be repeated and shared\nScalability: Workflows work for simple analyses and complex multi-output projects\nProfessionalism: Integrated approach produces publication-ready results"
  },
  {
    "objectID": "workflow-integration.html#workflow-categories",
    "href": "workflow-integration.html#workflow-categories",
    "title": "Education Impact Study 2024",
    "section": "Workflow Categories",
    "text": "Workflow Categories\nThis section presents 5 complete workflow types commonly used by CPAL data teams:\n\n\n\n\n\n\n\n\n\nWorkflow Type\nBest For\nFunctions Used\nOutputs\n\n\n\n\nStandard Analysis\nExploratory analysis, research projects\nColors, themes, plots, project setup\nAnalysis scripts, visualizations, summary report\n\n\nExecutive Reporting\nStakeholder communications, board presentations\nAll visualization functions + reporting + interactivity\nProfessional reports, slides, interactive dashboards\n\n\nOngoing Monitoring\nProgram evaluation, KPI tracking\nProject setup, interactive features, automation\nLive dashboards, automated reports, alert systems\n\n\nResearch Publication\nAcademic papers, policy briefs, external reports\nAll functions with emphasis on accessibility and reproducibility\nMulti-format publications, supporting materials\n\n\nTeam Collaboration\nMulti-person projects, knowledge sharing\nProject setup, version control, standardized templates\nShared projects, documentation sites, collaborative tools"
  },
  {
    "objectID": "workflow-integration.html#workflow-1-standard-analysis-project",
    "href": "workflow-integration.html#workflow-1-standard-analysis-project",
    "title": "Education Impact Study 2024",
    "section": "Workflow 1: Standard Analysis Project",
    "text": "Workflow 1: Standard Analysis Project\nScenario: You need to analyze quarterly program data, create visualizations, and produce a summary report for internal use.\n\nStep 1: Project Setup with Modern Workflows\n\nlibrary(cpaltemplates)\n\n# Create analysis project with best practices built-in\nstart_project(\n  name = \"q4-program-analysis\",\n  project_type = \"analysis\",\n  features = c(\"renv\", \"git\", \"targets\"),\n  interactive = TRUE  # Get guidance through setup\n)\n\n# Project automatically opens in RStudio with:\n# - Folder structure optimized for analysis\n# - Git repository initialized\n# - renv for package management\n# - targets for workflow automation\n# - CPAL assets and branding included\n\n\n\nStep 2: Data Analysis with CPAL Standards\n\n# File: R/analysis.R (created by template)\nlibrary(cpaltemplates)\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# Set up fonts for consistent typography\nsetup_cpal_google_fonts()\n\n# Set CPAL theme as default for all plots\nset_theme_cpal(\"default\", base_size = 14)\n\n# Load and prepare data\nprogram_data &lt;- read.csv(\"data/raw/q4_program_data.csv\") %&gt;%\n  clean_and_prepare()  # Your data cleaning function\n\n# Create analysis visualizations with consistent CPAL styling\nperformance_plot &lt;- program_data %&gt;%\n  ggplot(aes(x = program_type, y = outcomes_achieved, fill = program_type)) +\n  geom_col(show.legend = FALSE) +\n  scale_fill_cpal(palette = \"main\") +\n  labs(\n    title = \"Q4 Program Performance\",\n    subtitle = \"Outcomes achieved by program type\",\n    x = \"Program Type\",\n    y = \"Outcomes Achieved\",\n    caption = \"Data: CPAL Program Evaluation System\"\n  )\n\n# Save with CPAL standards\nsave_cpal_plot(performance_plot, \"figures/q4_performance.png\", size = \"default\")\n\n# Create trend analysis\ntrend_plot &lt;- program_data %&gt;%\n  ggplot(aes(x = month, y = participation, color = region)) +\n  geom_line(size = 1.2) +\n  scale_color_cpal(palette = \"main\") +\n  labs(\n    title = \"Participation Trends by Region\",\n    subtitle = \"Monthly participation over Q4 2024\",\n    x = \"Month\",\n    y = \"Total Participation\",\n    color = \"Region\"\n  )\n\nsave_cpal_plot(trend_plot, \"figures/participation_trends.png\", size = \"default\")\n\n# Check accessibility of all plots\ncheck_plot_accessibility(performance_plot, verbose = TRUE)\ncheck_plot_accessibility(trend_plot, verbose = TRUE)\n\n\n\nStep 3: Add Professional Reporting\n\n# Add Quarto reporting capability to existing project\nuse_quarto_report()\n\n# This adds:\n# - report.qmd with CPAL branding\n# - _quarto.yml configured for professional output\n# - CPAL CSS and assets\n# - Proper folder structure for reports\n\nEdit the generated report.qmd:\n\n---\ntitle: \"Q4 Program Analysis\"\nsubtitle: \"Performance outcomes and participation trends\"\nauthor: \"CPAL Data Team\"\ndate: today\nformat:\n  html:\n    theme: [default, assets/css/cpal.css]\n    toc: true\n  pdf:\n    documentclass: report\n    keep-tex: true\n---\n\n```{r setup, include=FALSE}\nlibrary(cpaltemplates)\nlibrary(ggplot2)\nlibrary(knitr)\n\nsetup_cpal_google_fonts()\nset_theme_cpal()\n\nknitr::opts_chunk$set(\n  echo = FALSE,\n  warning = FALSE,\n  message = FALSE,\n  fig.width = 8,\n  fig.height = 6\n)\n```\n\n## Executive Summary\n\nOur Q4 analysis shows strong program performance with {{r}} total outcomes achieved across all program types.\n\n## Performance Analysis\n\n```{r performance-chart}\n# Load saved analysis results\nperformance_plot\n```\n\n## Participation Trends  \n\n```{r trends-chart}\ntrend_plot  \n```\n\n## Key Findings\n\n1. **Strong Performance**: All program types exceeded baseline expectations\n2. **Regional Variation**: Participation trends varied by region with North region leading\n3. **Growth Trajectory**: Positive trends indicate successful program expansion\n\n## Recommendations\n\nBased on this analysis, we recommend...\n\n\n\nStep 4: Workflow Automation with Targets\n\n# File: _targets.R (created by use_targets())\nlibrary(targets)\nlibrary(tarchetypes)\n\n# Define the analysis pipeline\nlist(\n  # Data loading and cleaning\n  tar_target(\n    raw_data,\n    read.csv(\"data/raw/q4_program_data.csv\")\n  ),\n  \n  tar_target(\n    clean_data,\n    clean_and_prepare(raw_data)\n  ),\n  \n  # Create visualizations\n  tar_target(\n    performance_plot,\n    create_performance_plot(clean_data)\n  ),\n  \n  tar_target(\n    trend_plot,\n    create_trend_plot(clean_data)  \n  ),\n  \n  # Save plots with CPAL standards\n  tar_target(\n    saved_plots,\n    {\n      save_cpal_plot(performance_plot, \"figures/q4_performance.png\")\n      save_cpal_plot(trend_plot, \"figures/participation_trends.png\")\n      \"plots saved\"\n    }\n  ),\n  \n  # Render report\n  tar_quarto(report, \"report.qmd\")\n)\n\n# Run the entire pipeline\ntargets::tar_make()\n\n\n\nStep 5: Complete Analysis Workflow\n\n# The integrated workflow now provides:\n\n# 1. Reproducible analysis that can be re-run with new data\ntargets::tar_make()\n\n# 2. Consistent CPAL branding across all outputs\n# 3. Professional report generation\nquarto::quarto_render(\"report.qmd\")\n\n# 4. Version control for team collaboration\nsystem(\"git add .\")\nsystem(\"git commit -m 'Complete Q4 analysis with CPAL standards'\")\n\n# 5. Package management for reproducibility  \nrenv::snapshot()\n\nResult: Professional analysis project with automated workflow, consistent branding, and reproducible outputs that can be shared with stakeholders or updated with new data."
  },
  {
    "objectID": "workflow-integration.html#workflow-2-executive-reporting-presentations",
    "href": "workflow-integration.html#workflow-2-executive-reporting-presentations",
    "title": "Education Impact Study 2024",
    "section": "Workflow 2: Executive Reporting & Presentations",
    "text": "Workflow 2: Executive Reporting & Presentations\nScenario: Create comprehensive deliverables for board meeting including report, slides, and interactive dashboard.\n\nStep 1: Multi-Output Project Setup\n\n# Create report-focused project\nstart_project(\n  name = \"board-presentation-2024\",\n  project_type = \"quarto-report\",\n  features = c(\"renv\", \"git\", \"github\")  # Include GitHub for sharing\n)\n\n# Add additional capabilities to the report project\nuse_quarto_slides(filename = \"board-presentation.qmd\")\nuse_shiny_dashboard()\n\n\n\nStep 2: Coordinated Visual System\n\n# File: R/shared_visualizations.R\nlibrary(cpaltemplates)\n\n# Set up consistent visual system\nsetup_cpal_google_fonts()\n\n# Define shared color scheme for all outputs\nboard_colors &lt;- list(\n  primary = cpal_colors(\"midnight\"),\n  secondary = cpal_colors(\"teal\"), \n  accent = cpal_colors(\"gold\"),\n  highlight = cpal_colors(\"pink\")\n)\n\n# Shared theme settings for consistency\nboard_theme_settings &lt;- list(\n  base_size = 14,      # For reports\n  slide_size = 18,     # For presentations  \n  dashboard_size = 12  # For dashboard\n)\n\n# Create reusable plotting functions\ncreate_kpi_chart &lt;- function(data, title) {\n  ggplot(data, aes(x = metric, y = value, fill = metric)) +\n    geom_col(show.legend = FALSE) +\n    scale_fill_cpal(palette = \"main\") +\n    theme_cpal(base_size = board_theme_settings$base_size) +\n    labs(title = title, x = \"\", y = \"Value\") +\n    coord_flip()\n}\n\ncreate_trend_chart &lt;- function(data, title) {\n  ggplot(data, aes(x = date, y = value, color = category)) +\n    geom_line(size = 1.5) +\n    scale_color_cpal(palette = \"main\") +\n    theme_cpal(base_size = board_theme_settings$base_size) +\n    labs(title = title, x = \"Date\", y = \"Value\", color = \"Category\")\n}\n\n\n\nStep 3: Executive Report Creation\n\n---\ntitle: \"Executive Summary: 2024 Impact Report\"\nsubtitle: \"Key performance indicators and strategic recommendations\"\nauthor: \"CPAL Data Team\"\ndate: \"December 2024\"\nformat:\n  html:\n    theme: [default, assets/css/cpal.css]\n    toc: true\n    number-sections: true\n  pdf:\n    documentclass: report\n    geometry: margin=1in\n    keep-tex: true\nexecute:\n  echo: false\n  warning: false\n---\n\n```{r setup}\nlibrary(cpaltemplates)\nsource(\"R/shared_visualizations.R\")\n\n# Load executive summary data\nexec_data &lt;- readRDS(\"data/processed/executive_summary.rds\")\n```\n\n## Key Performance Indicators\n\n```{r kpi-dashboard}\nkpi_chart &lt;- create_kpi_chart(exec_data$kpis, \"2024 Key Performance Indicators\")\nkpi_chart |&gt; add_cpal_logo(position = \"top-right\", size = 0.08)\n```\n\nOur organization achieved significant milestones in 2024, with **{{r}} total beneficiaries served** and **{{r}} improvement in key outcomes**.\n\n## Financial Performance\n\n```{r financial-table}\ncpal_table_gt(\n  exec_data$financial,\n  title = \"Financial Performance Summary\",\n  subtitle = \"Revenue, expenses, and efficiency metrics\",\n  highlight_columns = c(\"net_impact\", \"efficiency_ratio\"),\n  theme = \"light\"\n) %&gt;%\n  fmt_currency(columns = c(revenue, expenses, net_impact)) %&gt;%\n  fmt_percent(columns = efficiency_ratio, decimals = 1)\n```\n\n## Strategic Recommendations\n\nBased on our 2024 performance analysis, we recommend three strategic priorities for 2025...\n\n\n\nStep 4: Board Presentation Slides\n\n---\ntitle: \"2024 Impact & 2025 Strategy\"\nsubtitle: \"Board of Directors Presentation\"\nauthor: \"CPAL Leadership Team\"\ndate: \"December 2024\"\nformat:\n  revealjs:\n    theme: [default, assets/css/cpal-slides.css]\n    logo: assets/images/cpal-logo.png\n    slide-number: true\n    chalkboard: true\nexecute:\n  echo: false\n---\n\n```{r setup}\nlibrary(cpaltemplates)\nsource(\"R/shared_visualizations.R\")\n\n# Use larger fonts for presentation\nset_theme_cpal(\"default\", base_size = board_theme_settings$slide_size)\n```\n\n## 2024 Achievement Highlights\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n```{r impact-metrics}\nimpact_chart &lt;- create_kpi_chart(exec_data$impact, \"Impact Achieved\")\nimpact_chart\n```\n:::\n\n::: {.column width=\"50%\"}\n### Key Accomplishments\n\n- **150% increase** in beneficiaries served\n- **$2.3M raised** in new funding  \n- **85% program effectiveness** rating\n- **12 new partnerships** established\n:::\n\n::::\n\n## Financial Stewardship\n\n```{r financial-trends}\nfinancial_trend &lt;- create_trend_chart(\n  exec_data$financial_trends,\n  \"Revenue Growth & Efficiency Trends\"\n)\nfinancial_trend |&gt; add_cpal_logo(position = \"bottom-right\", size = 0.10)\n```\n\n## 2025 Strategic Priorities\n\n1. **Expand Impact**: Scale successful programs to new regions\n2. **Innovation**: Develop new intervention models\n3. **Sustainability**: Diversify funding sources\n\n\n\nStep 5: Interactive Executive Dashboard\n\n# File: app.R (created by use_shiny_dashboard())\nlibrary(shiny)\nlibrary(shinydashboard)\nlibrary(cpaltemplates)\nlibrary(plotly)\n\n# Load shared functions and data\nsource(\"R/shared_visualizations.R\")\nexec_data &lt;- readRDS(\"data/processed/executive_summary.rds\")\n\nui &lt;- dashboardPage(\n  dashboardHeader(title = \"CPAL Executive Dashboard\"),\n  \n  dashboardSidebar(\n    sidebarMenu(\n      menuItem(\"Overview\", tabName = \"overview\", icon = icon(\"chart-line\")),\n      menuItem(\"Financial\", tabName = \"financial\", icon = icon(\"dollar-sign\")),\n      menuItem(\"Programs\", tabName = \"programs\", icon = icon(\"users\"))\n    )\n  ),\n  \n  dashboardBody(\n    # Apply CPAL theme\n    tags$head(tags$link(rel = \"stylesheet\", type = \"text/css\", href = \"cpal-theme.css\")),\n    \n    tabItems(\n      tabItem(\n        tabName = \"overview\",\n        fluidRow(\n          # KPI Boxes\n          valueBoxOutput(\"total_beneficiaries\"),\n          valueBoxOutput(\"total_impact\"),\n          valueBoxOutput(\"efficiency_rating\")\n        ),\n        fluidRow(\n          box(\n            title = \"Performance Trends\", status = \"primary\", solidHeader = TRUE,\n            width = 8,\n            cpal_interactive(create_trend_chart(exec_data$trends, \"Key Metrics Over Time\"))\n          ),\n          box(\n            title = \"Program Distribution\", status = \"primary\", solidHeader = TRUE,\n            width = 4,\n            cpal_table_interactive(exec_data$program_summary)\n          )\n        )\n      ),\n      \n      tabItem(\n        tabName = \"financial\",\n        fluidRow(\n          box(\n            title = \"Financial Performance\", status = \"primary\", solidHeader = TRUE,\n            width = 12,\n            cpal_table_gt(\n              exec_data$financial_detail,\n              title = \"Detailed Financial Analysis\",\n              highlight_columns = c(\"variance\", \"efficiency\"),\n              theme = \"light\"\n            )\n          )\n        )\n      )\n    )\n  )\n)\n\nserver &lt;- function(input, output) {\n  # Color-coordinated value boxes using CPAL colors\n  output$total_beneficiaries &lt;- renderValueBox({\n    valueBox(\n      value = format(sum(exec_data$beneficiaries), big.mark = \",\"),\n      subtitle = \"Total Beneficiaries\",\n      icon = icon(\"users\"),\n      color = \"blue\"  # Maps to CPAL teal\n    )\n  })\n  \n  output$total_impact &lt;- renderValueBox({\n    valueBox(\n      value = scales::dollar(sum(exec_data$impact_value)),\n      subtitle = \"Impact Value\",\n      icon = icon(\"chart-line\"),\n      color = \"green\"  # Maps to CPAL colors\n    )\n  })\n  \n  output$efficiency_rating &lt;- renderValueBox({\n    valueBox(\n      value = paste0(round(mean(exec_data$efficiency) * 100), \"%\"),\n      subtitle = \"Efficiency Rating\", \n      icon = icon(\"star\"),\n      color = \"yellow\"  # Maps to CPAL gold\n    )\n  })\n}\n\nshinyApp(ui = ui, server = server)\n\n\n\nStep 6: Coordinated Deployment\n\n# Render all deliverables with consistent branding\nrender_all_deliverables &lt;- function() {\n  # Render executive report\n  quarto::quarto_render(\"executive-report.qmd\")\n  \n  # Render presentation slides  \n  quarto::quarto_render(\"board-presentation.qmd\")\n  \n  # Test dashboard locally\n  shiny::runApp()\n  \n  # Deploy dashboard to production\n  # rsconnect::deployApp()\n}\n\n# Execute coordinated deployment\nrender_all_deliverables()\n\nResult: Complete executive communication package with consistent CPAL branding, professional quality, and multiple formats for different stakeholder needs."
  },
  {
    "objectID": "workflow-integration.html#workflow-3-ongoing-program-monitoring",
    "href": "workflow-integration.html#workflow-3-ongoing-program-monitoring",
    "title": "Education Impact Study 2024",
    "section": "Workflow 3: Ongoing Program Monitoring",
    "text": "Workflow 3: Ongoing Program Monitoring\nScenario: Set up continuous monitoring system for program evaluation with automated reporting and alert systems.\n\nStep 1: Monitoring Project Architecture\n\n# Create monitoring project with automation features\nstart_project(\n  name = \"program-monitoring-system\", \n  project_type = \"shiny-dashboard\",\n  features = c(\"renv\", \"git\", \"targets\")\n)\n\n# Add reporting capability for automated reports\nuse_quarto_report()\n\n# Set up targets for data pipeline automation\nuse_targets(type = \"report\")\n\n\n\nStep 2: Automated Data Pipeline\n\n# File: _targets.R\nlibrary(targets)\nlibrary(tarchetypes)\n\ntar_option_set(packages = c(\"cpaltemplates\", \"dplyr\", \"ggplot2\"))\n\nlist(\n  # Data ingestion (runs daily)\n  tar_target(\n    raw_program_data,\n    fetch_program_data(date = Sys.Date()),  # Your data fetching function\n    cue = tar_cue(mode = \"always\")  # Always check for new data\n  ),\n  \n  # Data processing\n  tar_target(\n    processed_data,\n    process_monitoring_data(raw_program_data)\n  ),\n  \n  # Alert system - check for issues\n  tar_target(\n    data_alerts,\n    check_data_quality_alerts(processed_data)\n  ),\n  \n  # Create monitoring visualizations\n  tar_target(\n    performance_dashboard_data,\n    create_dashboard_datasets(processed_data)\n  ),\n  \n  # Generate automated weekly report\n  tar_quarto(\n    weekly_report,\n    \"reports/weekly-monitoring-report.qmd\"\n  ),\n  \n  # Update dashboard data\n  tar_target(\n    dashboard_update,\n    update_dashboard_data(performance_dashboard_data)\n  )\n)\n\n\n\nStep 3: Real-Time Monitoring Dashboard\n\n# File: app.R - Live monitoring dashboard\nlibrary(shiny)\nlibrary(shinydashboard)  \nlibrary(cpaltemplates)\nlibrary(DT)\nlibrary(plotly)\n\n# Setup CPAL styling\nsetup_cpal_google_fonts()\n\nui &lt;- dashboardPage(\n  dashboardHeader(title = \"CPAL Program Monitoring\"),\n  \n  dashboardSidebar(\n    sidebarMenu(\n      menuItem(\"Real-Time Overview\", tabName = \"overview\"),\n      menuItem(\"Program Performance\", tabName = \"programs\"),\n      menuItem(\"Alert System\", tabName = \"alerts\"),\n      menuItem(\"Historical Trends\", tabName = \"trends\")\n    )\n  ),\n  \n  dashboardBody(\n    tags$head(tags$link(rel = \"stylesheet\", type = \"text/css\", href = \"cpal-theme.css\")),\n    \n    tabItems(\n      tabItem(\n        tabName = \"overview\",\n        \n        # Real-time status indicators\n        fluidRow(\n          valueBoxOutput(\"current_participants\"),\n          valueBoxOutput(\"programs_active\"), \n          valueBoxOutput(\"alert_count\")\n        ),\n        \n        # Live performance charts\n        fluidRow(\n          box(\n            title = \"Today's Activity\", status = \"primary\", solidHeader = TRUE,\n            width = 8,\n            plotlyOutput(\"real_time_activity\")\n          ),\n          \n          box(\n            title = \"System Status\", status = \"success\", solidHeader = TRUE,\n            width = 4,\n            cpal_table_interactive(\n              data.frame(\n                System = c(\"Data Feed\", \"Dashboard\", \"Alerts\"),\n                Status = c(\"‚úì Online\", \"‚úì Online\", \"‚úì Active\"),\n                Last_Update = c(\"2 min ago\", \"Just now\", \"5 min ago\")\n              ),\n              defaultPageSize = 5\n            )\n          )\n        )\n      ),\n      \n      tabItem(\n        tabName = \"programs\",\n        fluidRow(\n          box(\n            title = \"Program Performance Matrix\", \n            status = \"primary\", \n            solidHeader = TRUE,\n            width = 12,\n            cpal_table_reactable(\n              get_program_performance_data(),\n              title = \"Live Program Performance Dashboard\",\n              filterable = TRUE,\n              searchable = TRUE,\n              highlight_columns = c(\"participation_rate\", \"outcome_score\"),\n              data_bar_columns = c(\"progress_percent\"),\n              defaultPageSize = 15\n            )\n          )\n        )\n      ),\n      \n      tabItem(\n        tabName = \"alerts\",\n        fluidRow(\n          box(\n            title = \"Active Alerts\", status = \"warning\", solidHeader = TRUE,\n            width = 12,\n            DT::dataTableOutput(\"alerts_table\")\n          )\n        )\n      )\n    )\n  )\n)\n\nserver &lt;- function(input, output, session) {\n  \n  # Reactive data that updates every 5 minutes\n  monitoring_data &lt;- reactiveFileReader(\n    intervalMillis = 300000,  # 5 minutes\n    session = session,\n    filePath = \"data/current_monitoring.rds\",\n    readFunc = readRDS\n  )\n  \n  # Real-time value boxes\n  output$current_participants &lt;- renderValueBox({\n    data &lt;- monitoring_data()\n    valueBox(\n      value = format(sum(data$current_participants), big.mark = \",\"),\n      subtitle = \"Active Participants\",\n      icon = icon(\"users\"),\n      color = \"blue\"\n    )\n  })\n  \n  output$programs_active &lt;- renderValueBox({\n    data &lt;- monitoring_data()\n    valueBox(\n      value = sum(data$programs_active),\n      subtitle = \"Programs Running\",\n      icon = icon(\"play-circle\"),\n      color = \"green\"\n    )\n  })\n  \n  output$alert_count &lt;- renderValueBox({\n    data &lt;- monitoring_data()\n    alert_count &lt;- sum(data$alerts_active)\n    valueBox(\n      value = alert_count,\n      subtitle = \"Active Alerts\",\n      icon = icon(\"exclamation-triangle\"),\n      color = if(alert_count &gt; 0) \"red\" else \"green\"\n    )\n  })\n  \n  # Interactive real-time chart\n  output$real_time_activity &lt;- renderPlotly({\n    data &lt;- monitoring_data()\n    \n    p &lt;- ggplot(data$hourly_activity, aes(x = hour, y = activity, fill = program_type)) +\n      geom_col() +\n      scale_fill_cpal(palette = \"main\") +\n      theme_cpal_minimal(base_size = 12) +\n      labs(\n        title = \"Hourly Program Activity\", \n        x = \"Hour of Day\",\n        y = \"Activity Level\",\n        fill = \"Program Type\"\n      )\n    \n    ggplotly(p, tooltip = c(\"x\", \"y\", \"fill\")) %&gt;%\n      config(displayModeBar = FALSE)  # Clean interface\n  })\n}\n\nshinyApp(ui = ui, server = server)\n\n\n\nStep 4: Automated Reporting System\n\n---\ntitle: \"Weekly Program Monitoring Report\"\nsubtitle: \"Automated performance summary and alert analysis\"\nauthor: \"CPAL Monitoring System\"\ndate: today\nformat:\n  html:\n    theme: [default, assets/css/cpal.css]\n  pdf:\n    keep-tex: true\nparams:\n  week_ending: !r Sys.Date()\n  alert_threshold: 3\n---\n\n```{r setup}\nlibrary(cpaltemplates)\nlibrary(dplyr)\nlibrary(gt)\n\nsetup_cpal_google_fonts()\nset_theme_cpal()\n\n# Load monitoring data\nweek_data &lt;- readRDS(\"data/processed/weekly_summary.rds\")\nalerts_data &lt;- readRDS(\"data/processed/weekly_alerts.rds\")\n```\n\n## Executive Summary\n\nThis automated report covers program monitoring for the week ending {{&lt; meta params.week_ending &gt;}}.\n\n```{r summary-metrics}\n# Automated summary statistics\ntotal_participants &lt;- sum(week_data$participants)\navg_performance &lt;- mean(week_data$performance_score)\nalert_count &lt;- nrow(alerts_data)\n```\n\n- **Total Participants**: {{r}} format(total_participants, big.mark = \",\")}}\n- **Average Performance Score**: {{r}} round(avg_performance, 1)}}\n- **Alerts Generated**: {{r}} alert_count}}\n\n## Performance Dashboard\n\n```{r performance-overview}\nperformance_chart &lt;- week_data %&gt;%\n  ggplot(aes(x = program, y = performance_score, fill = program)) +\n  geom_col(show.legend = FALSE) +\n  scale_fill_cpal(palette = \"main\") +\n  coord_flip() +\n  labs(\n    title = \"Weekly Performance by Program\",\n    x = \"Program\",\n    y = \"Performance Score\"\n  )\n\nperformance_chart |&gt; add_cpal_logo(position = \"top-right\")\n```\n\n## Alert Summary\n\n```{r alerts-table}\nif (nrow(alerts_data) &gt; 0) {\n  cpal_table_gt(\n    alerts_data,\n    title = \"Active Alerts This Week\",\n    subtitle = paste(\"Total alerts:\", nrow(alerts_data)),\n    highlight_columns = c(\"severity\", \"status\"),\n    bold_rows = \"high_priority\"\n  )\n} else {\n  cat(\"‚úÖ No alerts generated this week - all systems operating normally.\")\n}\n```\n\n---\n*This report was generated automatically by the CPAL monitoring system on {{r}} Sys.time()}}.*\n\n\n\nStep 5: Automated Workflow Execution\n\n# File: R/automated_monitoring.R\n# This script runs daily via cron job or task scheduler\n\nrun_daily_monitoring &lt;- function() {\n  library(cpaltemplates)\n  library(targets)\n  \n  # Run data pipeline\n  cat(\"Starting daily monitoring pipeline...\\n\")\n  tar_make()\n  \n  # Check for critical alerts\n  alerts &lt;- readRDS(\"data/processed/current_alerts.rds\")\n  critical_alerts &lt;- alerts[alerts$severity == \"Critical\", ]\n  \n  if (nrow(critical_alerts) &gt; 0) {\n    # Send alert notifications\n    send_alert_notifications(critical_alerts)\n    cat(\"CRITICAL ALERTS DETECTED - Notifications sent\\n\")\n  }\n  \n  # Update dashboard data\n  cat(\"Updating dashboard...\\n\")\n  update_dashboard_data()\n  \n  # Weekly report generation (Fridays only)\n  if (weekdays(Sys.Date()) == \"Friday\") {\n    cat(\"Generating weekly report...\\n\")\n    quarto::quarto_render(\"reports/weekly-monitoring-report.qmd\")\n    \n    # Email weekly report to stakeholders\n    email_weekly_report()\n  }\n  \n  cat(\"Daily monitoring complete:\", Sys.time(), \"\\n\")\n}\n\n# Execute if running as script\nif (!interactive()) {\n  run_daily_monitoring()\n}\n\nResult: Comprehensive monitoring system with real-time dashboard, automated alerts, and regular reporting that keeps stakeholders informed while minimizing manual effort."
  },
  {
    "objectID": "workflow-integration.html#workflow-4-research-publication-pipeline",
    "href": "workflow-integration.html#workflow-4-research-publication-pipeline",
    "title": "Education Impact Study 2024",
    "section": "Workflow 4: Research Publication Pipeline",
    "text": "Workflow 4: Research Publication Pipeline\nScenario: Create reproducible research workflow for academic publication with multiple output formats and supporting materials.\n\nStep 1: Research Project Setup\n\n# Create research project with comprehensive features\nstart_project(\n  name = \"education-impact-study-2024\",\n  project_type = \"quarto-report\", \n  features = c(\"renv\", \"git\", \"github\", \"targets\", \"tests\")\n)\n\n# Add additional research capabilities\nuse_quarto_web()  # For supplementary materials website\nuse_targets(type = \"analysis\")  # For complex analysis pipeline\n\n\n\nStep 2: Reproducible Analysis Pipeline\n\n# File: _targets.R - Complete research pipeline\nlibrary(targets)\nlibrary(tarchetypes) \n\ntar_option_set(\n  packages = c(\"cpaltemplates\", \"dplyr\", \"ggplot2\", \"broom\", \"here\"),\n  format = \"rds\"\n)\n\nlist(\n  # Data sources\n  tar_target(\n    survey_data,\n    read_survey_data(\"data/raw/education_survey_2024.csv\")\n  ),\n  \n  tar_target(\n    administrative_data, \n    read_admin_data(\"data/raw/school_records_2024.csv\")\n  ),\n  \n  # Data preparation\n  tar_target(\n    merged_data,\n    merge_education_datasets(survey_data, administrative_data)\n  ),\n  \n  tar_target(\n    analysis_data,\n    prepare_analysis_dataset(merged_data)\n  ),\n  \n  # Statistical analysis\n  tar_target(\n    descriptive_stats,\n    generate_descriptive_statistics(analysis_data)\n  ),\n  \n  tar_target(\n    regression_models,\n    fit_impact_models(analysis_data)\n  ),\n  \n  tar_target(\n    robustness_checks,\n    perform_robustness_analysis(analysis_data, regression_models)\n  ),\n  \n  # Visualizations\n  tar_target(\n    figure_1_data_overview,\n    create_data_overview_plot(descriptive_stats)\n  ),\n  \n  tar_target(\n    figure_2_main_results,\n    create_main_results_plot(regression_models)\n  ),\n  \n  tar_target(\n    figure_3_robustness,\n    create_robustness_plot(robustness_checks)\n  ),\n  \n  # Tables  \n  tar_target(\n    table_1_descriptives,\n    create_descriptive_table(descriptive_stats)\n  ),\n  \n  tar_target(\n    table_2_main_results,\n    create_results_table(regression_models)\n  ),\n  \n  # Publication outputs\n  tar_quarto(main_paper, \"paper.qmd\"),\n  tar_quarto(appendix, \"appendix.qmd\"),\n  tar_quarto(policy_brief, \"policy-brief.qmd\"),\n  tar_quarto(website, c(\"index.qmd\", \"methods.qmd\", \"data.qmd\"))\n)\n\n\n\nStep 3: Main Research Paper\n\n---\ntitle: \"Educational Interventions and Student Outcomes: Evidence from Dallas\"\nsubtitle: \"A quasi-experimental evaluation of CPAL programming\"\nauthor:\n  - name: \"Research Team\"\n    affiliation: \"Child Poverty Action Lab\"\ndate: today\nformat:\n  pdf:\n    documentclass: article\n    geometry: margin=1in\n    linestretch: 1.5\n    fontsize: 12pt\n    keep-tex: true\n  html:\n    theme: [default, assets/css/cpal.css]\n    toc: true\n    number-sections: true\nbibliography: references.bib\ncsl: chicago-author-date.csl\nexecute:\n  echo: false\n  warning: false\n  message: false\n---\n\n```{r setup}\nlibrary(cpaltemplates)\nlibrary(gt)\nlibrary(here)\n\n# Setup for publication-quality outputs\nsetup_cpal_google_fonts()\nset_theme_cpal(\"classic\", base_size = 12)  # Academic style\n\n# Load analysis results\ndescriptive_stats &lt;- readRDS(here(\"outputs\", \"descriptive_stats.rds\"))\nregression_models &lt;- readRDS(here(\"outputs\", \"regression_models.rds\"))\n```\n\n## Abstract\n\nThis study evaluates the impact of educational interventions implemented by the Child Poverty Action Lab (CPAL) on student academic outcomes in Dallas-area schools...\n\n## Introduction\n\nEducational inequality remains a persistent challenge in American cities [@citation2024]. This study contributes to the literature by...\n\n## Data and Methods\n\n### Data Sources\n\nOur analysis draws on two primary data sources: (1) student survey data collected during the 2023-2024 academic year, and (2) administrative records from participating school districts.\n\n```{r descriptive-table}\n#| label: tbl-descriptives\n#| tbl-cap: \"Descriptive Statistics\"\n\ncpal_table_gt(\n  descriptive_stats$summary_table,\n  title = \"Sample Descriptive Statistics\",\n  subtitle = \"Student characteristics by treatment status\",\n  source = \"CPAL Education Study 2024\",\n  theme = \"light\"\n) %&gt;%\n  fmt_number(columns = c(mean, sd), decimals = 2) %&gt;%\n  fmt_number(columns = n, decimals = 0) %&gt;%\n  tab_footnote(\n    footnote = \"Standard deviations in parentheses\",\n    locations = cells_column_labels(\"sd\")\n  )\n```\n\n### Analytical Approach\n\nWe employ a quasi-experimental design using propensity score matching to identify the causal impact of CPAL programming...\n\n## Results\n\n### Main Findings\n\nOur primary analysis reveals significant positive effects of CPAL programming on student outcomes.\n\n```{r main-results-figure}\n#| label: fig-main-results  \n#| fig-cap: \"Treatment Effects on Student Outcomes\"\n#| fig-width: 8\n#| fig-height: 6\n\nmain_results_plot &lt;- regression_models$coefficients %&gt;%\n  ggplot(aes(x = outcome, y = coefficient, \n             ymin = conf_low, ymax = conf_high)) +\n  geom_pointrange(color = cpal_colors(\"midnight\"), size = 1) +\n  geom_hline(yintercept = 0, linetype = \"dashed\", alpha = 0.7) +\n  coord_flip() +\n  labs(\n    title = \"Estimated Treatment Effects\",\n    subtitle = \"95% confidence intervals shown\",\n    x = \"Outcome Measure\",\n    y = \"Effect Size (Standard Deviations)\",\n    caption = \"Note: Estimates from propensity score matched sample\"\n  )\n\n# Check accessibility before including\ncheck_plot_accessibility(main_results_plot)\n\nmain_results_plot\n```\n\n@tbl-main-results presents the complete regression results with standard errors and significance tests.\n\n```{r main-results-table}\n#| label: tbl-main-results\n#| tbl-cap: \"Regression Results: Treatment Effects on Student Outcomes\"\n\ncpal_table_gt(\n  regression_models$results_table,\n  title = \"Main Regression Results\",\n  subtitle = \"Dependent variables: Student outcome measures\",\n  source = \"Author calculations from CPAL Education Study 2024\",\n  highlight_columns = c(\"coefficient\", \"p_value\"),\n  theme = \"light\"\n) %&gt;%\n  fmt_number(columns = c(coefficient, se), decimals = 3) %&gt;%\n  fmt_number(columns = p_value, decimals = 4) %&gt;%\n  tab_style(\n    style = cell_text(weight = \"bold\"),\n    locations = cells_body(\n      columns = coefficient,\n      rows = p_value &lt; 0.05\n    )\n  )\n```\n\n## Discussion and Policy Implications\n\nOur findings suggest that CPAL's educational interventions produce meaningful improvements in student outcomes...\n\n## References\n\n::: {#refs}\n:::\n\n---\n\n*This research was conducted by the Child Poverty Action Lab. All analysis code and materials are available at: https://github.com/cpal-org/education-impact-study-2024*\n\n\n\nStep 4: Policy Brief and Public Communication\n\n---\ntitle: \"CPAL Education Programs Show Strong Results\"\nsubtitle: \"New research demonstrates significant student outcome improvements\"\nauthor: \"CPAL Research Team\"\ndate: today\nformat:\n  html:\n    theme: [default, assets/css/cpal.css]\n    toc: false\n  pdf:\n    geometry: margin=0.75in\n    keep-tex: true\nexecute:\n  echo: false\n  warning: false\n---\n\n```{r setup}\nlibrary(cpaltemplates)\nsetup_cpal_google_fonts()\nset_theme_cpal(\"minimal\", base_size = 14)  # Clean, accessible design\n```\n\n## Key Findings\n\n:::: {.columns}\n\n::: {.column width=\"30%\"}\n![](assets/images/cpal-logo.png){width=\"200px\"}\n:::\n\n::: {.column width=\"70%\"}\n**CPAL's educational interventions produced significant improvements in student outcomes across multiple measures, with particularly strong effects for students from low-income families.**\n:::\n\n::::\n\n## What We Studied\n\nWe evaluated CPAL's education programming implemented in Dallas-area schools during 2023-2024, analyzing outcomes for over 1,200 students using rigorous quasi-experimental methods.\n\n```{r impact-visualization}\nimpact_summary &lt;- data.frame(\n  outcome = c(\"Reading Scores\", \"Math Achievement\", \"School Engagement\", \"Attendance\"),\n  improvement = c(0.34, 0.28, 0.45, 0.22),\n  category = c(\"Academic\", \"Academic\", \"Social-Emotional\", \"Behavioral\")\n)\n\nimpact_plot &lt;- impact_summary %&gt;%\n  ggplot(aes(x = reorder(outcome, improvement), y = improvement, fill = category)) +\n  geom_col(show.legend = FALSE) +\n  scale_fill_cpal(palette = \"main\") +\n  coord_flip() +\n  labs(\n    title = \"CPAL Program Impact on Student Outcomes\",\n    subtitle = \"Effect sizes (standard deviations)\",\n    x = \"\",\n    y = \"Improvement\",\n    caption = \"All effects statistically significant at p &lt; 0.05\"\n  ) +\n  theme(axis.text.y = element_text(size = 12))\n\nimpact_plot |&gt; add_cpal_logo(position = \"bottom-right\", size = 0.06)\n```\n\n## Why This Matters\n\n- **Proven effectiveness**: Rigorous research confirms CPAL programming works\n- **Significant impacts**: Effect sizes comparable to best educational interventions\n- **Equity focus**: Largest benefits for students facing greatest challenges\n- **Scalable approach**: Methods can be expanded to serve more students\n\n## What's Next\n\nBased on these results, CPAL is expanding programming to additional schools and refining intervention models for maximum impact.\n\n---\n\n**Learn More**: Full research paper and technical details available at [research.childpovertyactionlab.org](https://research.childpovertyactionlab.org)\n\n\n\nStep 5: Supplementary Materials Website"
  },
  {
    "objectID": "workflow-integration.html#study-overview",
    "href": "workflow-integration.html#study-overview",
    "title": "Education Impact Study 2024",
    "section": "Study Overview",
    "text": "Study Overview\nThis website provides supplementary materials for ‚ÄúEducational Interventions and Student Outcomes: Evidence from Dallas‚Äù (CPAL, 2024)."
  },
  {
    "objectID": "workflow-integration.html#available-materials",
    "href": "workflow-integration.html#available-materials",
    "title": "Education Impact Study 2024",
    "section": "Available Materials",
    "text": "Available Materials\n\nComplete Dataset - De-identified analysis data\nMethods Documentation - Detailed methodology\n\nAnalysis Code - Complete R code\nPolicy Brief - Summary for practitioners"
  },
  {
    "objectID": "workflow-integration.html#reproducibility",
    "href": "workflow-integration.html#reproducibility",
    "title": "Education Impact Study 2024",
    "section": "Reproducibility",
    "text": "Reproducibility\nAll analyses can be reproduced using the provided code and data:\n\n# Clone repository\ngit clone https://github.com/cpal-org/education-impact-study-2024\n\n# Run complete analysis pipeline  \ntargets::tar_make()"
  },
  {
    "objectID": "workflow-integration.html#contact",
    "href": "workflow-integration.html#contact",
    "title": "Education Impact Study 2024",
    "section": "Contact",
    "text": "Contact\nFor questions about this research, contact: research@childpovertyactionlab.org\n\n**Result:** Complete research publication pipeline with reproducible analysis, multiple output formats, public communication materials, and transparent methodology sharing.\n\n## Workflow 5: Team Collaboration & Knowledge Sharing\n\n**Scenario:** Establish standardized workflows and knowledge sharing systems for multi-person data team collaboration.\n\n### **Step 1: Team Standardization Framework**\n\n::: {.cell}\n\n```{.r .cell-code}\n# File: R/team_standards.R\n# Shared standards for all CPAL data team projects\n\n#' CPAL Standard Project Setup\n#' Creates projects with team-wide consistency\n#' \n#' @param name Project name following CPAL conventions\n#' @param type Project type\n#' @param lead_analyst Name of lead analyst\ncreate_cpal_standard_project &lt;- function(name, type = \"analysis\", lead_analyst = NULL) {\n  \n  # Standard features for all team projects\n  standard_features &lt;- c(\"renv\", \"git\", \"github\")\n  \n  # Add targets for complex projects\n  if (type %in% c(\"analysis\", \"report\")) {\n    standard_features &lt;- c(standard_features, \"targets\")\n  }\n  \n  start_project(\n    name = name,\n    project_type = type,\n    features = standard_features,\n    interactive = FALSE  # Consistent setup without prompts\n  )\n  \n  # Add team documentation template\n  create_team_readme(name, type, lead_analyst)\n  \n  # Set up standard folder structure\n  create_team_folders()\n  \n  invisible(here::here())\n}\n\n#' Create Team README Template\ncreate_team_readme &lt;- function(name, type, lead_analyst) {\n  readme_content &lt;- paste0(\"# \", name, \"\\n\\n\",\n    \"**Project Type**: \", type, \"\\n\",\n    \"**Lead Analyst**: \", lead_analyst %||% \"TBD\", \"\\n\",\n    \"**Created**: \", Sys.Date(), \"\\n\\n\",\n    \"## Team Standards\\n\\n\",\n    \"This project follows CPAL data team standards:\\n\\n\",\n    \"- Use cpaltemplates for all visualizations\\n\",\n    \"- Follow naming conventions in `R/00_conventions.R`\\n\", \n    \"- Document all functions with roxygen2\\n\",\n    \"- Use targets for workflow automation\\n\",\n    \"- Test accessibility with `check_plot_accessibility()`\\n\\n\",\n    \"## Getting Started\\n\\n\",\n    \"```{r}\\n\",\n    \"# Setup\\n\",\n    \"renv::restore()\\n\",\n    \"cpaltemplates::setup_cpal_google_fonts()\\n\\n\",\n    \"# Run analysis\\n\",\n    \"targets::tar_make()\\n\",\n    \"```\\n\"\n  )\n  \n  writeLines(readme_content, \"README.md\")\n}\n\n# Standard team folder structure\ncreate_team_folders &lt;- function() {\n  folders &lt;- c(\n    \"R/functions\",           # Reusable functions\n    \"R/analysis\",           # Analysis scripts\n    \"data/raw\",             # Original data\n    \"data/processed\",       # Cleaned data  \n    \"outputs/reports\",      # Generated reports\n    \"outputs/figures\",      # Publication-ready figures\n    \"outputs/tables\",       # Formatted tables\n    \"documentation\",        # Project documentation\n    \"meetings\"              # Meeting notes and decisions\n  )\n  \n  purrr::walk(folders, fs::dir_create)\n}\n:::\n\nStep 2: Shared Analysis Functions Library\n\n# File: R/functions/shared_cpal_functions.R\n# Library of reusable functions for CPAL data team\n\n#' Create Standard CPAL Performance Chart\n#' \n#' @param data Data frame with performance metrics\n#' @param x_var Column name for x-axis\n#' @param y_var Column name for y-axis  \n#' @param group_var Column name for grouping (optional)\n#' @param title Chart title\n#' @return ggplot object with CPAL styling\ncpal_performance_chart &lt;- function(data, x_var, y_var, group_var = NULL, title) {\n  \n  p &lt;- ggplot(data, aes_string(x = x_var, y = y_var))\n  \n  if (!is.null(group_var)) {\n    p &lt;- p + \n      geom_col(aes_string(fill = group_var), position = \"dodge\") +\n      scale_fill_cpal(palette = \"main\")\n  } else {\n    p &lt;- p + \n      geom_col(fill = cpal_colors(\"midnight\"))\n  }\n  \n  p + \n    theme_cpal() +\n    labs(title = title, caption = \"Source: CPAL Data Team\") +\n    add_cpal_logo(position = \"top-right\", size = 0.08)\n}\n\n#' Create Standard CPAL Trend Chart\ncpal_trend_chart &lt;- function(data, x_var, y_var, group_var = NULL, title) {\n  \n  p &lt;- ggplot(data, aes_string(x = x_var, y = y_var))\n  \n  if (!is.null(group_var)) {\n    p &lt;- p + \n      geom_line(aes_string(color = group_var), size = 1.2) +\n      scale_color_cpal(palette = \"main\")\n  } else {\n    p &lt;- p + \n      geom_line(color = cpal_colors(\"teal\"), size = 1.2)\n  }\n  \n  p +\n    theme_cpal() +\n    labs(title = title, caption = \"Source: CPAL Data Team\")\n}\n\n#' Create Standard CPAL Table\ncpal_standard_table &lt;- function(data, title, subtitle = NULL) {\n  cpal_table_gt(\n    data,\n    title = title,\n    subtitle = subtitle,\n    source = \"CPAL Data Team Analysis\",\n    theme = \"light\"\n  )\n}\n\n#' Team Quality Check Function\n#' Runs standard checks on analysis outputs\nteam_quality_check &lt;- function(plot_object) {\n  \n  cat(\"Running CPAL team quality checks...\\n\")\n  \n  # Accessibility check\n  accessibility_result &lt;- check_plot_accessibility(plot_object, verbose = FALSE)\n  \n  # Brand consistency check\n  has_cpal_theme &lt;- \"theme_cpal\" %in% class(plot_object$theme)\n  has_cpal_colors &lt;- any(grepl(\"cpal\", plot_object$scales))\n  \n  # Results summary\n  cat(\"‚úì Accessibility check:\", ifelse(accessibility_result$overall_pass, \"PASS\", \"NEEDS REVIEW\"), \"\\n\")\n  cat(\"‚úì CPAL theme:\", ifelse(has_cpal_theme, \"PASS\", \"MISSING\"), \"\\n\") \n  cat(\"‚úì CPAL colors:\", ifelse(has_cpal_colors, \"PASS\", \"MISSING\"), \"\\n\")\n  \n  if (accessibility_result$overall_pass && has_cpal_theme && has_cpal_colors) {\n    cat(\"üéâ All quality checks passed!\\n\")\n  } else {\n    cat(\"‚ö†Ô∏è  Some quality checks need attention.\\n\")\n  }\n  \n  invisible(list(\n    accessibility = accessibility_result,\n    theme = has_cpal_theme,\n    colors = has_cpal_colors\n  ))\n}\n\n\n\nStep 3: Collaborative Project Template\n\n# File: _targets.R - Team collaboration pipeline template\nlibrary(targets)\nlibrary(tarchetypes)\n\n# Team collaboration options\ntar_option_set(\n  packages = c(\"cpaltemplates\", \"dplyr\", \"ggplot2\"),\n  format = \"rds\",\n  # Parallel processing for team efficiency\n  controller = crew::crew_controller_local(workers = 4)\n)\n\nlist(\n  # Data preparation (Lead Analyst responsibility)\n  tar_target(\n    raw_data,\n    load_team_data(),\n    # Only lead analyst needs to run this\n    deployment = \"main\"\n  ),\n  \n  tar_target(\n    cleaned_data,\n    clean_team_data(raw_data),\n    deployment = \"main\"\n  ),\n  \n  # Analysis tasks (can be distributed across team members)\n  tar_target(\n    descriptive_analysis,\n    perform_descriptive_analysis(cleaned_data),\n    # Team member A\n    deployment = \"analyst_a\" \n  ),\n  \n  tar_target(\n    regression_analysis, \n    perform_regression_analysis(cleaned_data),\n    # Team member B\n    deployment = \"analyst_b\"\n  ),\n  \n  tar_target(\n    visualization_set_1,\n    create_descriptive_plots(descriptive_analysis),\n    deployment = \"analyst_a\"\n  ),\n  \n  tar_target(\n    visualization_set_2,\n    create_regression_plots(regression_analysis),\n    deployment = \"analyst_b\"\n  ),\n  \n  # Quality assurance (Senior analyst responsibility)\n  tar_target(\n    qa_results,\n    {\n      # Run quality checks on all outputs\n      qa_viz_1 &lt;- team_quality_check(visualization_set_1)\n      qa_viz_2 &lt;- team_quality_check(visualization_set_2)\n      \n      list(viz_1 = qa_viz_1, viz_2 = qa_viz_2)\n    },\n    deployment = \"senior_analyst\"\n  ),\n  \n  # Final outputs (Lead analyst integration)\n  tar_quarto(\n    team_report,\n    \"reports/team-analysis-report.qmd\",\n    deployment = \"main\"\n  ),\n  \n  tar_target(\n    team_dashboard_data,\n    prepare_dashboard_data(cleaned_data, descriptive_analysis, regression_analysis),\n    deployment = \"main\"\n  )\n)\n\n\n\nStep 4: Team Knowledge Sharing Hub\n\n# Create team documentation website\ncreate_team_knowledge_hub &lt;- function() {\n  \n  # Create documentation project\n  start_project(\n    name = \"cpal-data-team-hub\",\n    project_type = \"quarto-web\",\n    features = c(\"git\", \"github\")\n  )\n  \n  # Add team-specific content structure\n  team_content &lt;- list(\n    \"index.qmd\" = create_hub_homepage(),\n    \"standards.qmd\" = create_standards_page(),\n    \"resources.qmd\" = create_resources_page(),\n    \"examples.qmd\" = create_examples_page(),\n    \"troubleshooting.qmd\" = create_troubleshooting_page()\n  )\n  \n  # Write content files\n  iwalk(team_content, ~ writeLines(.x, .y))\n  \n  # Configure for GitHub Pages deployment\n  configure_github_pages()\n}\n\ncreate_hub_homepage &lt;- function() {\n  c(\n    \"---\",\n    \"title: 'CPAL Data Team Hub'\",\n    \"subtitle: 'Standards, resources, and knowledge sharing'\",\n    \"---\",\n    \"\",\n    \"## Welcome to the CPAL Data Team Hub\",\n    \"\",\n    \"This site provides centralized access to:\",\n    \"\",\n    \"- **[Team Standards](standards.html)** - Coding conventions, quality guidelines\",\n    \"- **[Resources](resources.html)** - Templates, functions, datasets\", \n    \"- **[Examples](examples.html)** - Complete workflow examples\",\n    \"- **[Troubleshooting](troubleshooting.html)** - Common issues and solutions\",\n    \"\",\n    \"## Quick Start\",\n    \"\",\n    \"```{r}\",\n    \"# Standard project setup\",\n    \"source('R/team_standards.R')\",\n    \"create_cpal_standard_project('my-analysis', lead_analyst = 'Your Name')\",\n    \"```\",\n    \"\",\n    \"## Recent Updates\",\n    \"\",\n    \"- Added new interactive dashboard templates\",\n    \"- Updated accessibility guidelines\", \n    \"- New shared functions for common analyses\"\n  )\n}\n\ncreate_standards_page &lt;- function() {\n  c(\n    \"---\",\n    \"title: 'CPAL Data Team Standards'\",\n    \"---\",\n    \"\",\n    \"## Code Standards\",\n    \"\",\n    \"### Naming Conventions\",\n    \"- Projects: `topic-analysis-YYYY` or `report-name-YYYY`\",\n    \"- Functions: `verb_noun()` format (e.g., `clean_survey_data()`)\",\n    \"- Variables: `snake_case` for everything\",\n    \"\",\n    \"### Visualization Standards\",\n    \"- Always use `cpaltemplates` functions\",\n    \"- Run `check_plot_accessibility()` before sharing\",\n    \"- Include CPAL logo on final outputs\",\n    \"- Use appropriate color palettes for data type\",\n    \"\",\n    \"### Documentation Standards\",\n    \"- All functions documented with roxygen2\",\n    \"- README.md in every project\",\n    \"- Clear folder organization\",\n    \"- Reproducible setup instructions\"\n  )\n}\n\n\n\nStep 5: Team Workflow Automation\n\n# File: R/team_automation.R\n# Automated team workflows and quality assurance\n\n#' Daily Team Workflow Check\n#' Runs automated checks across all team repositories\nrun_daily_team_checks &lt;- function() {\n  \n  # Get list of active team projects\n  team_repos &lt;- get_team_repositories()\n  \n  results &lt;- map(team_repos, function(repo) {\n    \n    cat(\"Checking:\", repo$name, \"\\n\")\n    \n    # Clone or update repository\n    repo_path &lt;- update_team_repo(repo)\n    \n    # Run quality checks\n    quality_results &lt;- check_repo_quality(repo_path)\n    \n    # Check for stale branches\n    branch_status &lt;- check_branch_status(repo_path)\n    \n    # Generate team report entry\n    list(\n      repo = repo$name,\n      quality = quality_results,\n      branches = branch_status,\n      last_updated = Sys.time()\n    )\n  })\n  \n  # Generate team status report\n  generate_team_status_report(results)\n  \n  # Send notifications for issues\n  send_team_notifications(results)\n}\n\n#' Weekly Team Sync Preparation\n#' Generates materials for weekly team meetings\nprepare_weekly_team_sync &lt;- function() {\n  \n  # Collect project status from all team members\n  project_status &lt;- collect_project_status()\n  \n  # Generate agenda with completed work and blockers\n  agenda &lt;- generate_team_agenda(project_status)\n  \n  # Create shared dashboard with team progress\n  create_team_progress_dashboard(project_status)\n  \n  # Email agenda and dashboard to team\n  email_team_sync_materials(agenda)\n}\n\n#' Team Onboarding Automation\n#' Sets up new team members with standard tools and access\nonboard_new_team_member &lt;- function(name, role, github_username) {\n  \n  cat(\"Onboarding:\", name, \"as\", role, \"\\n\")\n  \n  # Create personalized onboarding project\n  onboarding_project &lt;- create_onboarding_project(name, role)\n  \n  # Set up GitHub access to team repositories  \n  add_github_team_member(github_username)\n  \n  # Generate personalized onboarding checklist\n  checklist &lt;- create_onboarding_checklist(name, role)\n  \n  # Send welcome email with setup instructions\n  send_onboarding_email(name, checklist)\n  \n  cat(\"‚úÖ Onboarding complete for\", name, \"\\n\")\n}\n\nResult: Comprehensive team collaboration system with standardized workflows, shared resources, automated quality checks, and knowledge sharing infrastructure that scales with team growth."
  },
  {
    "objectID": "workflow-integration.html#workflow-integration-best-practices",
    "href": "workflow-integration.html#workflow-integration-best-practices",
    "title": "Education Impact Study 2024",
    "section": "Workflow Integration Best Practices",
    "text": "Workflow Integration Best Practices\n\nGeneral Integration Principles\n\nStart with standards: Always begin workflows with setup_cpal_google_fonts() and set_theme_cpal()\nUse consistent naming: Follow CPAL conventions for projects, files, and variables\nIntegrate accessibility: Run check_plot_accessibility() before finalizing outputs\n\nMaintain reproducibility: Use renv, git, and targets for complex workflows\nDocument everything: README files, code comments, and clear folder structures\n\n\n\nWorkflow Customization Guide\nAdapt these workflows to your specific needs:\n\nModify project types: Adjust project_type and features based on your requirements\nScale complexity: Use fewer functions for simple projects, more for comprehensive workflows\nCustomize outputs: Change output formats, add new deliverable types\nTeam size adaptation: Adjust collaboration patterns for team size and structure\nTimeline flexibility: Adapt automation frequency and reporting schedules\n\n\n\nQuality Assurance Integration\nBuild quality checks into every workflow: - Test accessibility before sharing visualizations - Verify CPAL branding consistency across outputs\n- Check reproducibility with fresh R sessions - Validate data processing steps and results - Review outputs for professional presentation standards\n\nThese integrated workflows demonstrate the full power of cpaltemplates when functions work together. Adapt and combine these patterns to create workflows that meet your specific project needs while maintaining CPAL‚Äôs high standards for professional, accessible, and reproducible data analysis."
  },
  {
    "objectID": "troubleshooting.html",
    "href": "troubleshooting.html",
    "title": "Troubleshooting",
    "section": "",
    "text": "When you encounter issues with cpaltemplates, you have multiple support resources:\n\n\n\nThis troubleshooting guide - Common issues and step-by-step solutions\nCPAL Data Team Notion Guide - Internal team knowledge base with additional troubleshooting tips, FAQ, and team-specific solutions\nTeam member support - Other CPAL data team members who have likely encountered similar issues\nPackage documentation - Function-specific help with ?function_name\n\n\n\n\nBefore reaching out for help: 1. Check this guide first for your specific issue 2. Try the diagnostic code provided in each section 3. Check the CPAL Data Team Notion Guide for team-specific solutions and recent issue reports\nWhen asking for help from team members: 1. Include your diagnostic output from the troubleshooting code 2. Describe what you were trying to accomplish and what happened instead 3. Share your code (use the CPAL Data Team Notion Guide for code sharing best practices) 4. Mention what you‚Äôve already tried from this troubleshooting guide\nDocument solutions in Notion: When you or team members find solutions to new issues, add them to the CPAL Data Team Notion Guide to help future team members."
  },
  {
    "objectID": "troubleshooting.html#getting-help-and-support",
    "href": "troubleshooting.html#getting-help-and-support",
    "title": "Troubleshooting",
    "section": "",
    "text": "When you encounter issues with cpaltemplates, you have multiple support resources:\n\n\n\nThis troubleshooting guide - Common issues and step-by-step solutions\nCPAL Data Team Notion Guide - Internal team knowledge base with additional troubleshooting tips, FAQ, and team-specific solutions\nTeam member support - Other CPAL data team members who have likely encountered similar issues\nPackage documentation - Function-specific help with ?function_name\n\n\n\n\nBefore reaching out for help: 1. Check this guide first for your specific issue 2. Try the diagnostic code provided in each section 3. Check the CPAL Data Team Notion Guide for team-specific solutions and recent issue reports\nWhen asking for help from team members: 1. Include your diagnostic output from the troubleshooting code 2. Describe what you were trying to accomplish and what happened instead 3. Share your code (use the CPAL Data Team Notion Guide for code sharing best practices) 4. Mention what you‚Äôve already tried from this troubleshooting guide\nDocument solutions in Notion: When you or team members find solutions to new issues, add them to the CPAL Data Team Notion Guide to help future team members."
  },
  {
    "objectID": "troubleshooting.html#installation-and-package-issues",
    "href": "troubleshooting.html#installation-and-package-issues",
    "title": "Troubleshooting",
    "section": "Installation and Package Issues",
    "text": "Installation and Package Issues\n\ncpaltemplates Won‚Äôt Install\nSymptoms: - Error messages during package installation - Functions not available after library(cpaltemplates) - Dependencies failing to install\nDiagnostic Steps:\n\n# Check R version (cpaltemplates requires R 4.0+)\nR.version.string\n\n# Check if devtools is installed\npackageVersion(\"devtools\")\n\n# Try basic installation diagnostics\ninstall.packages(\"devtools\")\ndevtools::session_info()\n\nSolutions:\n\nR Version Too Old\n\n# Check required R version\nR.version.string\n\n# If R &lt; 4.0, update R and try again\n# Visit: https://cloud.r-project.org/\n\n\n\nGitHub Access Issues\n\n# Test GitHub connection\ndevtools::install_github(\"hadley/ggplot2\")  # Test with public repo\n\n# If this fails, check internet connection and proxy settings\n# See CPAL Data Team Notion Guide for network configuration help\n\n\n\nDependency Installation Failures\n\n# Install core dependencies manually\ninstall.packages(c(\"ggplot2\", \"cli\", \"fs\"))\n\n# Then try cpaltemplates installation\n# devtools::install_github(\"cpal-org/cpaltemplates\")\n\nStill having issues? Check the CPAL Data Team Notion Guide troubleshooting section for network-specific installation instructions and team member solutions.\n\n\n\nFunctions Not Available After Loading\nSymptoms: - library(cpaltemplates) loads without error - Specific functions show ‚Äúobject not found‚Äù errors\nDiagnostic Steps:\n\n# Check package loading\nlibrary(cpaltemplates)\n\n# List available functions\nls(\"package:cpaltemplates\")\n\n# Check specific function availability\nexists(\"theme_cpal\")\nexists(\"cpal_colors\")\n\nSolutions:\n\n# Restart R session and try again\n.rs.restartR()  # In RStudio\nlibrary(cpaltemplates)\n\n# If still issues, reinstall package\nremove.packages(\"cpaltemplates\")\n# devtools::install_github(\"cpal-org/cpaltemplates\")"
  },
  {
    "objectID": "troubleshooting.html#font-and-typography-issues",
    "href": "troubleshooting.html#font-and-typography-issues",
    "title": "Troubleshooting",
    "section": "Font and Typography Issues",
    "text": "Font and Typography Issues\n\nGoogle Fonts Not Displaying\nSymptoms: - Plots show generic system fonts instead of Inter/Roboto - Font setup completes without error but fonts don‚Äôt appear\nDiagnostic Steps:\n\n# Check font setup status\nsetup_cpal_google_fonts(verbose = TRUE)\n\n# Check font availability\nget_cpal_font_family(for_interactive = FALSE)\nget_cpal_font_family(for_interactive = TRUE)\n\n# Test font in simple plot\nlibrary(ggplot2)\ntest_plot &lt;- ggplot(mtcars, aes(x = wt, y = mpg)) +\n  geom_point() +\n  theme_cpal(base_family = \"Inter\") +\n  labs(title = \"Font Test Plot\")\n\nprint(test_plot)\n\nSolutions:\n\nNetwork/Firewall Issues\n\n# Try forced refresh\nsetup_cpal_google_fonts(force_refresh = TRUE, verbose = TRUE)\n\n# If network blocked, use fallback fonts\ntheme_cpal(base_family = cpal_font_family_fallback())\n\n\n\nSystem Permissions\n\n# Check if sysfonts package can write to system\nlibrary(sysfonts)\nsysfonts::font_add_google(\"Inter\", \"Inter\")\n\n# If permission denied, use system fonts\ntheme_cpal(base_family = \"sans\")\n\n\n\nPlatform-Specific Issues\n\n# Windows: May need manual font installation\n# Mac: Check system font book\n# Linux: May need fontconfig update\n\n# Universal fallback approach\nsafe_theme &lt;- theme_cpal(base_family = cpal_font_family_fallback())\n\nNeed platform-specific help? Check the CPAL Data Team Notion Guide for platform-specific font troubleshooting and ask team members about their setup on similar systems.\n\n\n\nFonts Different in Interactive vs Static Plots\nSymptoms: - Static plots show correct fonts - Interactive plots revert to system fonts\nDiagnostic Steps:\n\n# Check interactive font setup\nget_cpal_font_family(for_interactive = TRUE)\n\n# Test interactive font rendering\nlibrary(ggiraph)\ntest_interactive &lt;- ggplot(mtcars, aes(x = wt, y = mpg)) +\n  geom_point_interactive(aes(tooltip = \"test\")) +\n  theme_cpal()\n\ncpal_interactive(test_interactive)\n\nSolutions:\n\n# Force interactive font refresh\nsetup_cpal_google_fonts(force_refresh = TRUE)\n\n# Use explicit font specification for interactive\ntheme_cpal(base_family = \"Inter\")  # Explicit specification\n\n# If persistent issues, use fallback\ntheme_cpal(base_family = cpal_font_family_fallback())"
  },
  {
    "objectID": "troubleshooting.html#color-and-theme-issues",
    "href": "troubleshooting.html#color-and-theme-issues",
    "title": "Troubleshooting",
    "section": "Color and Theme Issues",
    "text": "Color and Theme Issues\n\nColors Not Appearing as Expected\nSymptoms: - Colors appear different than documentation examples - Palettes showing generic colors instead of CPAL colors\nDiagnostic Steps:\n\n# Test color system\ncpal_colors(\"primary\")  # Should show hex codes\n\n# Test specific palettes\ncpal_colors(\"main\")\ncpal_colors(\"teal_seq_5\")\n\n# View all palettes\nview_all_palettes()  # Should display color grid\n\n# Test in plot\ntest_plot &lt;- ggplot(mtcars, aes(x = factor(cyl), fill = factor(cyl))) +\n  geom_bar() +\n  scale_fill_cpal(palette = \"main\")\n\nprint(test_plot)\n\nSolutions:\n\nPackage Loading Issues\n\n# Reload package\ndetach(\"package:cpaltemplates\", unload = TRUE)\nlibrary(cpaltemplates)\n\n# Check for conflicts\nconflicts(detail = TRUE)\n\n\n\nDisplay Calibration Issues\n\n# Colors may look different on different monitors\n# Save plot and check exported version\nsave_cpal_plot(test_plot, \"color_test.png\")\n# Check color_test.png file for true colors\n\n# Compare with hex codes\ncpal_colors(\"main\")  # Check actual hex values\n\n\n\n\nThemes Not Applied Correctly\nSymptoms: - Plots still look like default ggplot2 theme - Theme settings not taking effect\nDiagnostic Steps:\n\n# Test theme application\nlibrary(ggplot2)\n\n# Test theme object creation\ntheme_obj &lt;- theme_cpal()\nclass(theme_obj)  # Should be \"theme\" \"gg\"\n\n# Test theme application\ntest_plot &lt;- ggplot(mtcars, aes(x = wt, y = mpg)) +\n  geom_point() +\n  theme_cpal() +\n  labs(title = \"Theme Test\")\n\nprint(test_plot)\n\nSolutions:\n\n# Try explicit theme setting\nset_theme_cpal(\"default\")\n\n# Check for theme conflicts\nlibrary(ggplot2)\ntheme_set(theme_cpal())  # Set as default\n\n# If fonts missing, use fallback\ntheme_cpal(base_family = cpal_font_family_fallback())\n\nStill having theme issues? The CPAL Data Team Notion Guide has additional theme troubleshooting examples and team member solutions for specific scenarios."
  },
  {
    "objectID": "troubleshooting.html#project-creation-and-setup-issues",
    "href": "troubleshooting.html#project-creation-and-setup-issues",
    "title": "Troubleshooting",
    "section": "Project Creation and Setup Issues",
    "text": "Project Creation and Setup Issues\n\nstart_project() Fails\nSymptoms: - Permission denied errors - Project creation starts but doesn‚Äôt complete - RStudio doesn‚Äôt open new project\nDiagnostic Steps:\n\n# Check write permissions\nfile.access(\".\", mode = 2)  # Should return 0\n\n# Test basic directory creation\ntest_dir &lt;- tempdir()\ndir.create(file.path(test_dir, \"test_project\"))\nfile.exists(file.path(test_dir, \"test_project\"))\n\n# Check RStudio availability\n.Platform$GUI  # Should show \"RStudio\" if in RStudio\n\n# Test with minimal options\nstart_project(\n  name = \"test-minimal\",\n  project_type = \"analysis\", \n  features = NULL,  # No extra features\n  interactive = FALSE,\n  open = FALSE  # Don't try to open\n)\n\nSolutions:\n\nPermission Issues\n\n# Try different location\nstart_project(\n  name = \"test-project\",\n  path = \"~/Documents\",  # User directory usually has permissions\n  project_type = \"analysis\"\n)\n\n# Check disk space\n# Make sure target drive has sufficient space\n\n\n\nTemplate File Issues\n\n# Check template availability\nsystem.file(\"templates\", package = \"cpaltemplates\")\n\n# If empty, reinstall package\nremove.packages(\"cpaltemplates\")\n# devtools::install_github(\"cpal-org/cpaltemplates\")\n\n\n\nRStudio Integration Issues\n\n# Create project without opening\nstart_project(\n  name = \"manual-open-test\",\n  open = FALSE\n)\n\n# Then manually open the .Rproj file in RStudio\n\n\n\n\nTemplate Files Not Found\nSymptoms: - ‚Äútemplate file not found‚Äù errors - Missing assets or CSS files in created projects\nDiagnostic Steps:\n\n# Check package installation integrity\nsystem.file(\"templates/analysis/analysis_template.R.tpl\", package = \"cpaltemplates\")\nsystem.file(\"templates/assets/css/cpal.css.tpl\", package = \"cpaltemplates\")\n\n# List all available templates\ntemplates_dir &lt;- system.file(\"templates\", package = \"cpaltemplates\")\nlist.files(templates_dir, recursive = TRUE)\n\nSolutions:\n\n# Reinstall package to restore templates\nremove.packages(\"cpaltemplates\")\n# Install fresh copy\n# devtools::install_github(\"cpal-org/cpaltemplates\")\n\n# Verify installation\npackageVersion(\"cpaltemplates\")\nsystem.file(\"templates\", package = \"cpaltemplates\")\n\nTemplate issues persist? Check the CPAL Data Team Notion Guide for known template file issues and alternative installation approaches shared by team members."
  },
  {
    "objectID": "troubleshooting.html#visualization-and-output-issues",
    "href": "troubleshooting.html#visualization-and-output-issues",
    "title": "Troubleshooting",
    "section": "Visualization and Output Issues",
    "text": "Visualization and Output Issues\n\nsave_cpal_plot() Not Working\nSymptoms: - Plots not saving to expected location - Saved plots look different than displayed plots - File size or quality issues\nDiagnostic Steps:\n\n# Test plot object\nlibrary(ggplot2)\ntest_plot &lt;- ggplot(mtcars, aes(x = wt, y = mpg)) +\n  geom_point() +\n  theme_cpal()\n\nprint(test_plot)  # Verify plot displays correctly\n\n# Test basic save\nsave_cpal_plot(test_plot, \"test_save.png\")\n\n# Check if file was created\nfile.exists(\"test_save.png\")\nfile.info(\"test_save.png\")\n\nSolutions:\n\nFile Path Issues\n\n# Use full path specification\nsave_cpal_plot(test_plot, file.path(getwd(), \"outputs\", \"test.png\"))\n\n# Create output directory if missing\ndir.create(\"outputs\", showWarnings = FALSE)\nsave_cpal_plot(test_plot, \"outputs/test.png\")\n\n\n\nPlot Object Issues\n\n# Verify plot is valid ggplot object\nclass(test_plot)  # Should include \"ggplot\"\n\n# Check for plot errors\nggplot2::ggplot_build(test_plot)  # Should complete without error\n\n\n\nPermission or Space Issues\n\n# Check write permissions\nfile.access(dirname(\"test.png\"), mode = 2)\n\n# Check disk space\n# Ensure adequate space for plot files\n\n# Try temporary directory\ntemp_file &lt;- file.path(tempdir(), \"test.png\")\nsave_cpal_plot(test_plot, temp_file)\n\n\n\n\nInteractive Features Not Working\nSymptoms: - Interactive plots display as static - Hover effects not working - Dashboard not loading properly\nDiagnostic Steps:\n\n# Check required packages\npackageVersion(\"ggiraph\")\npackageVersion(\"reactable\")\npackageVersion(\"mapgl\")\n\n# Test basic interactivity\nlibrary(ggiraph)\ntest_interactive &lt;- ggplot(mtcars, aes(x = wt, y = mpg)) +\n  geom_point_interactive(aes(tooltip = \"test tooltip\")) +\n  theme_cpal()\n\ncpal_interactive(test_interactive)\n\nSolutions:\n\nPackage Dependencies\n\n# Install missing interactive packages\ninstall.packages(c(\"ggiraph\", \"reactable\", \"plotly\"))\n\n# Restart R session\n.rs.restartR()\nlibrary(cpaltemplates)\n\n\n\nBrowser Compatibility\n\n# Try different browser for viewing interactive outputs\n# Chrome, Firefox, Safari, Edge all have different capabilities\n\n# Check JavaScript console for errors\n# Right-click ‚Üí Inspect ‚Üí Console in browser\n\n\n\nData Size Issues\n\n# Reduce data for interactive plots\nlarge_data %&gt;%\n  slice_sample(n = 1000) %&gt;%  # Sample for performance\n  ggplot(aes(x = x, y = y)) +\n  cpal_point_interactive(aes(tooltip = \"simplified\"))\n\nInteractive issues persisting? The CPAL Data Team Notion Guide has browser-specific troubleshooting tips and interactive visualization performance optimization guidance from team members."
  },
  {
    "objectID": "troubleshooting.html#data-and-analysis-issues",
    "href": "troubleshooting.html#data-and-analysis-issues",
    "title": "Troubleshooting",
    "section": "Data and Analysis Issues",
    "text": "Data and Analysis Issues\n\nColor Palettes Don‚Äôt Match Data\nSymptoms: - Too many/few colors for your data categories - Colors imply wrong relationships (sequential for categorical, etc.)\nDiagnostic Steps:\n\n# Check your data structure\nstr(your_data$category_variable)\nlength(unique(your_data$category_variable))\n\n# Check palette length\nlength(cpal_colors(\"main\"))          # 5 colors\nlength(cpal_colors(\"teal_seq_5\"))    # 5 colors\nlength(cpal_colors(\"main_3\"))        # 3 colors\n\n# Test palette with your data\nunique_categories &lt;- unique(your_data$category_variable)\nlength(unique_categories)\n\nSolutions:\n\nToo Many Categories for Palette\n\n# Option 1: Use larger palette\nscale_fill_cpal(palette = \"categorical\")  # More colors available\n\n# Option 2: Simplify categories\nyour_data %&gt;%\n  mutate(category_simplified = case_when(\n    category %in% c(\"A\", \"B\", \"C\") ~ category,\n    TRUE ~ \"Other\"\n  )) %&gt;%\n  ggplot(aes(x = x, y = y, fill = category_simplified)) +\n  scale_fill_cpal(palette = \"main_4\")  # Now fits 4-color palette\n\n\n\nWrong Palette Type for Data\n\n# For continuous data, use sequential palettes\nscale_fill_cpal(palette = \"teal_seq_5\", discrete = FALSE)\n\n# For categorical data, use categorical palettes  \nscale_fill_cpal(palette = \"main\")\n\n# For data with meaningful center, use diverging\nscale_fill_cpal(palette = \"pink_teal_5\", discrete = FALSE)\n\n\n\n\nAccessibility Checks Failing\nSymptoms: - check_plot_accessibility() reports failures - Colors too similar for colorblind users - Text too small for readability\nDiagnostic Steps:\n\n# Run detailed accessibility check\naccessibility_results &lt;- check_plot_accessibility(your_plot, verbose = TRUE)\n\n# Check specific issues\nprint(accessibility_results)\n\nSolutions:\n\nColor Contrast Issues\n\n# Use high-contrast palette\nscale_fill_cpal(palette = \"compare\")  # Maximum contrast\n\n# Or increase contrast with theme\ntheme_cpal_print()  # High contrast theme\n\n\n\nText Size Issues\n\n# Increase base font size\ntheme_cpal(base_size = 16)  # Larger text\n\n# For presentations\ntheme_cpal(base_size = 18)  # Even larger\n\n\n\nColorblind Accessibility\n\n# Test with colorblind-safe palettes\nscale_fill_cpal(palette = \"main\")  # Tested for colorblind safety\n\n# Add pattern or shape aesthetics as backup\nggplot(data, aes(x = x, y = y, color = category, shape = category)) +\n  geom_point(size = 3) +\n  scale_color_cpal(palette = \"main\") +\n  theme_cpal()\n\nNeed accessibility guidance? The CPAL Data Team Notion Guide has detailed accessibility checklists and team standards for inclusive visualization design."
  },
  {
    "objectID": "troubleshooting.html#project-integration-and-workflow-issues",
    "href": "troubleshooting.html#project-integration-and-workflow-issues",
    "title": "Troubleshooting",
    "section": "Project Integration and Workflow Issues",
    "text": "Project Integration and Workflow Issues\n\nTargets Pipeline Errors\nSymptoms: - tar_make() fails with errors - Dependencies not updating correctly - Pipeline runs but outputs are incorrect\nDiagnostic Steps:\n\n# Check targets setup\nlibrary(targets)\n\n# Verify pipeline structure\ntar_manifest()\n\n# Check for syntax errors\ntar_validate()\n\n# Test individual targets\ntar_load(target_name)  # Load specific target for testing\n\nSolutions:\n\nDependency Issues\n\n# Check package availability\ntar_option_set(packages = c(\"cpaltemplates\", \"dplyr\", \"ggplot2\"))\n\n# Install missing packages\ninstall.packages(c(\"targets\", \"tarchetypes\"))\n\n\n\nFunction Path Issues\n\n# Make sure custom functions are sourced\ntar_source(\"R/functions/\")  # Source all function files\n\n# Or define functions within pipeline\ntar_target(\n  my_data,\n  {\n    source(\"R/analysis_functions.R\")\n    process_data(raw_data)\n  }\n)\n\n\n\nFile Path Issues\n\n# Use here package for reliable paths\nlibrary(here)\n\ntar_target(\n  data_file,\n  read.csv(here(\"data\", \"raw\", \"input.csv\"))\n)\n\nTargets troubleshooting can be complex. The CPAL Data Team Notion Guide has team-specific targets pipeline examples and common configuration issues with solutions from experienced team members.\n\n\n\nQuarto Rendering Errors\nSymptoms: - Quarto documents won‚Äôt render - Missing images or assets in output - Formatting not applied correctly\nDiagnostic Steps:\n\n# Check Quarto installation\nsystem(\"quarto --version\")\n\n# Test basic rendering\nquarto::quarto_render(\"simple_test.qmd\")\n\n# Check file paths in document\n# Make sure all referenced files exist\n\nSolutions:\n\nAsset Path Issues\n\n# Verify asset files exist\nfile.exists(\"assets/css/cpal.css\")\nfile.exists(\"assets/images/cpal-logo.png\")\n\n# Update asset paths if needed\nupdate_cpal_assets()\n\n\n\nR Code Execution Errors\n\n# Test R code chunks individually\n# Copy chunk code and run in console\n\n# Add error handling to chunks\n#| error: true\n#| warning: false\n\n\n\nQuarto Configuration Issues\n\n# Check _quarto.yml syntax\nyaml::yaml.load_file(\"_quarto.yml\")\n\n# Validate Quarto project\nsystem(\"quarto check\")"
  },
  {
    "objectID": "troubleshooting.html#shiny-application-issues",
    "href": "troubleshooting.html#shiny-application-issues",
    "title": "Troubleshooting",
    "section": "Shiny Application Issues",
    "text": "Shiny Application Issues\n\nDashboard Not Loading\nSymptoms: - Shiny app fails to start - Dashboard displays errors or blank sections - Interactive elements not responding\nDiagnostic Steps:\n\n# Test basic Shiny functionality\nlibrary(shiny)\n\n# Check required packages\npackageVersion(\"shinydashboard\")\npackageVersion(\"reactable\")\npackageVersion(\"plotly\")\n\n# Test app in console\nshiny::runApp()\n\n# Check R console for error messages\n\nSolutions:\n\nPackage Dependencies\n\n# Install Shiny ecosystem packages\ninstall.packages(c(\"shiny\", \"shinydashboard\", \"DT\", \"plotly\"))\n\n# Restart R and try again\n.rs.restartR()\n\n\n\nData Loading Issues\n\n# Check data files exist\nfile.exists(\"data/dashboard_data.rds\")\n\n# Test data loading independently\ntest_data &lt;- readRDS(\"data/dashboard_data.rds\")\nstr(test_data)\n\n\n\nCSS Theme Issues\n\n# Check CSS file exists\nfile.exists(\"www/cpal-theme.css\")\n\n# Update Shiny theme\nuse_shiny_theme()\n\n# Test without custom CSS\n# Comment out CSS link temporarily\n\n\n\n\nInteractive Tables Not Displaying\nSymptoms: - Tables show as blank or with errors - Reactable features not working - Table formatting not applied\nDiagnostic Steps:\n\n# Test reactable directly\nlibrary(reactable)\nreactable(mtcars)  # Should work with basic data\n\n# Test CPAL table function\ncpal_table_interactive(mtcars)\n\n# Check data structure\nstr(your_data)\nhead(your_data)\n\nSolutions:\n\n# Check for data issues\n# Remove non-standard characters, handle NAs\nclean_data &lt;- your_data %&gt;%\n  mutate(across(where(is.character), ~ iconv(.x, to = \"UTF-8\"))) %&gt;%\n  replace_na(list(numeric_col = 0, char_col = \"\"))\n\ncpal_table_interactive(clean_data)\n\nShiny and interactive issues can be complex. The CPAL Data Team Notion Guide has extensive Shiny troubleshooting resources and team members who can provide specific guidance for dashboard and interactive application issues."
  },
  {
    "objectID": "troubleshooting.html#performance-and-memory-issues",
    "href": "troubleshooting.html#performance-and-memory-issues",
    "title": "Troubleshooting",
    "section": "Performance and Memory Issues",
    "text": "Performance and Memory Issues\n\nSlow Rendering or Out of Memory\nSymptoms: - Plots taking very long to render - R session crashes or freezes - ‚ÄúCannot allocate memory‚Äù errors\nDiagnostic Steps:\n\n# Check data size\nobject.size(your_data)\nnrow(your_data)\nncol(your_data)\n\n# Check memory usage\ngc()  # Garbage collection\nmemory.size()  # Windows only\n\nSolutions:\n\nLarge Dataset Issues\n\n# Sample data for visualization\nlarge_data %&gt;%\n  slice_sample(n = 5000) %&gt;%  # Reasonable size for plotting\n  ggplot(aes(x = x, y = y)) +\n  geom_point(alpha = 0.5) +  # Transparency helps with overplotting\n  theme_cpal()\n\n\n\nInteractive Performance\n\n# Reduce interactive data size\ndashboard_data %&gt;%\n  filter(recent_data_only) %&gt;%  # Focus on relevant subset\n  cpal_table_interactive(defaultPageSize = 25)  # Reasonable page size\n\n\n\nMemory Management\n\n# Clear unused objects\nrm(large_unused_object)\ngc()\n\n# Process data in chunks if needed\n# See CPAL Data Team Notion Guide for chunking strategies"
  },
  {
    "objectID": "troubleshooting.html#cross-platform-and-environment-issues",
    "href": "troubleshooting.html#cross-platform-and-environment-issues",
    "title": "Troubleshooting",
    "section": "Cross-Platform and Environment Issues",
    "text": "Cross-Platform and Environment Issues\n\nWindows-Specific Issues\nCommon problems: - Font rendering differences - File path separator issues - Package compilation problems\nSolutions:\n\n# Use forward slashes or file.path()\nfile.path(\"data\", \"raw\", \"file.csv\")  # Cross-platform safe\n\n# Windows font fallbacks\nif (.Platform$OS.type == \"windows\") {\n  theme_cpal(base_family = \"Arial\")  # Windows-safe font\n}\n\n\n\nMac-Specific Issues\nCommon problems: - Quartz device issues with fonts - Package installation from source\nSolutions:\n\n# Mac graphics device\nif (capabilities(\"cairo\")) {\n  options(device = grDevices::png)\n}\n\n# Font setup for Mac\nif (Sys.info()[\"sysname\"] == \"Darwin\") {\n  setup_cpal_google_fonts(force_refresh = TRUE)\n}\n\n\n\nServer/Cloud Environment Issues\nCommon problems: - No GUI capabilities - Font installation restrictions - Limited package installation\nSolutions:\n\n# Server-safe setup\nif (!interactive()) {\n  # Use fallback fonts\n  theme_cpal(base_family = cpal_font_family_fallback())\n  \n  # Use headless graphics\n  options(device = function(...) {\n    grDevices::png(..., type = \"cairo-png\")\n  })\n}\n\nPlatform-specific issues vary widely. The CPAL Data Team Notion Guide has detailed troubleshooting for specific server environments, cloud platforms, and operating system configurations used by team members."
  },
  {
    "objectID": "troubleshooting.html#getting-additional-help",
    "href": "troubleshooting.html#getting-additional-help",
    "title": "Troubleshooting",
    "section": "Getting Additional Help",
    "text": "Getting Additional Help\n\nWhen This Guide Isn‚Äôt Enough\n\nCheck the CPAL Data Team Notion Guide for:\n\nRecent issue reports and solutions\nTeam-specific configuration guidance\nAdvanced troubleshooting techniques\nKnown issues and workarounds\n\nAsk team members who may have encountered similar issues:\n\nUse team Slack/communication channels\nReference the Notion guide for effective help-seeking practices\nShare diagnostic output and code snippets\n\nDocument new solutions in the CPAL Data Team Notion Guide:\n\nAdd new issues and solutions you discover\nUpdate existing entries with additional context\nHelp future team members with your troubleshooting experience\n\n\n\n\nCreating Effective Issue Reports\nWhen reporting issues to team members or in the Notion guide:\n\nInclude Essential Information\n\n# System information\nsessionInfo()\n\n# Package versions\npackageVersion(\"cpaltemplates\")\npackageVersion(\"ggplot2\")\n\n# Error messages (copy exact text)\n# Steps to reproduce\n# What you expected vs. what happened\n\n\n\nMinimal Reproducible Example\n\nlibrary(cpaltemplates)\nlibrary(ggplot2)\n\n# Simplest code that reproduces the issue\nsimple_plot &lt;- ggplot(mtcars, aes(x = wt, y = mpg)) +\n  geom_point() +\n  theme_cpal()\n\n# What fails here...\n\n\n\n\nContributing Solutions Back to Team\nHelp your team by documenting solutions: 1. Update Notion guide when you solve new issues 2. Share workarounds that work in your environment 3. Suggest improvements to common workflows\n4. Provide platform-specific guidance for your setup\n\nMost cpaltemplates issues have straightforward solutions. Use this guide systematically, leverage the CPAL Data Team Notion Guide for team-specific context, and don‚Äôt hesitate to ask team members for help. Troubleshooting is part of the learning process, and documenting solutions helps the entire team."
  },
  {
    "objectID": "tables-gt.html",
    "href": "tables-gt.html",
    "title": "Tables & GT Styling",
    "section": "",
    "text": "Tables are often overlooked in data visualization, but they‚Äôre crucial for presenting precise values, detailed comparisons, and supporting documentation. Poor table formatting can undermine otherwise excellent analysis.\n\n\n\n\n\n\n\n\n\n\nProblem\nImpact\nCPAL Solution\n\n\n\n\nGeneric appearance\nTables don‚Äôt match report branding\nAutomatic CPAL fonts, colors, and styling\n\n\nPoor readability\nHard to scan rows and find information\nStrategic highlighting and spacing\n\n\nInconsistent formatting\nDifferent team members create different styles\nStandardized table functions\n\n\nStatic limitations\nCan‚Äôt explore or interact with data\nBoth static and interactive table options\n\n\nManual styling\nTime-consuming to format each table\nOne-function professional styling\n\n\n\n\n\n\n\nConsistent branding: Automatic CPAL fonts, colors, and spacing\nProfessional appearance: Publication-ready styling with minimal effort\nFlexible customization: Easy highlighting, formatting, and theming options\nInteractive capabilities: Sortable, filterable, and searchable tables\nCross-format compatibility: Works in reports, presentations, and web outputs"
  },
  {
    "objectID": "tables-gt.html#why-professional-table-styling-matters",
    "href": "tables-gt.html#why-professional-table-styling-matters",
    "title": "Tables & GT Styling",
    "section": "",
    "text": "Tables are often overlooked in data visualization, but they‚Äôre crucial for presenting precise values, detailed comparisons, and supporting documentation. Poor table formatting can undermine otherwise excellent analysis.\n\n\n\n\n\n\n\n\n\n\nProblem\nImpact\nCPAL Solution\n\n\n\n\nGeneric appearance\nTables don‚Äôt match report branding\nAutomatic CPAL fonts, colors, and styling\n\n\nPoor readability\nHard to scan rows and find information\nStrategic highlighting and spacing\n\n\nInconsistent formatting\nDifferent team members create different styles\nStandardized table functions\n\n\nStatic limitations\nCan‚Äôt explore or interact with data\nBoth static and interactive table options\n\n\nManual styling\nTime-consuming to format each table\nOne-function professional styling\n\n\n\n\n\n\n\nConsistent branding: Automatic CPAL fonts, colors, and spacing\nProfessional appearance: Publication-ready styling with minimal effort\nFlexible customization: Easy highlighting, formatting, and theming options\nInteractive capabilities: Sortable, filterable, and searchable tables\nCross-format compatibility: Works in reports, presentations, and web outputs"
  },
  {
    "objectID": "tables-gt.html#cpal-table-function-overview",
    "href": "tables-gt.html#cpal-table-function-overview",
    "title": "Tables & GT Styling",
    "section": "CPAL Table Function Overview",
    "text": "CPAL Table Function Overview\nThe cpaltemplates package provides 4 table functions for different use cases and output formats:\n\n\n\n\n\n\n\n\n\nFunction\nTechnology\nBest For\nKey Features\n\n\n\n\ncpal_table_gt()\nGT package\nStatic reports, PDFs, presentations\nHigh customization, print-optimized\n\n\ncpal_table_reactable()\nReactable package\nInteractive dashboards, web outputs\nSorting, filtering, data bars\n\n\ncpal_table()\nGT package\nSimple static tables\nQuick formatting with minimal options\n\n\ncpal_table_interactive()\nReactable package\nBasic interactive tables\nSimple interactivity with CPAL styling"
  },
  {
    "objectID": "tables-gt.html#static-tables-with-gt-cpal_table_gt",
    "href": "tables-gt.html#static-tables-with-gt-cpal_table_gt",
    "title": "Tables & GT Styling",
    "section": "Static Tables with GT: cpal_table_gt()",
    "text": "Static Tables with GT: cpal_table_gt()\n\nWhy GT for Static Tables\nGT (Grammar of Tables) provides the most sophisticated table formatting capabilities in R. CPAL‚Äôs GT wrapper applies professional styling automatically while preserving GT‚Äôs full customization power.\n\n\nBasic Professional Tables\n\nlibrary(cpaltemplates)\nlibrary(gt)\n\n# Simple professional table with CPAL branding\ncpal_table_gt(\n  quarterly_results,\n  title = \"Q4 Performance Summary\",\n  subtitle = \"Key metrics by division\",\n  source = \"Internal financial systems\"\n)\n\n\n\nUnderstanding cpal_table_gt() Parameters\nCore content parameters:\n\ncpal_table_gt(\n  data = your_dataframe,        # Data to display\n  title = \"Table Title\",        # Main heading\n  subtitle = \"Additional context\", # Secondary heading  \n  source = \"Data source note\"   # Attribution/source\n)\n\n\n\nVisual Customization Options\n\nTheme Selection\n\n# Light theme (default) - professional, clean\ncpal_table_gt(data, theme = \"light\")\n\n# Dark theme - for dark backgrounds, presentations\ncpal_table_gt(data, theme = \"dark\") \n\nWhen to use each theme: - Light theme: Most reports, documents, printed materials - Dark theme: Presentations with dark backgrounds, night viewing, modern dashboards\n\n\nColumn Highlighting\n\n# Highlight specific columns for emphasis\ncpal_table_gt(\n  performance_data,\n  title = \"Department Performance\",\n  highlight_columns = c(\"revenue\", \"growth_rate\")  # Draws attention to key metrics\n)\n\nStrategic highlighting use: - Key performance indicators: Revenue, growth rates, efficiency metrics - Comparison columns: Before/after, target vs.¬†actual - Action items: Columns that require decision-making\n\n\nRow Emphasis\n\n# Bold specific rows for emphasis\ncpal_table_gt(\n  summary_data,\n  title = \"Regional Summary\",\n  bold_rows = \"total\",           # Row identifier for bolding\n  bold_color = cpal_colors(\"midnight\")  # Custom bold text color\n)\n\n# Highlight rows with background color\ncpal_table_gt(\n  performance_data,\n  bold_rows = \"top_performer\",\n  row_fill = cpal_colors(\"teal\"),    # Background color\n  bold_color = \"white\"               # Ensure text visibility\n)\n\n\n\n\nAdvanced Formatting Features\n\nGradient Styling for Numerical Columns\n\n# Apply color gradients to show data ranges\ncpal_table_gt(\n  metrics_data,\n  title = \"Performance Metrics with Visual Scaling\",\n  gradient_direction = \"high_to_low\"  # or \"low_to_high\"\n)\n\nGradient applications: - Performance rankings: High performers in darker colors - Risk assessments: High risk in attention-grabbing colors - Progress indicators: Completion percentages with visual scaling\n\n\nTypography Customization\n\n# Custom font choices (while maintaining CPAL standards)\ncpal_table_gt(\n  formal_report_data,\n  title_font = \"Inter\",      # Headings font\n  data_font = \"Roboto\"       # Table data font\n)\n\n\n\n\nIntegration with GT‚Äôs Advanced Features\nCPAL tables work seamlessly with GT‚Äôs formatting functions:\n\n# Start with CPAL styling, then add GT customizations\ncpal_table_gt(\n  financial_data,\n  title = \"Financial Performance\",\n  highlight_columns = c(\"revenue\", \"profit\")\n) %&gt;%\n  # Add GT formatting functions\n  fmt_currency(columns = c(revenue, profit), currency = \"USD\") %&gt;%\n  fmt_percent(columns = growth_rate, decimals = 1) %&gt;%\n  tab_style(\n    style = cell_text(weight = \"bold\"),\n    locations = cells_body(rows = department == \"Total\")\n  ) %&gt;%\n  tab_footnote(\n    footnote = \"Excludes one-time charges\",\n    locations = cells_body(columns = profit, rows = 1)\n  )\n\n\n\nComplete Static Table Examples\n\nExecutive Summary Table\n\n# High-level overview for executive audiences\nexecutive_summary &lt;- cpal_table_gt(\n  kpi_summary,\n  title = \"Executive Dashboard\",\n  subtitle = \"Q4 2024 Key Performance Indicators\",\n  source = \"CPAL Analytics Team\",\n  theme = \"light\",\n  highlight_columns = c(\"current_quarter\", \"growth_rate\"),\n  bold_rows = \"organization_total\"\n) %&gt;%\n  fmt_currency(columns = c(revenue, costs), currency = \"USD\", suffixing = TRUE) %&gt;%\n  fmt_percent(columns = growth_rate, decimals = 1) %&gt;%\n  tab_options(\n    table.font.size = px(12),\n    heading.title.font.size = px(16)\n  )\n\n\n\nDetailed Analysis Table\n\n# Comprehensive data for analytical audiences  \ndetailed_analysis &lt;- cpal_table_gt(\n  program_results,\n  title = \"Program Effectiveness Analysis\",\n  subtitle = \"Detailed metrics by program and region\",\n  source = \"Program evaluation data, December 2024\",\n  highlight_columns = c(\"effectiveness_score\", \"cost_per_outcome\"),\n  gradient_direction = \"high_to_low\"\n) %&gt;%\n  fmt_number(columns = c(participants, outcomes), decimals = 0) %&gt;%\n  fmt_currency(columns = c(cost_per_outcome, total_cost), currency = \"USD\") %&gt;%\n  fmt_percent(columns = effectiveness_score, decimals = 2)"
  },
  {
    "objectID": "tables-gt.html#interactive-tables-with-reactable-cpal_table_reactable",
    "href": "tables-gt.html#interactive-tables-with-reactable-cpal_table_reactable",
    "title": "Tables & GT Styling",
    "section": "Interactive Tables with Reactable: cpal_table_reactable()",
    "text": "Interactive Tables with Reactable: cpal_table_reactable()\n\nWhy Reactable for Interactive Tables\nReactable provides modern, responsive interactive tables perfect for dashboards and web outputs. CPAL‚Äôs wrapper applies consistent branding while enabling powerful user interactions.\n\n\nBasic Interactive Tables\n\nlibrary(reactable)\n\n# Simple interactive table with CPAL styling\ncpal_table_reactable(\n  analysis_data,\n  title = \"Interactive Data Explorer\", \n  subtitle = \"Click headers to sort, use search to filter\"\n)\n\n\n\nInteractive Features\n\nBuilt-in Interactivity\n\n# Full-featured interactive table\ncpal_table_reactable(\n  large_dataset,\n  title = \"Comprehensive Data Table\",\n  # User interaction features\n  filterable = TRUE,      # Column-specific filters\n  searchable = TRUE,      # Global search box\n  sortable = TRUE,        # Click headers to sort\n  \n  # Display options\n  defaultPageSize = 15,   # Rows per page\n  showPageInfo = TRUE,    # \"Showing X of Y entries\"\n  highlight = TRUE,       # Row highlighting on hover\n  bordered = TRUE,        # Clean borders\n  striped = TRUE          # Alternating row colors\n)\n\n\n\nVisual Enhancement Features\n\n# Enhanced visual presentation\ncpal_table_reactable(\n  performance_metrics,\n  title = \"Performance Dashboard\",\n  \n  # Column highlighting\n  highlight_columns = c(\"efficiency\", \"satisfaction\"),\n  \n  # Data visualization within table\n  data_bar_columns = c(\"progress\", \"completion\"),  # Progress bars in cells\n  \n  # Row emphasis\n  bold_rows = \"top_quartile\",        # Bold high performers\n  row_fill = cpal_colors(\"teal\")     # Background highlighting\n)\n\n\n\n\nAdvanced Interactive Customization\n\nCustom Column Formatting\n\n# Sophisticated formatting with reactable's column definitions\ncpal_table_reactable(\n  financial_dashboard,\n  title = \"Financial Performance Dashboard\",\n  columns = list(\n    # Currency formatting\n    revenue = colDef(\n      name = \"Revenue\",\n      format = colFormat(currency = \"USD\", separators = TRUE)\n    ),\n    \n    # Percentage with custom styling\n    growth_rate = colDef(\n      name = \"Growth Rate\",\n      format = colFormat(percent = TRUE, digits = 1),\n      style = function(value) {\n        color &lt;- if (value &gt; 0) cpal_colors(\"teal\") else cpal_colors(\"pink\")\n        list(color = color, fontWeight = \"bold\")\n      }\n    ),\n    \n    # Progress bars\n    completion = colDef(\n      name = \"Project Completion\",\n      cell = function(value) {\n        width &lt;- paste0(value * 100, \"%\")\n        bar_color &lt;- cpal_colors(\"midnight\")\n        div(\n          style = list(background = \"#f0f0f0\", borderRadius = \"3px\"),\n          div(style = list(\n            background = bar_color,\n            width = width,\n            height = \"20px\",\n            borderRadius = \"3px\",\n            transition = \"width 0.6s ease\"\n          ))\n        )\n      }\n    )\n  )\n)\n\n\n\n\nInteractive Table Patterns\n\nDashboard Summary Pattern\n\n# Compact interactive summary for dashboard use\ndashboard_table &lt;- cpal_table_reactable(\n  kpi_data,\n  title = \"Key Performance Indicators\",\n  defaultPageSize = 8,    # Compact display\n  searchable = TRUE,      # Quick filtering\n  highlight_columns = c(\"current\", \"target\"),\n  theme = \"light\"\n) %&gt;%\n  # Add reactable customizations as needed\n\n\n\nData Exploration Pattern\n\n# Full-featured table for data exploration\nexploration_table &lt;- cpal_table_reactable(\n  comprehensive_data,\n  title = \"Data Explorer\",\n  subtitle = \"Filter, sort, and analyze the complete dataset\",\n  \n  # Maximum interactivity\n  filterable = TRUE,\n  searchable = TRUE,\n  sortable = TRUE,\n  \n  # Visual enhancements\n  data_bar_columns = c(\"volume\", \"performance\"),\n  highlight_columns = c(\"key_metric\", \"outcome\"),\n  \n  # User experience\n  defaultPageSize = 25,\n  showPageInfo = TRUE,\n  bordered = TRUE,\n  highlight = TRUE\n)"
  },
  {
    "objectID": "tables-gt.html#simple-table-functions",
    "href": "tables-gt.html#simple-table-functions",
    "title": "Tables & GT Styling",
    "section": "Simple Table Functions",
    "text": "Simple Table Functions\n\ncpal_table() - Quick Static Tables\nFor simple tables with minimal customization needs:\n\n# Basic professional table with CPAL fonts\ncpal_table(\n  summary_data,\n  title = \"Quick Summary\",\n  subtitle = \"Basic formatting with CPAL styling\"\n)\n\nWhen to use cpal_table(): - Quick internal reports - Simple data summaries\n- When you need GT functionality but minimal customization - Prototyping table layouts before adding advanced formatting\n\n\ncpal_table_interactive() - Basic Interactive Tables\nFor simple interactive tables:\n\n# Basic interactive table with CPAL branding\ncpal_table_interactive(data)\n\n# With basic customization\ncpal_table_interactive(\n  data,\n  defaultPageSize = 10,\n  searchable = TRUE\n)\n\nWhen to use cpal_table_interactive(): - Simple dashboard components - Quick interactive data exploration - When you need reactable functionality but minimal customization - Testing interactive concepts before advanced formatting"
  },
  {
    "objectID": "tables-gt.html#table-selection-decision-guide",
    "href": "tables-gt.html#table-selection-decision-guide",
    "title": "Tables & GT Styling",
    "section": "Table Selection Decision Guide",
    "text": "Table Selection Decision Guide\n\nChoosing the Right Table Function\n\ngraph TD\n    A[What type of table do you need?] --&gt; B[Static display]\n    A --&gt; C[Interactive exploration]\n    \n    B --&gt; D[Simple/quick?]\n    D --&gt;|Yes| E[cpal_table]\n    D --&gt;|No| F[Advanced formatting needed?]\n    F --&gt;|Yes| G[cpal_table_gt]\n    F --&gt;|No| H[cpal_table]\n    \n    C --&gt; I[Simple/quick?]  \n    I --&gt;|Yes| J[cpal_table_interactive]\n    I --&gt;|No| K[Advanced features needed?]\n    K --&gt;|Yes| L[cpal_table_reactable]\n    K --&gt;|No| M[cpal_table_interactive]\n\n\n\n\n\n\n\n\n\n\n\n\nUse Case Matrix\n\n\n\n\n\n\n\n\nScenario\nRecommended Function\nKey Features\n\n\n\n\nExecutive summary for PDF report\ncpal_table_gt()\nProfessional formatting, print optimization\n\n\nInteractive dashboard component\ncpal_table_reactable()\nSorting, filtering, visual enhancements\n\n\nQuick internal data summary\ncpal_table()\nSimple, fast, CPAL branding\n\n\nPresentation slide table\ncpal_table_gt(theme = \"dark\")\nHigh contrast, large fonts\n\n\nWeb-based data explorer\ncpal_table_reactable()\nFull interactivity, responsive design\n\n\nAppendix with detailed data\ncpal_table_gt()\nAdvanced formatting, footnotes\n\n\nDashboard KPI summary\ncpal_table_interactive()\nBasic interactivity, compact display"
  },
  {
    "objectID": "tables-gt.html#workflow-integration-examples",
    "href": "tables-gt.html#workflow-integration-examples",
    "title": "Tables & GT Styling",
    "section": "Workflow Integration Examples",
    "text": "Workflow Integration Examples\n\nReport Generation Workflow\n\nlibrary(cpaltemplates)\n\n# Executive summary table\nexecutive_table &lt;- cpal_table_gt(\n  executive_kpis,\n  title = \"Executive Summary\",\n  subtitle = \"Q4 2024 Key Performance Indicators\", \n  source = \"CPAL Analytics Team\",\n  highlight_columns = c(\"current_quarter\", \"variance\"),\n  bold_rows = \"total\"\n) %&gt;%\n  fmt_currency(columns = c(revenue, costs)) %&gt;%\n  fmt_percent(columns = variance)\n\n# Detailed analysis table\ndetailed_table &lt;- cpal_table_gt(\n  detailed_analysis,\n  title = \"Detailed Performance Analysis\",\n  subtitle = \"Complete breakdown by department and program\",\n  source = \"Internal reporting systems\",\n  gradient_direction = \"high_to_low\"\n) %&gt;%\n  fmt_number(columns = participants, decimals = 0) %&gt;%\n  fmt_currency(columns = cost_per_participant)\n\n# Both tables now have consistent CPAL branding\n\n\n\nInteractive Dashboard Workflow\n\n# Summary KPI table\nkpi_table &lt;- cpal_table_reactable(\n  kpi_summary,\n  title = \"Performance Dashboard\",\n  defaultPageSize = 10,\n  highlight_columns = c(\"current\", \"target\", \"variance\"),\n  data_bar_columns = \"progress\"\n)\n\n# Detailed exploration table  \ndetail_table &lt;- cpal_table_reactable(\n  full_dataset,\n  title = \"Detailed Data Explorer\",\n  filterable = TRUE,\n  searchable = TRUE,\n  defaultPageSize = 20,\n  highlight_columns = c(\"key_metrics\")\n)\n\n# Both tables coordinate in dashboard layout with consistent styling\n\n\n\nMulti-Format Output Workflow\n\n# Create base table with core formatting\nbase_data &lt;- prepare_table_data()\n\n# Static version for PDF reports\npdf_table &lt;- cpal_table_gt(\n  base_data,\n  title = \"Performance Analysis\",\n  theme = \"light\"\n) %&gt;%\n  add_pdf_optimizations()\n\n# Interactive version for web dashboard\nweb_table &lt;- cpal_table_reactable(\n  base_data,\n  title = \"Performance Analysis\", \n  filterable = TRUE,\n  searchable = TRUE\n)\n\n# Both maintain consistent CPAL branding across formats"
  },
  {
    "objectID": "tables-gt.html#best-practices-and-guidelines",
    "href": "tables-gt.html#best-practices-and-guidelines",
    "title": "Tables & GT Styling",
    "section": "Best Practices and Guidelines",
    "text": "Best Practices and Guidelines\n\nTable Design Principles\nProfessional table design: 1. Clear hierarchy: Title ‚Üí subtitle ‚Üí column headers ‚Üí data 2. Strategic highlighting: Emphasize what matters most 3. Consistent alignment: Numbers right-aligned, text left-aligned 4. Appropriate density: Balance information density with readability 5. Contextual formatting: Currency, percentages, dates formatted correctly\n\n\nCPAL-Specific Guidelines\nBrand consistency: - Always use CPAL table functions instead of raw GT or reactable - Maintain font consistency with Inter/Roboto from Google Fonts setup - Use CPAL colors for highlighting and emphasis - Include source attribution for transparency and credibility\n\n\nPerformance Considerations\nTable rendering optimization:\n\n# For large datasets, consider pagination\ncpal_table_reactable(\n  large_data,\n  defaultPageSize = 50,  # Reasonable page size\n  pagination = TRUE      # Enable pagination\n)\n\n# For static tables with many rows, consider summarization\ncpal_table_gt(\n  summarized_data,      # Pre-summarize large datasets\n  title = \"Summary View\"\n)\n\n\n\nAccessibility Best Practices\nInclusive table design: - High contrast: Ensure sufficient contrast between text and background - Clear headers: Descriptive column names that screen readers can interpret - Logical structure: Proper use of table headers and structure - Alternative text: Provide table descriptions for screen readers\n\n# Accessibility-focused table\naccessible_table &lt;- cpal_table_gt(\n  data,\n  title = \"Accessible Performance Summary\",\n  subtitle = \"Table shows quarterly performance metrics by department\",\n  theme = \"light\"  # High contrast theme\n) %&gt;%\n  # Ensure clear formatting\n  fmt_number(columns = all_numeric(), decimals = 1) %&gt;%\n  # Add descriptive footnotes\n  tab_footnote(\"Performance measured on 1-10 scale\", \n               locations = cells_column_labels(\"performance_score\"))"
  },
  {
    "objectID": "tables-gt.html#troubleshooting-common-issues",
    "href": "tables-gt.html#troubleshooting-common-issues",
    "title": "Tables & GT Styling",
    "section": "Troubleshooting Common Issues",
    "text": "Troubleshooting Common Issues\n\nStyling Not Applied\nProblem: Table doesn‚Äôt show CPAL styling\n\n# Check package dependencies\nlibrary(gt)        # For cpal_table_gt()\nlibrary(reactable) # For cpal_table_reactable()\n\n# Verify font setup\nsetup_cpal_google_fonts()\nget_cpal_font_family()\n\n\n\nInteractive Features Not Working\nProblem: Sorting, filtering not responsive\n\n# Check reactable installation\ninstall.packages(\"reactable\")\n\n# Verify function parameters\ncpal_table_reactable(\n  data,\n  sortable = TRUE,    # Explicitly enable\n  filterable = TRUE,  # Explicitly enable\n  searchable = TRUE   # Explicitly enable\n)\n\n\n\nFormatting Issues\nProblem: Numbers, dates, currencies not displaying correctly\n\n# Add proper formatting after CPAL function\ncpal_table_gt(data, title = \"Formatted Table\") %&gt;%\n  fmt_currency(columns = revenue, currency = \"USD\") %&gt;%\n  fmt_percent(columns = growth_rate, decimals = 1) %&gt;%\n  fmt_date(columns = report_date, date_style = 3)\n\n\n\nTheme Compatibility\nProblem: Tables don‚Äôt match document theme\n\n# Match table theme to document\n# For dark backgrounds/presentations\ncpal_table_gt(data, theme = \"dark\")\n\n# For light backgrounds/reports  \ncpal_table_gt(data, theme = \"light\")\n\n\nProfessional table presentation is crucial for data credibility and user comprehension. Use CPAL table functions to ensure consistent, branded, and accessible tables across all your analytical outputs."
  },
  {
    "objectID": "utilities-helpers.html",
    "href": "utilities-helpers.html",
    "title": "Utilities & Helpers",
    "section": "",
    "text": "Not every project starts with cpaltemplates. You may have existing analyses, legacy projects, or inherited codebases that need CPAL capabilities added incrementally. Rather than starting over, utility functions let you add CPAL features to any existing project.\n\n\n\n\n\n\n\n\n\n\nSituation\nTraditional Approach\nCPAL Solution\n\n\n\n\nNeed to add reporting to analysis project\nManually configure Quarto, copy assets, set up templates\nuse_quarto_report() - instant professional reporting\n\n\nWant to create dashboard from existing analysis\nLearn Shiny, set up structure, configure themes\nuse_shiny_dashboard() - modular dashboard ready\n\n\nLegacy project needs CPAL branding\nManually copy logos, update CSS, modify themes\nupdate_cpal_assets() - automatic asset refresh\n\n\nAdd workflow automation to existing work\nLearn targets, configure pipeline, set up structure\nuse_targets() - instant reproducible workflow\n\n\nNeed CPAL fonts in existing project\nResearch font setup, configure manually\ncpal_font_family() - automatic font management\n\n\n\n\n\n\n\nNon-destructive enhancement: Add capabilities without disrupting existing work\nModular functionality: Add only what you need, when you need it\nConsistent integration: CPAL standards applied to any project structure\nAsset management: Automatic handling of logos, CSS, fonts, and templates\nTemplate-driven additions: Professional templates adapted to your existing project"
  },
  {
    "objectID": "utilities-helpers.html#why-utility-functions-matter-for-existing-projects",
    "href": "utilities-helpers.html#why-utility-functions-matter-for-existing-projects",
    "title": "Utilities & Helpers",
    "section": "",
    "text": "Not every project starts with cpaltemplates. You may have existing analyses, legacy projects, or inherited codebases that need CPAL capabilities added incrementally. Rather than starting over, utility functions let you add CPAL features to any existing project.\n\n\n\n\n\n\n\n\n\n\nSituation\nTraditional Approach\nCPAL Solution\n\n\n\n\nNeed to add reporting to analysis project\nManually configure Quarto, copy assets, set up templates\nuse_quarto_report() - instant professional reporting\n\n\nWant to create dashboard from existing analysis\nLearn Shiny, set up structure, configure themes\nuse_shiny_dashboard() - modular dashboard ready\n\n\nLegacy project needs CPAL branding\nManually copy logos, update CSS, modify themes\nupdate_cpal_assets() - automatic asset refresh\n\n\nAdd workflow automation to existing work\nLearn targets, configure pipeline, set up structure\nuse_targets() - instant reproducible workflow\n\n\nNeed CPAL fonts in existing project\nResearch font setup, configure manually\ncpal_font_family() - automatic font management\n\n\n\n\n\n\n\nNon-destructive enhancement: Add capabilities without disrupting existing work\nModular functionality: Add only what you need, when you need it\nConsistent integration: CPAL standards applied to any project structure\nAsset management: Automatic handling of logos, CSS, fonts, and templates\nTemplate-driven additions: Professional templates adapted to your existing project"
  },
  {
    "objectID": "utilities-helpers.html#cpal-utilities-function-overview",
    "href": "utilities-helpers.html#cpal-utilities-function-overview",
    "title": "Utilities & Helpers",
    "section": "CPAL Utilities Function Overview",
    "text": "CPAL Utilities Function Overview\nThe cpaltemplates package provides 12 utility functions organized into 4 categories:\n\n\n\n\n\n\n\n\nCategory\nFunctions\nPurpose\n\n\n\n\nTemplate Addition\nuse_quarto_report(), use_quarto_slides(), use_quarto_web(), use_shiny_dashboard(), use_shiny_app(), use_shiny_theme()\nAdd complete new capabilities to existing projects\n\n\nWorkflow Enhancement\nuse_targets()\nAdd modern R workflow automation\n\n\nAsset Management\nupdate_cpal_assets(), copy_cpal_assets(), get_cpal_asset()\nManage CPAL branding assets and files\n\n\nFont Utilities\ncpal_font_family(), cpal_font_family_fallback()\nConsistent font management across contexts"
  },
  {
    "objectID": "utilities-helpers.html#template-addition-functions",
    "href": "utilities-helpers.html#template-addition-functions",
    "title": "Utilities & Helpers",
    "section": "Template Addition Functions",
    "text": "Template Addition Functions\n\nuse_quarto_report() - Add Professional Reporting\nWhen to use: Transform analysis projects into publication-ready reports with professional CPAL branding.\n\n# Add Quarto reporting to your existing analysis project\nuse_quarto_report()\n\n# Specify different project location\nuse_quarto_report(path = \"/path/to/existing/project\")\n\n# Overwrite existing Quarto files if needed\nuse_quarto_report(overwrite = TRUE)\n\nWhat gets added to your project:\nyour-existing-project/\n‚îú‚îÄ‚îÄ report.qmd           # Professional report template\n‚îú‚îÄ‚îÄ _quarto.yml          # CPAL-configured Quarto settings  \n‚îú‚îÄ‚îÄ assets/\n‚îÇ   ‚îú‚îÄ‚îÄ css/\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ cpal.css     # CPAL report styling\n‚îÇ   ‚îú‚îÄ‚îÄ images/\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ cpal-logo.png # CPAL branding\n‚îÇ   ‚îî‚îÄ‚îÄ tex/\n‚îÇ       ‚îî‚îÄ‚îÄ cpal.tex     # LaTeX template for PDF output\n‚îú‚îÄ‚îÄ R/                   # Helper functions for report\n‚îÇ   ‚îî‚îÄ‚îÄ report-helpers.R\n‚îî‚îÄ‚îÄ outputs/             # Rendered reports directory\nPerfect for: - Turning analysis into stakeholder reports: Transform R scripts into professional documents - Adding documentation to research projects: Create publication-ready summaries - Executive briefings: Generate branded reports for leadership - Grant applications: Professional document formatting with CPAL branding\n\n\nuse_quarto_slides() - Add Presentation Capability\nWhen to use: Create professional presentations directly from your analysis data.\n\n# Add slides to existing project\nuse_quarto_slides()\n\n# Custom slide filename\nuse_quarto_slides(filename = \"board-presentation.qmd\")\n\n# Specify project location\nuse_quarto_slides(path = \"/path/to/project\", filename = \"q4-results.qmd\")\n\nWhat gets added: - CPAL-branded slide template with consistent theming - Interactive plot integration ready for live presentations - Multiple output formats (HTML slides, PDF, PowerPoint) - Speaker notes capability for presentation delivery - Asset integration with automatic logo and image handling\nPerfect for: - Conference presentations: Professional slides with CPAL branding - Board meetings: Executive-level presentations - Team presentations: Internal sharing with consistent format - Training workshops: Educational content with CPAL identity\n\n\nuse_quarto_web() - Add Website/Documentation\nWhen to use: Transform projects into comprehensive websites or multi-page documentation.\n\n# Add website capability to existing project  \nuse_quarto_web()\n\n# Specify location and handle existing files\nuse_quarto_web(path = \"/path/to/project\", overwrite = TRUE)\n\nWhat gets added:\nyour-existing-project/\n‚îú‚îÄ‚îÄ _quarto.yml          # Website configuration\n‚îú‚îÄ‚îÄ index.qmd            # Homepage\n‚îú‚îÄ‚îÄ about.qmd            # About page  \n‚îú‚îÄ‚îÄ resources.qmd        # Resources page\n‚îú‚îÄ‚îÄ data.qmd             # Data documentation page\n‚îú‚îÄ‚îÄ _site/               # Rendered website\n‚îî‚îÄ‚îÄ assets/              # CPAL website styling and assets\nPerfect for: - Project documentation hubs: Comprehensive project information sites - Resource collections: Centralized access to data, reports, tools - Research portfolios: Showcase multiple related analyses - Team collaboration sites: Shared knowledge bases\n\n\nuse_shiny_dashboard() - Add Interactive Dashboard\nWhen to use: Transform static analysis into interactive dashboards for ongoing monitoring or stakeholder engagement.\n\n# Add complete dashboard framework to existing project\nuse_shiny_dashboard()\n\n# Handle existing files\nuse_shiny_dashboard(path = \"/path/to/project\", overwrite = TRUE)\n\nWhat gets added:\nyour-existing-project/\n‚îú‚îÄ‚îÄ app.R                # Main dashboard application\n‚îú‚îÄ‚îÄ R/\n‚îÇ   ‚îú‚îÄ‚îÄ ui.R            # User interface components\n‚îÇ   ‚îú‚îÄ‚îÄ server.R        # Server logic\n‚îÇ   ‚îú‚îÄ‚îÄ global.R        # Global variables and data loading\n‚îÇ   ‚îî‚îÄ‚îÄ modules/        # Modular dashboard components\n‚îÇ       ‚îú‚îÄ‚îÄ overview_module.R\n‚îÇ       ‚îî‚îÄ‚îÄ detail_module.R\n‚îú‚îÄ‚îÄ www/\n‚îÇ   ‚îú‚îÄ‚îÄ cpal-theme.css  # Dashboard styling\n‚îÇ   ‚îî‚îÄ‚îÄ custom.js       # Custom JavaScript (if needed)\n‚îî‚îÄ‚îÄ data/               # Dashboard data directory\nDashboard features included: - Modular architecture: Organized, maintainable code structure - CPAL UI theming: Consistent branding across all dashboard elements - Interactive plot templates: Ready-to-use cpaltemplates integration - Data loading framework: Structured data handling for dashboards - Responsive design: Works on desktop and mobile devices\nPerfect for: - Executive dashboards: KPI monitoring with real-time updates - Program monitoring: Track outcomes and performance metrics - Financial dashboards: Revenue, costs, and performance tracking - Public data displays: Community-facing data exploration tools\n\n\nuse_shiny_app() - Add Simple Interactive App\nWhen to use: Create focused interactive applications (simpler than full dashboards).\n\n# Add simple Shiny app template\nuse_shiny_app()\n\n# Customize location and file handling\nuse_shiny_app(path = \"/path/to/project\", overwrite = FALSE)\n\nWhat gets added: - Simple app structure: Streamlined Shiny application template - CPAL UI styling: Consistent branding without dashboard complexity - Interactive examples: Starter code for common app patterns - Deployment configuration: Ready for shinyapps.io or internal deployment\nPerfect for: - Calculators and tools: Cost calculators, impact estimators - Data entry forms: Structured data collection applications - Single-purpose tools: Focused functionality applications - Prototype development: Testing interactive concepts quickly\n\n\nuse_shiny_theme() - Add Enhanced Shiny Styling\nWhen to use: Upgrade existing Shiny applications with professional CPAL theming.\n\n# Add CPAL theme to existing Shiny app\nuse_shiny_theme()\n\n# Custom theme filename\nuse_shiny_theme(theme_name = \"custom-cpal-theme.css\")\n\n# Apply to specific project\nuse_shiny_theme(path = \"/path/to/shiny/project\")\n\nWhat the theme provides: - CPAL color integration: Midnight, teal, pink, orange, gold color schemes - Typography consistency: Inter and Roboto font integration - Component styling: Buttons, inputs, outputs styled to CPAL standards - Responsive behavior: Mobile-friendly interface adjustments - Accessibility enhancements: High contrast and readable interface elements"
  },
  {
    "objectID": "utilities-helpers.html#workflow-enhancement-functions",
    "href": "utilities-helpers.html#workflow-enhancement-functions",
    "title": "Utilities & Helpers",
    "section": "Workflow Enhancement Functions",
    "text": "Workflow Enhancement Functions\n\nuse_targets() - Add Workflow Automation\nWhen to use: Add reproducible workflow automation to existing analysis projects with multiple steps or dependencies.\n\n# Add basic targets pipeline\nuse_targets()\n\n# Specify pipeline type based on your project\nuse_targets(type = \"analysis\")    # For data analysis workflows\nuse_targets(type = \"report\")      # For report generation workflows  \nuse_targets(type = \"basic\")       # For simple automation needs\n\n# Apply to specific project\nuse_targets(path = \"/path/to/project\", type = \"analysis\")\n\nWhat gets added:\nyour-existing-project/\n‚îú‚îÄ‚îÄ _targets.R           # Main targets pipeline configuration\n‚îú‚îÄ‚îÄ R/\n‚îÇ   ‚îú‚îÄ‚îÄ functions.R      # Custom functions for pipeline\n‚îÇ   ‚îî‚îÄ‚îÄ packages.R       # Package loading and configuration\n‚îî‚îÄ‚îÄ targets-config/      # Pipeline configuration files\n    ‚îî‚îÄ‚îÄ setup.R\nPipeline types explained:\n\nAnalysis Pipeline (type = \"analysis\")\nPerfect for: Multi-step data analysis with clear dependencies\n\n# Example pipeline structure created:\n# 1. Load and clean raw data\n# 2. Perform statistical analysis  \n# 3. Create visualizations\n# 4. Generate summary outputs\n# Each step only runs when dependencies change\n\n\n\nReport Pipeline (type = \"report\")\nPerfect for: Automated report generation with data dependencies\n\n# Example pipeline structure created:\n# 1. Process latest data\n# 2. Update analysis results\n# 3. Render report with current data\n# 4. Generate multiple output formats\n# Report auto-updates when data changes\n\n\n\nBasic Pipeline (type = \"basic\")\nPerfect for: Simple automation needs or learning targets\n\n# Example pipeline structure created:\n# 1. Load data\n# 2. Create summary\n# 3. Generate output\n# Minimal setup for getting started with targets\n\nWhen targets adds value: - Complex analyses: Multiple data sources, processing steps, modeling - Regular updates: Analysis that runs periodically with new data - Collaborative projects: Clear documentation of analysis dependencies - Long-running computations: Efficient re-running when inputs change"
  },
  {
    "objectID": "utilities-helpers.html#asset-management-functions",
    "href": "utilities-helpers.html#asset-management-functions",
    "title": "Utilities & Helpers",
    "section": "Asset Management Functions",
    "text": "Asset Management Functions\n\nupdate_cpal_assets() - Refresh Project Branding\nWhen to use: Update existing projects with the latest CPAL branding assets, logos, and styling.\n\n# Update all CPAL assets in current project\nupdate_cpal_assets()\n\n# Update specific asset types\nupdate_cpal_assets(components = \"css\")      # Only CSS files\nupdate_cpal_assets(components = \"images\")   # Only logos and images\nupdate_cpal_assets(components = \"all\")      # Everything (default)\n\n# Update assets in specific project\nupdate_cpal_assets(path = \"/path/to/project\", components = \"all\")\n\nWhat gets updated:\n\nCSS Components\n\nUpdated CPAL styling: Latest color schemes, typography, spacing\nNew theme variants: Additional styling options and improvements\nEnhanced accessibility: Improved contrast and screen reader compatibility\nCross-platform fixes: Better rendering across different browsers and devices\n\n\n\nImage Components\n\nNew logo variants: Additional size options, color variations\nUpdated brand assets: Refreshed logos, icons, favicons\nOptimized images: Better compression, web-optimized formats\nComplete icon sets: Expanded library of CPAL-branded icons\n\nPerfect for: - Legacy project updates: Bring old projects up to current CPAL standards - Periodic maintenance: Keep project branding current with organizational changes - New team members: Ensure consistent branding across inherited projects - Pre-publication refresh: Update assets before sharing or publishing\n\n\n\nget_cpal_asset() - Access Specific Assets\nWhen to use: Programmatically access specific CPAL assets for custom integrations or special use cases.\n\n# Get the main CPAL logo\nlogo_path &lt;- get_cpal_asset(\"CPAL_Logo_Teal.png\")\n\n# Get specific asset with category\nicon_path &lt;- get_cpal_asset(\"CPAL_Icon_White.png\", category = \"icons\")\nfavicon_path &lt;- get_cpal_asset(\"cpal-favicon.ico\", category = \"favicons\")\n\n# Use in your code\nif (!is.null(logo_path)) {\n  # Asset exists and can be used\n  knitr::include_graphics(logo_path)\n}\n\nAvailable asset categories: - logos: Full CPAL logos in multiple colors and formats - icons: CPAL icon variants for different backgrounds - favicons: Website favicon and app icons - css: CPAL styling files for different contexts\nPerfect for: - Custom integrations: Programmatic asset handling in functions - Conditional asset loading: Check asset availability before use - Dynamic branding: Runtime selection of appropriate assets - Template development: Building reusable templates with asset integration"
  },
  {
    "objectID": "utilities-helpers.html#font-utility-functions",
    "href": "utilities-helpers.html#font-utility-functions",
    "title": "Utilities & Helpers",
    "section": "Font Utility Functions",
    "text": "Font Utility Functions\n\ncpal_font_family() - Consistent Font Management\nWhen to use: Get the preferred CPAL font family for use in tables, plots, or other contexts where you need explicit font specification.\n\n# Get current CPAL font family\ncurrent_font &lt;- cpal_font_family()\n\n# Use in gt tables\ngt_table %&gt;%\n  tab_options(table.font.names = cpal_font_family())\n\n# Use in custom ggplot themes  \ntheme_custom &lt;- theme_minimal(base_family = cpal_font_family())\n\nWhat this function does: - Returns preferred font: ‚ÄúInter‚Äù if available, with intelligent fallbacks - Cross-platform compatibility: Handles font availability differences - Consistent with themes: Matches font choices in CPAL theme functions - Simple integration: One function call for font consistency\n\n\ncpal_font_family_fallback() - Reliable Font Backup\nWhen to use: Ensure font availability in contexts where Google Fonts might not be accessible (servers, restricted environments, print outputs).\n\n# Get reliable system font fallback\nfallback_font &lt;- cpal_font_family_fallback()\n\n# Use in server environments or when Google Fonts unavailable\ntheme_server_safe &lt;- theme_cpal(base_family = cpal_font_family_fallback())\n\n# Use in print-optimized outputs\nprint_theme &lt;- theme_cpal_print(base_family = cpal_font_family_fallback())"
  },
  {
    "objectID": "utilities-helpers.html#integration-workflows-and-examples",
    "href": "utilities-helpers.html#integration-workflows-and-examples",
    "title": "Utilities & Helpers",
    "section": "Integration Workflows and Examples",
    "text": "Integration Workflows and Examples\n\nTransforming Analysis to Full Project\nScenario: You have an existing data analysis that needs professional reporting and interactive dashboard capabilities.\n\n# Starting point: analysis-only project\n# your-analysis/\n# ‚îú‚îÄ‚îÄ analysis.R\n# ‚îú‚îÄ‚îÄ data/\n# ‚îî‚îÄ‚îÄ outputs/\n\n# Step 1: Add professional reporting capability\nuse_quarto_report()\n\n# Step 2: Add interactive dashboard for stakeholders  \nuse_shiny_dashboard()\n\n# Step 3: Add workflow automation for regular updates\nuse_targets(type = \"analysis\")\n\n# Step 4: Ensure latest CPAL branding\nupdate_cpal_assets()\n\n# Result: Comprehensive project with analysis + reporting + dashboard + automation\n\n\n\nUpgrading Legacy Project\nScenario: Inherited project needs CPAL standards and modern workflows.\n\n# Step 1: Update all branding to current CPAL standards\nupdate_cpal_assets(components = \"all\")\n\n# Step 2: Add presentation capability for stakeholder meetings\nuse_quarto_slides(filename = \"stakeholder-presentation.qmd\")\n\n# Step 3: Add workflow automation to handle manual processes\nuse_targets(type = \"report\")\n\n# Step 4: Create web documentation for the project\nuse_quarto_web()\n\n# Result: Modernized project with CPAL branding and professional workflows\n\n\n\nBuilding Modular Capabilities\nScenario: Different projects need different combinations of CPAL capabilities.\n\n# Project A: Analysis + Dashboard\nuse_shiny_dashboard()\nuse_targets(type = \"analysis\")\n\n# Project B: Analysis + Reporting + Presentation\nuse_quarto_report() \nuse_quarto_slides()\n\n# Project C: Comprehensive Documentation Hub\nuse_quarto_web()\nuse_quarto_slides()\nupdate_cpal_assets()\n\n# Each project gets exactly what it needs without unnecessary complexity"
  },
  {
    "objectID": "utilities-helpers.html#best-practices-and-guidelines",
    "href": "utilities-helpers.html#best-practices-and-guidelines",
    "title": "Utilities & Helpers",
    "section": "Best Practices and Guidelines",
    "text": "Best Practices and Guidelines\n\nFunction Selection Decision Guide\n\ngraph TD\n    A[What do you want to add to existing project?] --&gt; B[Reporting capability]\n    A --&gt; C[Interactive features]\n    A --&gt; D[Workflow automation]\n    A --&gt; E[Updated branding]\n    A --&gt; F[Font consistency]\n    \n    B --&gt; G[use_quarto_report for documents]\n    B --&gt; H[use_quarto_slides for presentations]  \n    B --&gt; I[use_quarto_web for multi-page sites]\n    \n    C --&gt; J[use_shiny_dashboard for comprehensive dashboards]\n    C --&gt; K[use_shiny_app for simple applications]\n    C --&gt; L[use_shiny_theme for styling existing apps]\n    \n    D --&gt; M[use_targets for workflow automation]\n    \n    E --&gt; N[update_cpal_assets for refreshed branding]\n    E --&gt; O[get_cpal_asset for specific assets]\n    \n    F --&gt; P[cpal_font_family for standard fonts]\n    F --&gt; Q[cpal_font_family_fallback for reliability]\n\n\n\n\n\n\n\n\n\n\n\n\nSafe Integration Practices\nAlways backup before major changes:\n\n# Check what exists before adding capabilities\nlist.files(\".\", recursive = TRUE)\n\n# Use overwrite = FALSE (default) to avoid accidents\nuse_quarto_report(overwrite = FALSE)\n\n# Test additions in development branch if using git\n\nProgressive enhancement strategy: 1. Start small: Add one capability at a time 2. Test integration: Verify each addition works with your existing code 3. Document changes: Update README and project documentation 4. Team communication: Inform collaborators about new capabilities\n\n\nPerformance Considerations\nAsset management: - Use update_cpal_assets() periodically, not constantly - Specify component types (\"css\" or \"images\") for targeted updates - Check asset availability with get_cpal_asset() before using in functions\nTemplate additions: - Add templates incrementally rather than all at once - Consider project complexity - not every project needs every capability - Test resource requirements - Shiny dashboards need more resources than reports"
  },
  {
    "objectID": "utilities-helpers.html#troubleshooting-utility-functions",
    "href": "utilities-helpers.html#troubleshooting-utility-functions",
    "title": "Utilities & Helpers",
    "section": "Troubleshooting Utility Functions",
    "text": "Troubleshooting Utility Functions\n\nFile Conflicts and Overwrites\nProblem: Utility function conflicts with existing files\n\n# Check what files would be created first\nuse_quarto_report(overwrite = FALSE)  # Will warn about conflicts\n\n# Backup important files before overwriting\nfile.copy(\"important_file.qmd\", \"important_file.qmd.backup\")\n\n# Then proceed with overwrite if needed\nuse_quarto_report(overwrite = TRUE)\n\n\n\nTemplate File Errors\nProblem: Template files not found or corrupted\n\n# Check package installation\nsystem.file(\"templates\", package = \"cpaltemplates\")\n\n# Verify specific template exists\nsystem.file(\"templates/quarto/report.qmd.tpl\", package = \"cpaltemplates\")\n\n# Reinstall package if templates missing\n# devtools::install_github(\"cpal-org/cpaltemplates\")\n\n\n\nAsset Update Issues\nProblem: Assets not updating or copying correctly\n\n# Check write permissions in project directory\nfile.access(\".\", mode = 2)  # Should return 0 for write access\n\n# Manually verify asset sources\nsystem.file(\"assets\", package = \"cpaltemplates\")\n\n# Force refresh with specific components\nupdate_cpal_assets(components = \"images\")\n\n\n\nFont Function Issues\nProblem: Font functions returning unexpected results\n\n# Check font setup status\nsetup_cpal_google_fonts(verbose = TRUE)\n\n# Verify font availability\nget_cpal_font_family(for_interactive = FALSE)\n\n# Use fallback if primary fonts unavailable\ncpal_font_family_fallback()"
  },
  {
    "objectID": "utilities-helpers.html#advanced-usage-patterns",
    "href": "utilities-helpers.html#advanced-usage-patterns",
    "title": "Utilities & Helpers",
    "section": "Advanced Usage Patterns",
    "text": "Advanced Usage Patterns\n\nScripted Project Enhancement\nAutomate utility application across multiple projects:\n\n# Function to standardize existing projects\nstandardize_project &lt;- function(project_path) {\n  # Update branding\n  update_cpal_assets(path = project_path)\n  \n  # Add reporting if not present\n  if (!file.exists(file.path(project_path, \"_quarto.yml\"))) {\n    use_quarto_report(path = project_path)\n  }\n  \n  # Add targets if complex analysis detected\n  r_files &lt;- list.files(file.path(project_path, \"R\"), pattern = \"\\\\.R$\")\n  if (length(r_files) &gt; 3) {\n    use_targets(path = project_path, type = \"analysis\")\n  }\n}\n\n# Apply to multiple projects\nproject_dirs &lt;- c(\"project-a\", \"project-b\", \"project-c\")\nlapply(project_dirs, standardize_project)\n\n\n\nConditional Capability Addition\nAdd capabilities based on project characteristics:\n\n# Smart capability addition based on project content\nenhance_project &lt;- function(path = \".\") {\n  # Add dashboard if data files detected\n  if (length(list.files(file.path(path, \"data\"))) &gt; 0) {\n    use_shiny_dashboard(path = path)\n  }\n  \n  # Add slides if presentation needed\n  if (any(grepl(\"presentation|slides\", list.files(path, recursive = TRUE)))) {\n    use_quarto_slides(path = path)\n  }\n  \n  # Add targets if multiple R scripts\n  r_scripts &lt;- list.files(file.path(path, \"R\"), pattern = \"\\\\.R$\") \n  if (length(r_scripts) &gt; 2) {\n    use_targets(path = path, type = \"analysis\")\n  }\n}\n\n\nCPAL utility functions provide flexible, non-destructive ways to enhance existing projects with professional capabilities. Use them to incrementally add CPAL standards, modern workflows, and advanced features to any R project without disrupting existing work."
  },
  {
    "objectID": "getting-started.html",
    "href": "getting-started.html",
    "title": "Getting Started with cpaltemplates",
    "section": "",
    "text": "Before diving into installation, it‚Äôs helpful to understand why cpaltemplates exists and when you should use it:\n\n\nWithout cpaltemplates, CPAL data team members often face: - Inconsistent visual branding across reports, presentations, and dashboards - Repetitive setup tasks when starting new analysis projects - Time spent on styling instead of focusing on analysis and insights - Difficulty onboarding new team members to CPAL‚Äôs preferred workflows and standards - Inconsistent project structures making collaboration and handoffs challenging\nWith cpaltemplates, you get: - Instant CPAL branding with consistent colors, fonts, and themes - Automated project setup with modern R best practices built-in - Standardized workflows that make team collaboration seamless - Professional-quality outputs with minimal setup time\n\n\n\n\n\n\n\n\n\n\nUse cpaltemplates when you‚Ä¶\nSkip it when you‚Ä¶\n\n\n\n\nCreate visualizations for CPAL reports, presentations, or external sharing\nAre doing quick, internal exploratory analysis with no sharing\n\n\nStart any new data analysis or reporting project\nAre working on non-CPAL projects or personal work\n\n\nWant consistent branding across your work\nNeed completely custom styling that conflicts with CPAL standards\n\n\nCollaborate with other CPAL data team members\nAre prototyping ideas where appearance doesn‚Äôt matter\n\n\nCreate dashboards or interactive visualizations\nAre working with existing projects that already have established styling"
  },
  {
    "objectID": "getting-started.html#why-use-cpaltemplates",
    "href": "getting-started.html#why-use-cpaltemplates",
    "title": "Getting Started with cpaltemplates",
    "section": "",
    "text": "Before diving into installation, it‚Äôs helpful to understand why cpaltemplates exists and when you should use it:\n\n\nWithout cpaltemplates, CPAL data team members often face: - Inconsistent visual branding across reports, presentations, and dashboards - Repetitive setup tasks when starting new analysis projects - Time spent on styling instead of focusing on analysis and insights - Difficulty onboarding new team members to CPAL‚Äôs preferred workflows and standards - Inconsistent project structures making collaboration and handoffs challenging\nWith cpaltemplates, you get: - Instant CPAL branding with consistent colors, fonts, and themes - Automated project setup with modern R best practices built-in - Standardized workflows that make team collaboration seamless - Professional-quality outputs with minimal setup time\n\n\n\n\n\n\n\n\n\n\nUse cpaltemplates when you‚Ä¶\nSkip it when you‚Ä¶\n\n\n\n\nCreate visualizations for CPAL reports, presentations, or external sharing\nAre doing quick, internal exploratory analysis with no sharing\n\n\nStart any new data analysis or reporting project\nAre working on non-CPAL projects or personal work\n\n\nWant consistent branding across your work\nNeed completely custom styling that conflicts with CPAL standards\n\n\nCollaborate with other CPAL data team members\nAre prototyping ideas where appearance doesn‚Äôt matter\n\n\nCreate dashboards or interactive visualizations\nAre working with existing projects that already have established styling"
  },
  {
    "objectID": "getting-started.html#installation",
    "href": "getting-started.html#installation",
    "title": "Getting Started with cpaltemplates",
    "section": "Installation",
    "text": "Installation\n\nInstall the Package\n\n# Install from GitHub (adjust method based on your setup)\n# devtools::install_github(\"childpovertyactionlab/cpaltemplates\")\n\n# Or if using renv in your project:\n# renv::install(\"childpovertyactionlab/cpaltemplates\")\n\nlibrary(cpaltemplates)\n\nWhy these installation methods? - GitHub installation ensures you get the latest version with newest features - renv integration maintains package version consistency across team projects and prevents dependency conflicts\n\n\nVerify Installation\n\n# Check that key functions are available\npackageVersion(\"cpaltemplates\")\n\n[1] '1.7.0'\n\n# Test basic functionality\nlibrary(ggplot2)\ntheme_cpal()  # Should return a ggplot2 theme object\n\nError in theme_cpal(): could not find function \"theme_cpal\"\n\n\nWhat this verification does: Confirms that cpaltemplates is properly installed and that its core theming functionality integrates correctly with ggplot2, which is essential for all CPAL data visualizations."
  },
  {
    "objectID": "getting-started.html#essential-setup",
    "href": "getting-started.html#essential-setup",
    "title": "Getting Started with cpaltemplates",
    "section": "Essential Setup",
    "text": "Essential Setup\n\n1. Set Up Google Fonts\nWhy fonts matter: Typography is a crucial part of CPAL‚Äôs visual identity. Using consistent, professional fonts across all outputs creates cohesive branding and improves readability. Without proper font setup, your plots will fall back to system defaults, which vary by computer and may not match CPAL standards.\nWhen to run this: Execute once per R session, typically at the start of your analysis. If you restart R, you‚Äôll need to run it again.\n\n# Download and register CPAL fonts\nsetup_cpal_google_fonts()\n\n# This will:\n# - Download Inter and Roboto from Google Fonts\n# - Register them for use in plots\n# - Set up fallbacks for cross-platform compatibility\n\nWhat happens behind the scenes: - Inter font becomes the default for all text elements (clean, modern sans-serif) - Roboto font provides fallback options and specialized use cases - Cross-platform compatibility ensures fonts work on Windows, Mac, and Linux - Caching means fonts are downloaded once and reused\nTroubleshooting: If fonts don‚Äôt appear to work, it‚Äôs usually due to system permissions or network restrictions. The function includes automatic fallbacks to system fonts that are visually similar.\n\n\n2. View Available Resources\nWhy explore first: Understanding what‚Äôs available helps you make informed choices about colors, themes, and styling options. This prevents the common problem of creating a visualization, then discovering there was a better palette or theme option available.\n\n# See all color palettes\nview_cpal_palettes(\"all\")\n\nError in view_cpal_palettes(\"all\"): could not find function \"view_cpal_palettes\"\n\n# View a specific palette interactively\nquick_palette()\n\nError in quick_palette(): could not find function \"quick_palette\"\n\n# Check available themes\nnames(formals(theme_cpal))  # See theme parameters\n\nError: object 'theme_cpal' not found\n\n\nWhat these functions show you: - view_cpal_palettes() displays every color palette side-by-side, helping you choose the right one for your data type and message . - quick_palette() opens an interactive interface to explore individual palettes, see color codes, and test accessibility. - Theme parameters show you all the customization options available for fine-tuning your visualizations."
  },
  {
    "objectID": "getting-started.html#your-first-cpal-styled-plot",
    "href": "getting-started.html#your-first-cpal-styled-plot",
    "title": "Getting Started with cpaltemplates",
    "section": "Your First CPAL-Styled Plot",
    "text": "Your First CPAL-Styled Plot\nWhy start with a complete example: Seeing immediate results builds confidence and demonstrates the value of cpaltemplates. This example incorporates the most commonly used functions and produces a professional-quality output.\n\nlibrary(ggplot2)\nlibrary(cpaltemplates)\n\n# Ensure fonts are set up\nsetup_cpal_google_fonts()\n\nSetting up CPAL Google Fonts...\nSetting up fonts for regular plots...\n   Inter downloaded and registered\n   Roboto downloaded and registered\n   Showtext enabled for regular plots\nSetting up fonts for interactive plots...\n   Inter registered for interactive plots\n   Roboto registered for interactive plots\nCPAL Google Fonts setup complete!\n   Primary: Inter | Secondary: Roboto\n\n# Create a sample plot\np &lt;- ggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl))) +\n  geom_point(size = 3, alpha = 0.8) +\n  scale_color_cpal(palette = \"main\") +\n  theme_cpal() +\n  labs(\n    title = \"Vehicle Weight vs Fuel Efficiency\",\n    subtitle = \"Grouped by number of cylinders\",\n    x = \"Weight (1000 lbs)\",\n    y = \"Miles per Gallon\",\n    color = \"Cylinders\",\n    caption = \"Data: mtcars dataset\"\n  )\n\n# Display the plot\nprint(p)\n\n\n\n\n\n\n\n# Save with CPAL standards\nsave_cpal_plot(p, \"my_first_cpal_plot.png\")\n\nBreaking down what each piece does:\n\nscale_color_cpal(palette = \"main\"): Applies CPAL‚Äôs primary color palette to the points. This ensures your categorical variables use colors that are visually distinct, accessible to colorblind users, and consistent with CPAL branding.\ntheme_cpal(): Transforms the overall appearance to match CPAL standards - adjusts fonts, grid lines, background, spacing, and text sizes for professional presentation quality.\nsave_cpal_plot(): Saves your plot with standardized dimensions, resolution, and file settings that work well for reports, presentations, and web use. No need to remember optimal DPI or size settings.\n\nWhen to use this approach: This pattern works for most CPAL visualizations. Use it as your default starting point, then customize as needed for specific requirements."
  },
  {
    "objectID": "getting-started.html#starting-a-new-project",
    "href": "getting-started.html#starting-a-new-project",
    "title": "Getting Started with cpaltemplates",
    "section": "Starting a New Project",
    "text": "Starting a New Project\n\nWhy Use cpaltemplates for Project Setup?\nThe traditional approach to starting a new R project often involves: - Creating a folder manually - Setting up an RStudio project file - Creating a basic folder structure - Configuring version control - Setting up package management - Writing boilerplate code for common tasks\nThis can take 30-60 minutes and often results in inconsistent structures across team members.\ncpaltemplates automates this into a 2-3 minute process with CPAL-optimized defaults, ensuring every team member starts with the same professional foundation.\n\n\nInteractive Project Setup\nWhen to use: When you‚Äôre not sure exactly what you need, want to be guided through options, or are new to project setup.\n\n# This will guide you through project setup with prompts\nstart_project()\n\nThe interactive setup will ask you about: - Project name and location: Where to create your project folder - Project type: Analysis, Quarto report, Shiny app, etc. (see table below) - Features to include: Git, renv, targets, etc. (see table below)\n- Whether to open in RStudio: Automatically switches to your new project\nBenefits of interactive mode: - Prevents mistakes: Guides you through decisions with explanations - Educational: Shows you what options exist and why you might choose them - Flexible: You can select exactly what you need for this specific project\n\n\nDirect Project Creation\nWhen to use: When you know exactly what you want and want to create projects quickly, especially for similar types of work.\n\n# Create an analysis project with modern workflow tools\nstart_project(\n  name = \"my-analysis-project\",\n  path = \"~/projects\",  # Adjust to your preferred location\n  project_type = \"analysis\",\n  features = c(\"renv\", \"git\", \"targets\"),\n  interactive = FALSE,\n  open = TRUE  # Opens in RStudio when complete\n)\n\nWhy these specific choices: - project_type = \"analysis\": Sets up folder structure optimized for data analysis with scripts, data folders, and output directories - features = c(\"renv\", \"git\", \"targets\"): - renv: Ensures package versions are consistent and reproducible - git: Sets up version control for tracking changes and collaboration - targets: Makes complex analyses reproducible and efficient with workflow automation - interactive = FALSE: Skips prompts and uses your specified settings - open = TRUE: Automatically opens the new project in RStudio\n\n\nAvailable Project Types\nChoosing the right project type sets up the appropriate folder structure, templates, and configuration for your specific use case:\n\n\n\n\n\n\n\n\n\nProject Type\nDescription\nBest For\nWhat You Get\n\n\n\n\n\"analysis\"\nData analysis with R scripts and notebooks\nExploratory analysis, research projects, one-off investigations\nScripts folder, data folder, outputs folder, analysis templates\n\n\n\"quarto-report\"\nQuarto document with CPAL styling\nReports for stakeholders, research publications, formal documentation\nQuarto templates, CPAL CSS styling, bibliography setup, assets folder\n\n\n\"quarto-slides\"\nQuarto presentation slides\nPresentations, workshops, conference talks\nSlide templates with CPAL branding, speaker notes, embedded plots\n\n\n\"shiny-dashboard\"\nShiny dashboard with CPAL theming\nInteractive dashboards for ongoing monitoring, executive summaries\nDashboard templates, CPAL UI theme, layout components\n\n\n\"shiny-app\"\nShiny application\nInteractive applications, data exploration tools, calculators\nApp structure, CPAL styling, deployment configuration\n\n\n\"package\"\nR package development\nCreating reusable functions, internal tools, sharing code\nPackage skeleton, documentation setup, testing framework\n\n\n\n\n\nAvailable Features\nFeatures add functionality to any project type. Choose based on your project‚Äôs complexity and collaboration needs:\n\n\n\n\n\n\n\n\n\nFeature\nDescription\nRecommended For\nWhat It Adds\n\n\n\n\n\"renv\"\nPackage management with renv\nAll projects - ensures reproducibility\nLockfile, isolated package library, consistent versions across team\n\n\n\"git\"\nGit version control setup\nAll collaborative projects\nGit repository, .gitignore, initial commit, README\n\n\n\"github\"\nGitHub repository creation\nProjects shared outside your computer\nAutomatic GitHub repo creation, remote connection\n\n\n\"targets\"\ntargets pipeline for reproducibility\nComplex analyses with multiple steps\nWorkflow automation, dependency tracking, caching\n\n\n\"tests\"\nTesting infrastructure\nPackage development, functions you‚Äôll reuse\nTesting framework, example tests, continuous integration setup\n\n\n\nCommon feature combinations: - Simple analysis: c(\"renv\", \"git\") - Version control and package management - Team project: c(\"renv\", \"git\", \"github\") - Add sharing via GitHub\n- Complex analysis: c(\"renv\", \"git\", \"targets\") - Add workflow automation - Package development: c(\"renv\", \"git\", \"tests\") - Add testing framework"
  },
  {
    "objectID": "getting-started.html#essential-workflow-functions",
    "href": "getting-started.html#essential-workflow-functions",
    "title": "Getting Started with cpaltemplates",
    "section": "Essential Workflow Functions",
    "text": "Essential Workflow Functions\n\nColor and Styling\nWhy color choice matters: Different types of data require different color approaches. Using the wrong palette can make your data harder to understand or even misleading.\n\n# Use CPAL color palettes in your plots\nscale_color_cpal(palette = \"main\")      # For color aesthetics\nscale_fill_cpal(palette = \"sequential\") # For fill aesthetics\n\nChoosing the right palette:\n\n\n\n\n\n\n\n\n\nPalette Type\nWhen to Use\nExample Data\nVisual Effect\n\n\n\n\n\"main\"\nCategorical data with no inherent order\nDifferent departments, product categories, survey responses\nVisually distinct colors that don‚Äôt imply ranking\n\n\n\"sequential\"\nContinuous data that goes from low to high\nPopulation counts, percentages, ages, income\nLight to dark progression shows magnitude\n\n\n\"diverging\"\nData with a meaningful center point\nChange from baseline, survey agreement scales, temperature anomalies\nDistinct colors for above/below center\n\n\n\"categorical\"\nMany categories (more than main palette)\nStates, school districts, detailed classifications\nExtended set of distinct colors\n\n\n\nCommon mistakes to avoid: - Using sequential palettes for categorical data (implies false ranking) - Using categorical palettes for continuous data (loses magnitude information) - Using too many categories with categorical palettes (becomes hard to distinguish)\n\n\nThemes for Different Outputs\n\n# Choose the right theme for your output:\ntheme_cpal()          # Default theme for reports\ntheme_cpal_minimal()  # Clean theme with minimal elements\ntheme_cpal_print()    # Optimized for printing\ntheme_cpal_web()      # Optimized for web display\ntheme_cpal_dark()     # Dark theme variant\ntheme_cpal_map()      # Specialized for maps\n\n\n\nSaving Plots\n\n# Save with standard CPAL dimensions and settings\nsave_cpal_plot(plot_object, \"filename.png\")\n\n# Available size presets:\nsave_cpal_plot(p, \"plot.png\", size = \"default\")  # 8x6 inches\nsave_cpal_plot(p, \"plot.png\", size = \"slide\")    # 10x7.5 inches  \nsave_cpal_plot(p, \"plot.png\", size = \"half\")     # 6x4 inches\nsave_cpal_plot(p, \"plot.png\", size = \"third\")    # 4x3 inches\n\n# Custom dimensions:\nsave_cpal_plot(p, \"plot.png\", size = c(12, 8))   # width, height in inches"
  },
  {
    "objectID": "getting-started.html#adding-templates-to-existing-projects",
    "href": "getting-started.html#adding-templates-to-existing-projects",
    "title": "Getting Started with cpaltemplates",
    "section": "Adding Templates to Existing Projects",
    "text": "Adding Templates to Existing Projects\nIf you already have a project and want to add CPAL templates:\n\n# Add Quarto reporting capability\nuse_quarto_report()\n\n# Add Shiny dashboard templates\nuse_shiny_dashboard()\n\n# Add targets pipeline\nuse_targets()\n\n# Update CPAL assets (logos, CSS, etc.)\nupdate_cpal_assets()"
  },
  {
    "objectID": "getting-started.html#common-workflows",
    "href": "getting-started.html#common-workflows",
    "title": "Getting Started with cpaltemplates",
    "section": "Common Workflows",
    "text": "Common Workflows\n\nBasic Data Visualization Workflow\n\nlibrary(cpaltemplates)\nlibrary(ggplot2)\n\n# 1. Set up fonts\nsetup_cpal_google_fonts()\n\n# 2. Create your plot\nplot &lt;- your_data |&gt;\n  ggplot(aes(x = variable1, y = variable2)) +\n  geom_point() +\n  scale_color_cpal() +\n  theme_cpal() +\n  labs(title = \"Your Title\")\n\n# 3. Save with CPAL standards\nsave_cpal_plot(plot, \"analysis_plot.png\")\n\n\n\nReport Generation Workflow\n\n# 1. Start a Quarto report project\nstart_project(\n  name = \"quarterly-report\",\n  project_type = \"quarto-report\",\n  features = c(\"renv\", \"git\")\n)\n\n# 2. Or add reporting to existing project\nuse_quarto_report()\n\n# 3. Use CPAL styling in your Quarto documents\n# (Templates will include proper YAML headers and CSS)"
  },
  {
    "objectID": "getting-started.html#troubleshooting-common-issues",
    "href": "getting-started.html#troubleshooting-common-issues",
    "title": "Getting Started with cpaltemplates",
    "section": "Troubleshooting Common Issues",
    "text": "Troubleshooting Common Issues\n\nFont Issues\nIf fonts aren‚Äôt displaying correctly:\n\n# Force refresh fonts\nsetup_cpal_google_fonts(force_refresh = TRUE)\n\n# Check what fonts are available\nget_cpal_font_family()\n\n# Use fallback fonts if needed\ntheme_cpal(base_family = cpal_font_family_fallback())\n\n\n\nColor Palette Issues\n\n# View palettes to check they're loading\nview_cpal_palettes(\"all\")\n\n# Check specific palette\ncpal_colors(\"main\")  # Should return vector of hex colors\n\n\n\nProject Creation Issues\n\n# Check if you have write permissions to the target directory\n# Make sure RStudio is not already open with a project\n# Try with overwrite = TRUE if directory exists:\nstart_project(name = \"test\", overwrite = TRUE)"
  },
  {
    "objectID": "getting-started.html#next-steps",
    "href": "getting-started.html#next-steps",
    "title": "Getting Started with cpaltemplates",
    "section": "Next Steps",
    "text": "Next Steps\nNow that you have the basics:\n\nExplore Function Groups: Check out detailed documentation for:\n\n\nColors & Palettes - Complete color system\nThemes & Styling - All theme variants and customization\nProject Setup - Advanced project configuration\n\n\nSee Real Examples: Visit Workflow Integration for complete workflow examples\nInteractive Features: Learn about interactive plots and maps in Interactive Features"
  },
  {
    "objectID": "getting-started.html#quick-reference",
    "href": "getting-started.html#quick-reference",
    "title": "Getting Started with cpaltemplates",
    "section": "Quick Reference",
    "text": "Quick Reference\n\nMost Important Functions\n\nsetup_cpal_google_fonts() - Set up fonts (run once per session)\nstart_project() - Create new CPAL project\ntheme_cpal() - Apply CPAL theme to plots\nscale_color_cpal() / scale_fill_cpal() - Use CPAL colors\nsave_cpal_plot() - Save plots with CPAL standards\nview_cpal_palettes() - See available colors\n\n\n\nGetting Help\n\nUse ?function_name for detailed help on any function\nCheck Troubleshooting for common issues\nContact CPAL Data Team for support\n\n\nReady to start using cpaltemplates in your workflow? Pick a function group from the navigation menu to dive deeper, or jump into Workflow Integration for complete examples."
  }
]