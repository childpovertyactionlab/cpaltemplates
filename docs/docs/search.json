[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "cpaltemplates",
    "section": "",
    "text": "The cpaltemplates package transforms how the Child Poverty Action Lab (CPAL) data team creates analyses, reports, and visualizations. Instead of spending time on formatting and setup, you can focus on insights and impact.\n\n\nThe Challenge: CPAL data team members were spending significant time on repetitive tasks: - 30-60 minutes setting up each new project with proper folder structure, version control, and dependencies - Inconsistent branding across visualizations, reports, and presentations\n- Manual styling of every plot, table, and document to match CPAL standards - Difficult onboarding for new team members learning CPAL‚Äôs preferred workflows - Accessibility gaps when visualizations weren‚Äôt tested for colorblind users or proper contrast\nThe Solution: cpaltemplates automates professional best practices: - Quick project setup with enterprise-grade workflows built-in - Automatic CPAL branding for all visualizations, reports, and dashboards - Built-in accessibility ensuring inclusive design from the start - Standardized workflows that scale from simple analysis to complex multi-output projects - Team consistency with shared templates, functions, and quality standards\n\n\n\n\n\n\n\n\n\n\n\nBefore cpaltemplates\nWith cpaltemplates\nTime Saved\n\n\n\n\nManual project setup with inconsistent structures\nstart_project() with standardized templates\n45+ minutes per project\n\n\nCustom styling each plot individually\ntheme_cpal() + scale_color_cpal() automatic styling\n10+ minutes per visualization\n\n\nManual logo placement and sizing\nadd_cpal_logo() with smart positioning\n5+ minutes per branded output\n\n\nLearning complex interactive libraries\ncpal_interactive() with one-function conversion\n30+ minutes per interactive viz\n\n\nManual accessibility checking\ncheck_plot_accessibility() automated testing\n15+ minutes per visualization\n\n\nInconsistent table formatting\ncpal_table_gt() professional styling\n20+ minutes per table\n\n\n\nTotal time savings: 2+ hours per typical analysis project, plus immeasurable improvements in consistency and professional quality."
  },
  {
    "objectID": "index.html#welcome-to-cpaltemplates",
    "href": "index.html#welcome-to-cpaltemplates",
    "title": "cpaltemplates",
    "section": "",
    "text": "The cpaltemplates package transforms how the Child Poverty Action Lab (CPAL) data team creates analyses, reports, and visualizations. Instead of spending time on formatting and setup, you can focus on insights and impact.\n\n\nThe Challenge: CPAL data team members were spending significant time on repetitive tasks: - 30-60 minutes setting up each new project with proper folder structure, version control, and dependencies - Inconsistent branding across visualizations, reports, and presentations\n- Manual styling of every plot, table, and document to match CPAL standards - Difficult onboarding for new team members learning CPAL‚Äôs preferred workflows - Accessibility gaps when visualizations weren‚Äôt tested for colorblind users or proper contrast\nThe Solution: cpaltemplates automates professional best practices: - Quick project setup with enterprise-grade workflows built-in - Automatic CPAL branding for all visualizations, reports, and dashboards - Built-in accessibility ensuring inclusive design from the start - Standardized workflows that scale from simple analysis to complex multi-output projects - Team consistency with shared templates, functions, and quality standards\n\n\n\n\n\n\n\n\n\n\n\nBefore cpaltemplates\nWith cpaltemplates\nTime Saved\n\n\n\n\nManual project setup with inconsistent structures\nstart_project() with standardized templates\n45+ minutes per project\n\n\nCustom styling each plot individually\ntheme_cpal() + scale_color_cpal() automatic styling\n10+ minutes per visualization\n\n\nManual logo placement and sizing\nadd_cpal_logo() with smart positioning\n5+ minutes per branded output\n\n\nLearning complex interactive libraries\ncpal_interactive() with one-function conversion\n30+ minutes per interactive viz\n\n\nManual accessibility checking\ncheck_plot_accessibility() automated testing\n15+ minutes per visualization\n\n\nInconsistent table formatting\ncpal_table_gt() professional styling\n20+ minutes per table\n\n\n\nTotal time savings: 2+ hours per typical analysis project, plus immeasurable improvements in consistency and professional quality."
  },
  {
    "objectID": "index.html#package-scope-and-capabilities",
    "href": "index.html#package-scope-and-capabilities",
    "title": "cpaltemplates",
    "section": "Package Scope and Capabilities",
    "text": "Package Scope and Capabilities\ncpaltemplates provides 59 functions across 7 integrated systems that work together seamlessly:\n\n\nüé® Visual Design Foundation\nColors & Palettes (7 functions) - 23 distinct color palettes Designed for different data types - Accessibility built-in: All palettes tested for colorblind users - Brand consistency: Midnight (#004855) as primary brand color, plus teal, pink, orange, gold - Data-appropriate: Sequential, diverging, categorical palettes for proper data representation\n\n# Automatic brand-consistent colors\nscale_fill_cpal(palette = \"main\")\nview_all_palettes()  # Interactive exploration\n\nThemes & Styling (8 functions)\n- 6 theme variants optimized for different outputs (reports, presentations, web, print, maps, dark mode) - Google Fonts integration: Inter and Roboto with cross-platform fallbacks - Customizable parameters: Grid lines, axis styling, legend positioning - Session-wide consistency: set_theme_cpal() for automatic application\n\n# Professional theming for any context\ntheme_cpal()           # Most reports and presentations\ntheme_cpal_dark()      # Dark backgrounds and night viewing\ntheme_cpal_print()     # PDFs and printed materials\n\n\n\nüìä Data Presentation Tools\nPlots & Visualizations (8 functions) - Professional output management: save_cpal_plot() with preset dimensions for different uses - Smart logo integration: add_cpal_logo() with automatic theme detection - Accessibility assurance: check_plot_accessibility() for inclusive design - Explicit scale control: Clear continuous vs.¬†discrete color mapping\n\n# Professional plot workflow\nplot + theme_cpal() |&gt; \n  add_cpal_logo() |&gt;\n  save_cpal_plot(\"output.png\", size = \"slide\")\n\nTables & GT Styling (4 functions) - Static tables: GT integration with CPAL branding and advanced formatting - Interactive tables: Reactable integration with sorting, filtering, data bars - Consistent typography: Automatic font coordination with plot themes - Multiple output formats: Optimized for reports, dashboards, presentations\n\n# Professional table creation\ncpal_table_gt(data, title = \"Executive Summary\",\n              highlight_columns = c(\"key\", \"metrics\"))\n\n\n\n\n\n\n‚ö° Interactive & Dynamic Features\nInteractive Features (9 functions) - ggiraph integration: Transform any CPAL plot into interactive exploration - Geographic mapping: Mapbox integration with Dallas-area defaults - Font management: Google Fonts working correctly in web contexts - Specialized interactivity: Point, line, column, polygon interactive geoms\n\n# Interactive visualization\nggplot(data, aes(x = x, y = y)) +\n  cpal_point_interactive(aes(tooltip = \"details\")) +\n  theme_cpal() |&gt;\n  cpal_interactive()\n\n\n\nüõ†Ô∏è Project Infrastructure\nProject Setup (17 functions) - 6 project types: Analysis, Quarto reports/slides/web, Shiny dashboards/apps, R packages - Modern workflows: renv, git, GitHub, targets, testing integration - Template system: Professional starting code for every project type - CPAL asset integration: Logos, CSS, fonts automatically included\n\n# Complete project setup in minutes\nstart_project(\n  name = \"impact-analysis\",\n  project_type = \"analysis\", \n  features = c(\"renv\", \"git\", \"targets\")\n)\n\n\n\n\n\nüîß Enhancement & Management\nUtilities & Helpers (12 functions) - Existing project enhancement: Add CPAL capabilities to any project - Asset management: Update branding, access specific logos/CSS - Template addition: Quarto reports, Shiny apps, workflow automation - Font utilities: Consistent typography across all contexts\n\n# Enhance existing projects\nuse_quarto_report()     # Add professional reporting\nuse_shiny_dashboard()   # Add interactive dashboard\nupdate_cpal_assets()    # Refresh branding\n\n\n\nüìã Team Collaboration\nWorkflow Integration - Complete end-to-end examples: 5 comprehensive workflow types - Team standardization: Shared functions and quality standards - Automation patterns: Reproducible analysis pipelines - Knowledge sharing: Documentation and troubleshooting resources\n\n# Team-standard project creation\ncreate_cpal_standard_project(\"analysis-name\", \n                            lead_analyst = \"Your Name\")"
  },
  {
    "objectID": "index.html#who-should-use-cpaltemplates",
    "href": "index.html#who-should-use-cpaltemplates",
    "title": "cpaltemplates",
    "section": "Who Should Use cpaltemplates",
    "text": "Who Should Use cpaltemplates\n\nPerfect for CPAL Data Team Members Who‚Ä¶\n\n\n\n\n\n\n\n\nYour Situation\nHow cpaltemplates Helps\nKey Benefits\n\n\n\n\nCreate visualizations for reports or presentations\nAutomatic CPAL branding, professional themes, accessibility testing\nConsistent brand presence, time savings\n\n\nStart new analysis projects regularly\nAutomated project setup with best practices\n45+ minutes saved per project\n\n\nCollaborate with other team members\nStandardized templates and workflows\nSeamless collaboration and handoffs\n\n\nCreate interactive dashboards or applications\nPre-configured Shiny templates with CPAL theming\nProfessional dashboards without UI expertise\n\n\nGenerate regular reports or presentations\nQuarto templates with CPAL branding and automation\nConsistent professional outputs\n\n\nNeed to make visualizations accessible\nBuilt-in accessibility testing and colorblind-safe palettes\nInclusive design without expertise\n\n\nWant to follow modern R best practices\nrenv, git, targets integration in all project templates\nProfessional workflows without configuration\n\n\n\n\n\nLess Useful If You‚Ä¶\n\nWork primarily on non-CPAL projects (package is CPAL-specific)\nNeed completely custom styling that conflicts with CPAL brand standards\nDo only quick, internal exploratory analysis with no sharing or presentation needs\nWork in environments where package installation is restricted"
  },
  {
    "objectID": "index.html#quick-start-journey",
    "href": "index.html#quick-start-journey",
    "title": "cpaltemplates",
    "section": "Quick Start Journey",
    "text": "Quick Start Journey\n\nFirst-Time Setup\n\n# 1. Install cpaltemplates (one-time)\n# devtools::install_github(\"cpal-org/cpaltemplates\")\n\n# 2. Load and verify\nlibrary(cpaltemplates)\npackageVersion(\"cpaltemplates\")\n\n# 3. Set up Google Fonts (once per R session)\nsetup_cpal_google_fonts()\n\n# 4. Explore available resources\nview_all_palettes()  # See all color options\n\n\n\nCreate Your First Professional Visualization\n\nlibrary(ggplot2)\n\n# Your first CPAL-branded visualization\nfirst_plot &lt;- ggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl))) +\n  geom_point(size = 3, alpha = 0.8) +\n  scale_color_cpal(palette = \"main\") +     # CPAL colors\n  theme_cpal() +                           # CPAL theme\n  labs(\n    title = \"Vehicle Weight vs Fuel Efficiency\",\n    subtitle = \"Professional visualization with CPAL branding\",\n    x = \"Weight (1000 lbs)\",\n    y = \"Miles per Gallon\", \n    color = \"Cylinders\",\n    caption = \"Data: mtcars dataset\"\n  ) |&gt;\n  add_cpal_logo(position = \"top-right\") |&gt; # CPAL logo\n  save_cpal_plot(\"my_first_cpal_plot.png\") # Professional output\n\n# Check accessibility\ncheck_plot_accessibility(first_plot)\n\n\n\nStart Your First CPAL Project\n\n# Interactive setup guides you through choices\nstart_project()\n\n# Or direct setup if you know what you want\nstart_project(\n  name = \"my-first-analysis\", \n  project_type = \"analysis\",\n  features = c(\"renv\", \"git\", \"targets\")\n)\n\n# Project opens automatically with:\n# ‚úì Professional folder structure\n# ‚úì CPAL assets and branding\n# ‚úì Modern workflow tools (renv, git, targets)\n# ‚úì Template code to get started\n# ‚úì Documentation and next steps"
  },
  {
    "objectID": "index.html#real-world-impact-examples",
    "href": "index.html#real-world-impact-examples",
    "title": "cpaltemplates",
    "section": "Real-World Impact Examples",
    "text": "Real-World Impact Examples\n\nBefore and After: Quarterly Report Creation\nTraditional Approach (4-6 hours): 1. Set up project folders manually (15 min) 2. Configure Quarto with custom CSS (30 min) 3. Find and resize CPAL logos (15 min) 4. Create each visualization with manual styling (45 min each √ó 6 charts = 4.5 hours) 5. Format tables manually (30 min) 6. Test outputs and fix inconsistencies (45 min)\nWith cpaltemplates (45 minutes): 1. start_project(project_type = \"quarto-report\") (2 min) 2. Write analysis with automatic CPAL styling (30 min) 3. check_plot_accessibility() on all outputs (5 min) 4. quarto::quarto_render() for professional report (3 min) 5. Share with stakeholders (5 min)\nResult: Same professional quality, 5+ hours saved, more consistent branding, built-in accessibility.\n\n\nBefore and After: Team Onboarding\nTraditional Approach (2-3 days): - Learn CPAL color codes and brand guidelines - Set up development environment manually - Learn project structure conventions - Understand output formatting requirements - Create first visualization with proper styling\nWith cpaltemplates (2-3 hours): - library(cpaltemplates) and setup_cpal_google_fonts() - start_project() with guided setup - Follow Getting Started Guide - Create professional visualization with automatic CPAL styling - Access team knowledge through documentation and Notion guide\nResult: New team members productive immediately with professional-quality outputs."
  },
  {
    "objectID": "index.html#documentation-architecture",
    "href": "index.html#documentation-architecture",
    "title": "cpaltemplates",
    "section": "Documentation Architecture",
    "text": "Documentation Architecture\nThis documentation system is designed for both quick reference and comprehensive learning:\n\n\nFunction Reference Documentation\nCore Systems: - Colors & Palettes - 23 palettes, color theory, accessibility guidance - Themes & Styling - 8 themes, typography, logo integration - Plots & Visualizations - 8 functions, professional output management - Interactive Features - 9 functions, ggiraph, mapping, dashboards\nData Presentation: - Tables & GT Styling - 4 functions, static and interactive tables\n\n\nWorkflow and Integration Guides\nProject Management: - Project Setup - 17 functions, 6 project types, modern workflows - Utilities & Helpers - 12 functions, existing project enhancement\nTeam Resources: - Workflow Integration - Complete end-to-end workflow examples - Troubleshooting - Problem-solving guide with team support resources\n\n\n\nDocumentation Standards\nEach documentation page includes: - Why and when guidance: Context for choosing functions and approaches - Real-world examples: Complete, working code that solves actual problems - Decision support: Tables, flowcharts, and matrices for choosing optimal approaches - Troubleshooting: Common issues and diagnostic code for each function group - Best practices: Professional standards and quality guidelines - Team integration: How functions work together and with team workflows"
  },
  {
    "objectID": "index.html#getting-started-path",
    "href": "index.html#getting-started-path",
    "title": "cpaltemplates",
    "section": "Getting Started Path",
    "text": "Getting Started Path\n\nFor New Team Members\n\nStart here: Getting Started Guide - Installation, setup, first plot, project creation\nExplore capabilities: Browse function group documentation to understand what‚Äôs available\nFollow workflows: Workflow Integration for complete project examples\nGet help: Troubleshooting and CPAL Data Team Notion Guide for support\n\n\n\nFor Experienced R Users\n\nQuick overview: This page for package scope and capabilities\nFunction reference: Jump directly to relevant function group documentation\nIntegration patterns: Workflow Integration for advanced usage\nEnhancement: Utilities & Helpers for adding to existing projects\n\n\n\nFor Team Leaders and Project Managers\n\nImpact assessment: Review time savings and consistency benefits above\nTeam adoption: Project Setup for standardized team workflows\nQuality assurance: Built-in accessibility and branding consistency features\nCollaboration: Workflow Integration for multi-person project coordination"
  },
  {
    "objectID": "index.html#package-philosophy-and-design-principles",
    "href": "index.html#package-philosophy-and-design-principles",
    "title": "cpaltemplates",
    "section": "Package Philosophy and Design Principles",
    "text": "Package Philosophy and Design Principles\n\nAutomation Over Configuration\nSmart defaults that work immediately: - Colors automatically match CPAL brand guidelines - Themes apply professional styling without customization - Project templates include modern best practices by default - Interactive features inherit CPAL styling automatically\nCustomization when needed: - All functions provide parameters for specific adjustments - Themes can be modified while maintaining brand consistency - Project types can be mixed and enhanced with utility functions - Advanced users can build on CPAL foundations\n\n\nAccessibility First\nInclusive design built-in: - All color palettes tested for colorblind accessibility - Automated accessibility checking with check_plot_accessibility() - High contrast themes available for visibility needs - Screen reader friendly table structures and labeling\n\n\nTeam Collaboration Focus\nDesigned for multi-person teams: - Consistent outputs regardless of individual styling preferences - Shared templates and standards reduce coordination overhead - Version control and reproducibility built into project templates - Knowledge sharing through documentation and team resources\n\n\nProgressive Enhancement\nStart simple, add complexity as needed: - Basic functions work with minimal parameters - Advanced features available for complex requirements\n- Existing projects can be enhanced incrementally - New capabilities can be added without disrupting existing work"
  },
  {
    "objectID": "index.html#success-stories-and-use-cases",
    "href": "index.html#success-stories-and-use-cases",
    "title": "cpaltemplates",
    "section": "Success Stories and Use Cases",
    "text": "Success Stories and Use Cases\n\nTypical CPAL Use Cases\n\n\n\n\n\n\n\n\nProject Type\ncpaltemplates Functions Used\nOutcome\n\n\n\n\nQuarterly program evaluation\nColors, themes, plots, project setup, reporting\nProfessional stakeholder report with consistent branding\n\n\nBoard presentation preparation\nAll visualization functions + slides + interactive dashboard\nCoordinated presentation package with live data exploration\n\n\nOngoing program monitoring\nInteractive features, dashboard templates, automation\nReal-time monitoring system with automated alerts\n\n\nResearch paper publication\nFull function suite with accessibility focus\nReproducible research with multiple output formats\n\n\nNew team member onboarding\nProject templates, documentation, troubleshooting\nProductive team member within hours instead of days\n\n\n\n\n\nMeasurable Team Benefits\nQuality improvements: - Brand consistency across all team outputs - Universal accessibility compliance through automated testing - Reproducible workflows with version control and dependency management - Professional presentation quality without design expertise"
  },
  {
    "objectID": "index.html#technical-requirements-and-compatibility",
    "href": "index.html#technical-requirements-and-compatibility",
    "title": "cpaltemplates",
    "section": "Technical Requirements and Compatibility",
    "text": "Technical Requirements and Compatibility\n\nSystem Requirements\nMinimum requirements: - R 4.0+ (required for modern package features) - RStudio (recommended for optimal project integration) - Internet connection (for Google Fonts and template downloads)\nOptional but recommended: - Git (for version control features) - Quarto (for advanced reporting capabilities)\n- Modern web browser (for interactive features)\n\n\nDependency Management\nCore dependencies (automatically installed): - ggplot2, cli, fs - Essential for all cpaltemplates functions\nOptional dependencies (installed as needed): - ggiraph, reactable, mapgl - For interactive features - gt - For advanced table formatting - renv, gert, yaml - For project management features - cowplot, magick - For logo integration\nGraceful degradation: All functions provide helpful error messages and alternatives when optional packages are missing."
  },
  {
    "objectID": "index.html#getting-support-and-contributing",
    "href": "index.html#getting-support-and-contributing",
    "title": "cpaltemplates",
    "section": "Getting Support and Contributing",
    "text": "Getting Support and Contributing\n\nWhen You Need Help\n\nFunction-specific help: Use ?function_name for detailed parameter documentation\nCommon issues: Check Troubleshooting for systematic problem-solving\nTeam support: Use CPAL Data Team Notion Guide for team-specific guidance and to connect with team members\nAdvanced workflows: Review Workflow Integration for complete examples\n\n\n\nContributing to Team Knowledge\nHelp improve cpaltemplates for everyone: - Document solutions: Add new troubleshooting discoveries to CPAL Data Team Notion Guide - Share workflows: Contribute successful project patterns to team knowledge base - Report issues: Use team communication channels to report bugs or suggest improvements - Mentor others: Help onboard new team members using your cpaltemplates experience\n\n\nPackage Evolution\ncpaltemplates continues evolving based on CPAL team needs: - New functions added based on common team requirements - Templates updated to reflect changing best practices - Branding assets refreshed to match organizational updates - Documentation improved based on team feedback and common questions"
  },
  {
    "objectID": "index.html#ready-to-transform-your-workflow",
    "href": "index.html#ready-to-transform-your-workflow",
    "title": "cpaltemplates",
    "section": "Ready to Transform Your Workflow?",
    "text": "Ready to Transform Your Workflow?\nStart with what you need most:\n\n\nNew to cpaltemplates?\nGetting Started ‚Üí\nInstallation, setup, and your first professional visualization in 10 minutes.\n\n\nNeed specific functions?\nFunction Reference ‚Üí\nDetailed documentation for colors, themes, plots, tables, and interactive features.\n\n\nWant complete workflows?\nIntegration Examples ‚Üí\nEnd-to-end workflows for analysis, reporting, dashboards, and team collaboration.\n\n\n\ncpaltemplates is developed and maintained by the CPAL Data Team to transform data analysis workflows from time-consuming, inconsistent processes into efficient, professional, and collaborative systems that amplify your analytical impact."
  },
  {
    "objectID": "colors-palettes.html",
    "href": "colors-palettes.html",
    "title": "Colors & Palettes",
    "section": "",
    "text": "Color is one of the most powerful tools in data visualization, but it‚Äôs also one of the most commonly misused. Poor color choices can mislead your audience, make data inaccessible to colorblind users, or simply make your visualizations look unprofessional.\nThe cpaltemplates color system solves these problems by providing:\n\nBrand consistency: All colors align with CPAL‚Äôs visual identity\nAccessibility built-in: All palettes are tested for colorblind accessibility\n\nData-type appropriate: Different palettes optimized for different kinds of data\nProfessional quality: Colors chosen by design professionals, not left to chance\n\n\n\n\n\n\n\n\n\n\n\nCommon Problem\nWhy It Happens\nCPAL Solution\n\n\n\n\nCategories look ranked\nUsing sequential colors for unordered categories\nCategorical palettes with distinct, unordered colors\n\n\nCan‚Äôt see differences\nColors too similar or poor contrast\nHigh-contrast palettes tested for visibility\n\n\nColorblind users excluded\nNo testing for color vision deficiency\nAll palettes verified for colorblind accessibility\n\n\nInconsistent branding\nRandom color choices across projects\nStandardized brand color system\n\n\nData misinterpreted\nWrong palette type for data structure\nClear guidance on palette selection"
  },
  {
    "objectID": "colors-palettes.html#why-color-matters-in-data-visualization",
    "href": "colors-palettes.html#why-color-matters-in-data-visualization",
    "title": "Colors & Palettes",
    "section": "",
    "text": "Color is one of the most powerful tools in data visualization, but it‚Äôs also one of the most commonly misused. Poor color choices can mislead your audience, make data inaccessible to colorblind users, or simply make your visualizations look unprofessional.\nThe cpaltemplates color system solves these problems by providing:\n\nBrand consistency: All colors align with CPAL‚Äôs visual identity\nAccessibility built-in: All palettes are tested for colorblind accessibility\n\nData-type appropriate: Different palettes optimized for different kinds of data\nProfessional quality: Colors chosen by design professionals, not left to chance\n\n\n\n\n\n\n\n\n\n\n\nCommon Problem\nWhy It Happens\nCPAL Solution\n\n\n\n\nCategories look ranked\nUsing sequential colors for unordered categories\nCategorical palettes with distinct, unordered colors\n\n\nCan‚Äôt see differences\nColors too similar or poor contrast\nHigh-contrast palettes tested for visibility\n\n\nColorblind users excluded\nNo testing for color vision deficiency\nAll palettes verified for colorblind accessibility\n\n\nInconsistent branding\nRandom color choices across projects\nStandardized brand color system\n\n\nData misinterpreted\nWrong palette type for data structure\nClear guidance on palette selection"
  },
  {
    "objectID": "colors-palettes.html#cpal-color-system-overview",
    "href": "colors-palettes.html#cpal-color-system-overview",
    "title": "Colors & Palettes",
    "section": "CPAL Color System Overview",
    "text": "CPAL Color System Overview\nThe cpaltemplates package provides 23 distinct color palettes organized into 4 main categories, each designed for specific types of data and use cases:\n\n\n\n\n\n\n\n\n\nCategory\nPalettes Available\nPurpose\nWhen to Use\n\n\n\n\nBrand Colors\n2 palettes\nCore CPAL colors\nIndividual color needs, brand elements\n\n\nCategorical\n8 palettes\nUnordered categories\nGroups, categories, classifications\n\n\nSequential\n6 palettes\nContinuous data\nQuantities, ranks, progressions\n\n\nDiverging\n3 palettes\nData with meaningful center\nChanges from baseline, comparisons\n\n\n\n\nThe Science Behind the Choices\nWhy these specific colors? CPAL‚Äôs color palettes are built on color theory principles:\n\nPerceptual uniformity: Equal visual steps between colors represent equal data steps\nCultural considerations: Colors chosen to avoid cultural biases or negative associations\nTechnical requirements: Colors work across digital displays, print, and projection\nAccessibility standards: Meet WCAG guidelines for color contrast and colorblind visibility"
  },
  {
    "objectID": "colors-palettes.html#core-functions-overview",
    "href": "colors-palettes.html#core-functions-overview",
    "title": "Colors & Palettes",
    "section": "Core Functions Overview",
    "text": "Core Functions Overview\ncpaltemplates provides 7 main color functions that work together to give you complete control over CPAL‚Äôs color system:\n\n\n\n\n\n\n\n\n\nFunction\nPurpose\nReturns\nPrimary Use\n\n\n\n\ncpal_colors()\nGet specific colors or palettes\nVector of hex codes\nBuilding custom visualizations\n\n\nscale_color_cpal()\nApply CPAL colors to ggplot2 color aesthetic\nggplot2 scale object\nAutomatic ggplot2 integration\n\n\nscale_fill_cpal()\nApply CPAL colors to ggplot2 fill aesthetic\nggplot2 scale object\nAutomatic ggplot2 integration\n\n\nview_all_palettes()\nDisplay all available palettes\nVisual grid display\nChoosing the right palette\n\n\nview_palette()\nInteractive palette explorer\nInteractive display\nDetailed palette exploration\n\n\ncpal_display_palettes()\nShow specific palettes with hex codes\nVisual display\nReference and documentation"
  },
  {
    "objectID": "colors-palettes.html#brand-colors-cpals-core-identity",
    "href": "colors-palettes.html#brand-colors-cpals-core-identity",
    "title": "Colors & Palettes",
    "section": "Brand Colors: CPAL‚Äôs Core Identity",
    "text": "Brand Colors: CPAL‚Äôs Core Identity\n\nPrimary Colors\nWhen to use: Individual color needs, accent colors, brand elements in visualizations.\n\n# Get CPAL's primary brand colors\ncpal_colors(\"primary\")\n\n# Access individual colors by name\ncpal_colors(\"midnight\")  # CPAL's primary brand color: #004855\ncpal_colors(\"teal\")      # CPAL's signature teal: #008097\ncpal_colors(\"pink\")      # Brand pink: #C3257B  \ncpal_colors(\"orange\")    # Brand orange: #ED683F\ncpal_colors(\"gold\")      # Brand gold: #AB8C01\n\nCPAL‚Äôs primary color palette: - Midnight (#004855): CPAL‚Äôs main brand color, deep and authoritative, used throughout the organization - Teal (#008097): CPAL‚Äôs signature color, professional and trustworthy - Pink (#C3257B): Energy and passion, used for highlights and callouts - Orange (#ED683F): Warmth and engagement, great for calls-to-action - Gold (#AB8C01): Premium feel, used for emphasis and key findings\n\n\nExtended Colors\nWhen to use: When you need more color options than the primary set, but still want brand consistency.\n\n# Get the full extended palette\ncpal_colors(\"extended\")\n\nWhat‚Äôs included: The extended palette includes primary colors plus additional shades and complementary colors that maintain brand consistency while providing more variety for complex visualizations.\nPractical applications: - Complex charts with many categories - Dashboard elements that need varied but consistent colors\n- Supporting visual elements that shouldn‚Äôt compete with primary colors"
  },
  {
    "objectID": "colors-palettes.html#categorical-palettes-for-groups-and-classifications",
    "href": "colors-palettes.html#categorical-palettes-for-groups-and-classifications",
    "title": "Colors & Palettes",
    "section": "Categorical Palettes: For Groups and Classifications",
    "text": "Categorical Palettes: For Groups and Classifications\nThe challenge with categorical data: Categories have no inherent order, so colors shouldn‚Äôt imply ranking or progression. Traditional rainbow palettes often create false hierarchies.\nCPAL‚Äôs solution: Carefully selected colors that are visually distinct but don‚Äôt suggest any ordering.\n\nMain Categorical Palette\nWhen to use: Most categorical visualizations with 2-5 categories.\n\n# The most commonly used categorical palette\ncpal_colors(\"main\")\n\n# Use in ggplot2\nggplot(data, aes(x = variable, fill = category)) +\n  geom_col() +\n  scale_fill_cpal(palette = \"main\")\n\nWhat makes this palette special: - 5 distinct colors that work well together - No implied ordering - each color has equal visual weight - High contrast ensures categories are easily distinguishable - Colorblind safe - maintains distinctness for all color vision types\n\n\nExtended Categorical Options\n\n# For fewer categories, use optimized subsets\ncpal_colors(\"main_3\")    # Perfect for 3-category data\ncpal_colors(\"main_4\")    # Optimal for 4-category data\n\n# For special cases\ncpal_colors(\"main_gray\") # Includes neutral gray for \"other/none\" category\ncpal_colors(\"blues\")     # Two-color palette for binary comparisons\ncpal_colors(\"compare\")   # Optimized for before/after comparisons\n\nChoosing the right categorical palette:\n\n\n\n\n\n\n\n\nYour Data\nRecommended Palette\nWhy\n\n\n\n\n2-3 categories\n\"main_3\"\nOptimal color spacing, maximum distinction\n\n\n4 categories\n\"main_4\"\nBalanced set without visual overload\n\n\n5+ categories\n\"main\"\nFull palette, but consider simplifying data\n\n\nBinary comparison\n\"compare\"\nHigh contrast, clear opposition\n\n\nHas ‚Äúother/none‚Äù category\n\"main_gray\"\nGray appropriately de-emphasizes\n\n\n\n\n\nCommon Categorical Color Mistakes to Avoid\n‚ùå Don‚Äôt do this:\n\n# Using sequential colors for categories (implies false order)\nscale_fill_gradient(low = \"lightblue\", high = \"darkblue\")\n\n‚úÖ Do this instead:\n\n# Use categorical colors that don't imply order\nscale_fill_cpal(palette = \"main\")"
  },
  {
    "objectID": "colors-palettes.html#sequential-palettes-for-continuous-data",
    "href": "colors-palettes.html#sequential-palettes-for-continuous-data",
    "title": "Colors & Palettes",
    "section": "Sequential Palettes: For Continuous Data",
    "text": "Sequential Palettes: For Continuous Data\nThe principle: Sequential data goes from low to high, and colors should visually represent this progression. Light-to-dark or single-hue progressions work best.\nWhen to use sequential palettes: - Population counts, ages, income levels - Percentages, probabilities, rates\n- Any continuous measure without a meaningful center point - Heatmaps, choropleths, and intensity visualizations\n\nSingle-Hue Sequential (Teal)\nBest for: Most continuous data visualization needs.\n\n# Different lengths for different needs\n#cpal_colors(\"teal_seq_4\")  # 4 color steps\n#cpal_colors(\"teal_seq_5\")  # 5 color steps  \n#cpal_colors(\"teal_seq_6\")  # 6 color steps\n\n# Create example data for heatmap demonstration\nlibrary(ggplot2)\nlibrary(cpaltemplates)\n# Generate a correlation matrix from mtcars dataset\ncorrelation_data &lt;- cor(mtcars[, c(\"mpg\", \"hp\", \"wt\", \"qsec\", \"disp\")])\n\n# Convert correlation matrix to long format for ggplot2\nheatmap_data &lt;- expand.grid(\n  x = rownames(correlation_data),\n  y = colnames(correlation_data)\n)\nheatmap_data$correlation &lt;- as.vector(correlation_data)\n\n# Use in ggplot2 with real data\nggplot(heatmap_data, aes(x = x, y = y, fill = correlation)) +\n  geom_tile() +\n  scale_fill_cpal(palette = \"teal_seq_5\", discrete = FALSE) +\n  labs(\n    title = \"Vehicle Characteristics Correlation Matrix\",\n    x = \"\",\n    y = \"\",\n    fill = \"Correlation\"\n  ) +\n  theme_cpal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\nWhy teal for sequential? - Brand consistency: Uses CPAL‚Äôs signature color - Perceptual uniformity: Even visual steps represent equal data steps - Print friendly: Works well in both color and grayscale - Professional appearance: Sophisticated, not overwhelming\n\n\nMulti-Hue Sequential (Yellow-Teal)\nBest for: When you want more visual interest or need to distinguish between multiple sequential variables.\n\n# Multi-hue options\ncpal_colors(\"yellow_teal_seq_4\")\ncpal_colors(\"yellow_teal_seq_5\") \ncpal_colors(\"yellow_teal_seq_6\")\n\nWhen to choose multi-hue over single-hue: - Multiple related measures: Comparing different rates or counts - High visual impact needed: Presentations, dashboards, key findings - Complex visualizations: Where single-hue might be too subtle - Avoiding confusion: When other elements use teal\nColor progression explanation: - Yellow (#E5CB50): Represents low values, warm and approachable - Green-Teal transition: Middle values, natural progression\n- Dark Teal (#004855): High values, professional and serious\n\n\nChoosing Sequential Palette Length\n\n\n\n\n\n\n\n\nNumber of Colors\nBest For\nExample Use Cases\n\n\n\n\n4 colors\nSimple continuous data, clear distinctions\nQuartiles, basic heatmaps, simple choropleths\n\n\n5 colors\nMost common choice, balanced detail\nQuintiles, most continuous visualizations\n\n\n6 colors\nComplex data needing fine distinctions\nDetailed heatmaps, precise geographic data"
  },
  {
    "objectID": "colors-palettes.html#diverging-palettes-for-data-with-a-meaningful-center",
    "href": "colors-palettes.html#diverging-palettes-for-data-with-a-meaningful-center",
    "title": "Colors & Palettes",
    "section": "Diverging Palettes: For Data with a Meaningful Center",
    "text": "Diverging Palettes: For Data with a Meaningful Center\nThe concept: Some data has a natural center point where values above and below have different meanings. Diverging palettes use contrasting colors on each side of this center.\nClassic use cases: - Change from baseline: Profit/loss, above/below average, improvement/decline - Survey data: Agree/disagree, satisfaction scales, political leaning - Statistical data: Positive/negative correlations, z-scores, residuals - Geographic data: Temperature anomalies, election margins\n\nPink-Teal Diverging\nWhy this combination? Pink and teal are complementary colors that create maximum visual contrast while maintaining CPAL brand consistency.\n\n# Different granularity options\ncpal_colors(\"pink_teal_3\")  # Simple: negative, neutral, positive\ncpal_colors(\"pink_teal_5\")  # Moderate: adds nuance\ncpal_colors(\"pink_teal_6\")  # Detailed: maximum distinction\n\nColor psychology in the diverging palette: - Pink side: Often represents ‚Äúnegative‚Äù changes, but the color choice is intentionally less harsh than red - Gray center: Neutral, no change, baseline values - Teal side: ‚ÄúPositive‚Äù changes, using CPAL‚Äôs signature optimistic color\n\n\nPractical Applications\nExample 1: Survey Results\n\n# Likert scale data (Strongly Disagree to Strongly Agree)\nlibrary(ggplot2)\nlibrary(cpaltemplates)\n\n# Create realistic survey data\nset.seed(123)  # For reproducible example\nsurvey_data &lt;- data.frame(\n  question = rep(c(\"Job Satisfaction\", \"Work-Life Balance\", \"Team Collaboration\", \"Career Growth\"), each = 100),\n  response = sample(\n    c(\"Strongly Disagree\", \"Disagree\", \"Neutral\", \"Agree\", \"Strongly Agree\"),\n    400,\n    replace = TRUE,\n    prob = c(0.1, 0.2, 0.3, 0.3, 0.1)  # Realistic distribution\n  )\n)\n\n# Ensure proper factor ordering for Likert responses\nsurvey_data$response &lt;- factor(survey_data$response, \n                              levels = c(\"Strongly Disagree\", \"Disagree\", \"Neutral\", \"Agree\", \"Strongly Agree\"))\n\n# Create the plot\nggplot(survey_data, aes(x = question, fill = response)) +\n  geom_bar(position = \"stack\") +\n  scale_fill_cpal(palette = \"pink_teal_5\") +\n  theme_cpal() +\n  labs(\n    title = \"Employee Survey Results\",\n    x = \"\",\n    y = \"Number of Responses\",\n    fill = \"\"\n  ) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\nExample 2: Performance vs.¬†Target\n\n# Performance above/below target\nlibrary(ggplot2)\nlibrary(cpaltemplates)\n# Create realistic performance data for different departments\nset.seed(456)  # For reproducible example\nperformance_data &lt;- data.frame(\n  department = c(\"Mathematics\", \"English\", \"Science\", \"History\", \"Art\", \n                \"Physical Education\", \"Music\", \"Computer Science\"),\n  variance_from_target = c(12.5, -8.2, 15.3, -3.1, 6.7, -12.4, 9.8, 18.2)\n)\n\n# Alternative: could use random data that's more variable\n# performance_data$variance_from_target &lt;- runif(8, min = -20, max = 25)\n\n# Create the plot\nggplot(performance_data, aes(x = department, y = variance_from_target, \n                            fill = variance_from_target)) +\n  geom_col() +\n  scale_fill_cpal(palette = \"pink_teal_6\", discrete = FALSE) +\n  theme_cpal() +\n  labs(\n    title = \"Department Performance vs. Target Goals\",\n    subtitle = \"Positive values indicate above target, negative values below target\",\n    x = \"Department\",\n    y = \"Variance from Target (%)\",\n    fill = \"Performance\\nVariance\"\n  ) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  geom_hline(yintercept = 0, linetype = \"dashed\", color = \"black\", alpha = 0.7)\n\n\n\n\n\n\n\n\n\n\nCritical Design Decisions\nCenter point matters: Make sure your data actually has a meaningful center. If not, use sequential palettes instead.\n‚ùå Don‚Äôt use diverging for: - Age groups (no meaningful center) - Income levels (zero isn‚Äôt meaningful for most analyses) - Geographic regions (no inherent center)\n‚úÖ Do use diverging for: - Change scores (zero = no change) - Performance vs.¬†benchmarks (benchmark = center) - Balance measures (balanced = center)"
  },
  {
    "objectID": "colors-palettes.html#advanced-usage-and-customization",
    "href": "colors-palettes.html#advanced-usage-and-customization",
    "title": "Colors & Palettes",
    "section": "Advanced Usage and Customization",
    "text": "Advanced Usage and Customization\n\nGetting Specific Colors\n\n# Get individual colors by name\ncpal_colors(c(\"teal\", \"pink\", \"orange\"))\n\n# Get first N colors from any palette\ncpal_colors(\"main\", n = 3)\n\n# Reverse any palette\ncpal_colors(\"main\", reverse = TRUE)\n\n\n\nIntegration with ggplot2\nFor discrete data:\n\n# Automatic color selection based on your data\nscale_color_cpal(palette = \"main\")\nscale_fill_cpal(palette = \"main\") \n\nFor continuous data:\n\n# Set discrete = FALSE for continuous scales\nscale_color_cpal(palette = \"teal_seq_5\", discrete = FALSE)\nscale_fill_cpal(palette = \"pink_teal_5\", discrete = FALSE)\n\nAdvanced ggplot2 options:\n\n# Reverse palette direction\nscale_fill_cpal(palette = \"main\", reverse = TRUE)\n\n# Pass additional arguments to underlying ggplot2 scales\nscale_color_cpal(palette = \"main\", name = \"Categories\", guide = guide_legend(ncol = 2))\n\n\n\nExploring and Choosing Palettes\nVisual exploration:\n\n# See all palettes at once\nview_all_palettes()\n\n# Interactive exploration of individual palettes\nview_palette()\n\n# Display specific palette with hex codes\ncpal_display_palettes(\"main\")\ncpal_display_palettes(\"teal_seq_5\")\n\nWhat each function shows: - view_all_palettes(): Grid layout showing every palette, perfect for comparison - view_palette(): Interactive tool with color codes and accessibility information - cpal_display_palettes(): Clean display with hex codes, ideal for documentation"
  },
  {
    "objectID": "colors-palettes.html#best-practices-and-guidelines",
    "href": "colors-palettes.html#best-practices-and-guidelines",
    "title": "Colors & Palettes",
    "section": "Best Practices and Guidelines",
    "text": "Best Practices and Guidelines\n\nColor Selection Decision Tree\nStep 1: What type of data do you have?\n\ngraph TD\n    A[\"üé® What type of data?\"] --&gt; B[\"üìä Categorical&lt;br/&gt;Groups, categories, classifications\"]\n    A --&gt; C[\"üìà Sequential&lt;br/&gt;Continuous, low to high\"]\n    A --&gt; D[\"‚öñÔ∏è Diverging&lt;br/&gt;Has meaningful center point\"]\n    \n    B --&gt; E[\"‚ùì How many categories?\"]\n    E --&gt; F[\"‚úåÔ∏è 2-3: main_3\"]\n    E --&gt; G[\"üçÄ 4: main_4\"]  \n    E --&gt; H[\"üåà 5+: main\"]\n    \n    C --&gt; I[\"üí• Visual impact needed?\"]\n    I --&gt; J[\"üìò Standard: teal_seq_5\"]\n    I --&gt; K[\"‚≠ê High impact: yellow_teal_seq_5\"]\n    \n    D --&gt; L[\"üîç Level of detail?\"]\n    L --&gt; M[\"üéØ Simple: pink_teal_3\"]\n    L --&gt; N[\"üìã Detailed: pink_teal_5 or pink_teal_6\"]\n    \n    style A fill:#e1f5fe\n    style B fill:#f3e5f5\n    style C fill:#e8f5e8\n    style D fill:#fff3e0\n\n\n\n\n\n\n\n\n\nFigure¬†1: CPAL Color Palette Selection Guide\n\n\n\n\n\n\n\nAccessibility Considerations\nAll CPAL palettes are designed to be accessible, but here are best practices:\n\nTest your visualizations with colorblind simulation tools\nDon‚Äôt rely only on color to convey information - use shapes, patterns, or labels too\n\nProvide legends and clear labeling for all color-coded elements\nConsider your audience - some contexts may need higher contrast\n\n\n\nCommon Use Cases and Recommendations\n\n\n\n\n\n\n\n\nVisualization Type\nRecommended Palette\nWhy\n\n\n\n\nBar/column charts\n\"main\" for categories, \"teal_seq_5\" for values\nClear categorical distinction or value progression\n\n\nLine charts\n\"main\" for multiple lines\nDistinct line identification\n\n\nScatter plots\n\"main\" for groups, \"teal_seq_5\" for density\nGroup identification or density visualization\n\n\nHeatmaps\n\"teal_seq_5\" or \"yellow_teal_seq_5\"\nClear intensity progression\n\n\nGeographic maps\n\"teal_seq_5\" for quantities, \"pink_teal_5\" for comparisons\nGeographic data best practices\n\n\nDashboards\nMix of \"main\" and \"teal_seq_5\"\nConsistent brand presence\n\n\n\n\n\nPerformance and Technical Considerations\nColor rendering: All CPAL colors are specified in hex format for consistency across platforms and outputs.\nFile size: Color complexity doesn‚Äôt significantly impact file sizes, so choose based on visual needs rather than technical constraints.\nPrint considerations: All palettes are tested for print reproduction, but sequential palettes generally print more reliably than complex categorical ones."
  },
  {
    "objectID": "colors-palettes.html#troubleshooting-common-issues",
    "href": "colors-palettes.html#troubleshooting-common-issues",
    "title": "Colors & Palettes",
    "section": "Troubleshooting Common Issues",
    "text": "Troubleshooting Common Issues\n\nColors Not Appearing\n\n# Check if colors are loading properly\ncpal_colors(\"main\")  # Should return hex codes\n\n# If empty, try refreshing\nlibrary(cpaltemplates)\n\n\n\nColors Look Different Than Expected\nPossible causes: - Display calibration: Colors appear different on different monitors - RStudio viewer: Colors may render differently in RStudio vs.¬†exported files - File format: PNG vs.¬†PDF may show slight color differences\nSolutions:\n\n# Always preview exported files\nsave_cpal_plot(your_plot, \"test.png\")\n\n# Use consistent export settings\nsave_cpal_plot(your_plot, \"final.png\", dpi = 300, bg = \"white\")\n\n\n\nPalette Too Long/Short for Data\n\n# Automatically adjust to your data length\ncpal_colors(\"main\", n = 7)  # Gets 7 colors even if palette has 5\n\n# Or choose appropriate palette length\ncpal_colors(\"teal_seq_6\")   # For 6-level data"
  },
  {
    "objectID": "colors-palettes.html#examples-and-implementation",
    "href": "colors-palettes.html#examples-and-implementation",
    "title": "Colors & Palettes",
    "section": "Examples and Implementation",
    "text": "Examples and Implementation\n\nComplete Workflow Example\n\nlibrary(cpaltemplates)\nlibrary(ggplot2)\n\n# Step 1: Explore available colors\nview_all_palettes()\n\n# Step 2: Choose appropriate palette for your data type\nmy_data &lt;- data.frame(\n  category = c(\"A\", \"B\", \"C\", \"D\"),\n  value = c(25, 40, 35, 20)\n)\n\n# Step 3: Create visualization with CPAL colors\np &lt;- ggplot(my_data, aes(x = category, y = value, fill = category)) +\n  geom_col() +\n  scale_fill_cpal(palette = \"main_4\") +  # 4 categories = main_4\n  theme_cpal() +\n  labs(\n    title = \"Sample Categorical Data\",\n    subtitle = \"Using CPAL's main_4 categorical palette\"\n  )\n\n# Step 4: Save with CPAL standards\nsave_cpal_plot(p, \"my_visualization.png\")\n\n\nThe CPAL color system provides the foundation for all effective data visualization. Choose palettes based on your data type, consider your audience‚Äôs needs, and always prioritize accessibility and clarity over visual complexity."
  },
  {
    "objectID": "themes-styling.html",
    "href": "themes-styling.html",
    "title": "Themes & Styling",
    "section": "",
    "text": "A theme controls every visual aspect of your plot that isn‚Äôt directly related to your data: fonts, colors, spacing, grid lines, backgrounds, and more. Without consistent theming, even great data analysis can look unprofessional or be hard to interpret.\nThe cpaltemplates theme system solves critical problems:\n\n\n\n\n\n\n\n\n\n\nIssue\nImpact\nCPAL Solution\n\n\n\n\nInconsistent branding\nVisualizations don‚Äôt look like CPAL materials\nAutomatic CPAL brand integration\n\n\nPoor font choices\nSystem fonts vary by computer, look unprofessional\nGoogle Fonts (Inter/Roboto) with fallbacks\n\n\nOverwhelming visual clutter\nGrid lines and decorations compete with data\nOptimized visual hierarchy\n\n\nNot output-optimized\nSame theme for web, print, presentations\nSpecialized themes for each medium\n\n\nAccessibility issues\nPoor contrast, small fonts\nBuilt-in accessibility standards\n\n\n\n\n\n\n\nProfessional appearance: Every plot looks publication-ready\nBrand consistency: Automatic CPAL colors, fonts, and styling standards\nOutput optimization: Different themes for web, print, presentations, and maps\nAccessibility built-in: High contrast, readable fonts, colorblind-safe defaults\nCustomizable: Easy to adjust while maintaining brand consistency"
  },
  {
    "objectID": "themes-styling.html#why-themes-matter-for-data-visualization",
    "href": "themes-styling.html#why-themes-matter-for-data-visualization",
    "title": "Themes & Styling",
    "section": "",
    "text": "A theme controls every visual aspect of your plot that isn‚Äôt directly related to your data: fonts, colors, spacing, grid lines, backgrounds, and more. Without consistent theming, even great data analysis can look unprofessional or be hard to interpret.\nThe cpaltemplates theme system solves critical problems:\n\n\n\n\n\n\n\n\n\n\nIssue\nImpact\nCPAL Solution\n\n\n\n\nInconsistent branding\nVisualizations don‚Äôt look like CPAL materials\nAutomatic CPAL brand integration\n\n\nPoor font choices\nSystem fonts vary by computer, look unprofessional\nGoogle Fonts (Inter/Roboto) with fallbacks\n\n\nOverwhelming visual clutter\nGrid lines and decorations compete with data\nOptimized visual hierarchy\n\n\nNot output-optimized\nSame theme for web, print, presentations\nSpecialized themes for each medium\n\n\nAccessibility issues\nPoor contrast, small fonts\nBuilt-in accessibility standards\n\n\n\n\n\n\n\nProfessional appearance: Every plot looks publication-ready\nBrand consistency: Automatic CPAL colors, fonts, and styling standards\nOutput optimization: Different themes for web, print, presentations, and maps\nAccessibility built-in: High contrast, readable fonts, colorblind-safe defaults\nCustomizable: Easy to adjust while maintaining brand consistency"
  },
  {
    "objectID": "themes-styling.html#cpal-theme-system-overview",
    "href": "themes-styling.html#cpal-theme-system-overview",
    "title": "Themes & Styling",
    "section": "CPAL Theme System Overview",
    "text": "CPAL Theme System Overview\nThe cpaltemplates package provides 8 comprehensive theme functions designed for different use cases and output formats:\n\n\n\n\n\n\n\n\n\nTheme Function\nPurpose\nBest For\nKey Features\n\n\n\n\ntheme_cpal()\nDefault theme for most uses\nReports, presentations, general analysis\nBalanced design, flexible parameters\n\n\ntheme_cpal_minimal()\nClean, distraction-free\nFocus-on-data visualizations\nReduced visual elements\n\n\ntheme_cpal_dark()\nDark mode presentations\nDark backgrounds, night viewing\nLight text, optimal dark contrast\n\n\ntheme_cpal_classic()\nTraditional academic style\nFormal reports, academic papers\nStructured appearance, axis lines\n\n\ntheme_cpal_print()\nPrint optimization\nPDFs, printed materials\nHigh contrast, print-safe styling\n\n\ntheme_cpal_map()\nGeographic visualizations\nMaps, spatial data\nMinimal competing elements\n\n\nset_theme_cpal()\nSet default theme\nSession-wide consistency\nAutomatic theme application\n\n\nget_shiny_theme_colors()\nShiny application styling\nInteractive dashboards\nCSS color integration\n\n\n\n\nThe Science Behind CPAL Themes\nTypography: All themes use Google Fonts (Inter for headings, Roboto for body text) with carefully chosen fallbacks for cross-platform consistency.\nColor hierarchy: Themes work seamlessly with CPAL‚Äôs color system, ensuring proper contrast and accessibility.\nVisual hierarchy: Strategic use of whitespace, font sizes, and element prominence guides the reader‚Äôs attention to your data.\nTechnical optimization: Each theme is tested across different output formats and screen sizes."
  },
  {
    "objectID": "themes-styling.html#core-theme-function-theme_cpal",
    "href": "themes-styling.html#core-theme-function-theme_cpal",
    "title": "Themes & Styling",
    "section": "Core Theme Function: theme_cpal()",
    "text": "Core Theme Function: theme_cpal()\nThe theme_cpal() function is your starting point for most visualizations. It‚Äôs highly customizable while maintaining CPAL brand standards.\n\nBasic Usage\n\nlibrary(ggplot2)\nlibrary(cpaltemplates)\n\n# Basic CPAL theme\nggplot(mtcars, aes(x = wt, y = mpg)) +\n  geom_point() +\n  theme_cpal() +\n  labs(title = \"Vehicle Weight vs Fuel Efficiency\")\n\n\n\n\n\n\n\n\n\n\nUnderstanding theme_cpal() Parameters\nWhy so many options? Different visualizations need different emphasis and styling. Rather than creating dozens of separate functions, theme_cpal() provides focused control over the most important design decisions.\n\ntheme_cpal(\n  base_size = 14,           # Controls overall text scaling\n  base_family = \"\",         # Font family (auto-detects Google Fonts)\n  style = \"default\",        # Overall theme style\n  grid = \"horizontal\",      # Grid line configuration\n  axis_line = \"x\",         # Axis line placement\n  axis_title = TRUE,       # Include axis titles\n  legend_position = \"bottom\"  # Legend placement\n)\n\n\nParameter Deep Dive\nbase_size - Text Scaling\nControls the size of all text elements proportionally:\n\n# For presentations (larger text)\ntheme_cpal(base_size = 18)\n\n# For dense dashboards (smaller text)  \ntheme_cpal(base_size = 12)\n\n# Default for reports\ntheme_cpal(base_size = 14)\n\nWhen to adjust: - Presentations: 16-20 for readability from distance - Reports: 14-16 for balanced readability and space efficiency - Dashboards: 10-14 for information density - Print materials: 12-16 depending on page size\nstyle - Overall Visual Approach\n\n# Clean, balanced (most common)\ntheme_cpal(style = \"default\")\n\n# Reduced visual elements\ntheme_cpal(style = \"minimal\")  \n\n# Traditional academic appearance\ntheme_cpal(style = \"classic\")\n\n# Optimized for dark backgrounds\ntheme_cpal(style = \"dark\")\n\nChoosing the right style: - ‚Äúdefault‚Äù: Start here for 90% of visualizations - ‚Äúminimal‚Äù: When data complexity is high and you need focus - ‚Äúclassic‚Äù: For formal academic or traditional business contexts - ‚Äúdark‚Äù: For presentations on dark backgrounds or night viewing\ngrid - Grid Line Strategy\nGrid lines help readers estimate values but can create visual clutter:\n\n# Horizontal only (best for most bar/line charts)\ntheme_cpal(grid = \"horizontal\")\n\n# Vertical only (good for time series)\ntheme_cpal(grid = \"vertical\")\n\n# Both directions (for scatter plots, heatmaps)\ntheme_cpal(grid = \"both\")\n\n# No grid lines (minimal, clean)\ntheme_cpal(grid = \"none\")\n\nDecision guide: - Bar charts: Horizontal grid helps estimate heights - Line charts: Horizontal for values, vertical for time references - Scatter plots: Both can help with coordinate reading - Maps/artistic: None to avoid distracting from shapes\naxis_line - Axis Emphasis\n\n# X-axis line only (emphasizes categories/time)\ntheme_cpal(axis_line = \"x\")\n\n# Y-axis line only (emphasizes value scale) \ntheme_cpal(axis_line = \"y\")\n\n# Both axes (traditional)\ntheme_cpal(axis_line = \"both\")\n\n# No axis lines (minimal)\ntheme_cpal(axis_line = \"none\")\n\nlegend_position - Legend Placement Strategy\n\n# Bottom (default, doesn't interfere with data)\ntheme_cpal(legend_position = \"bottom\")\n\n# Right side (traditional, saves vertical space)\ntheme_cpal(legend_position = \"right\")\n\n# Top (good for maps, minimal legends)\ntheme_cpal(legend_position = \"top\")\n\n# Remove legend entirely\ntheme_cpal(legend_position = \"none\")"
  },
  {
    "objectID": "themes-styling.html#specialized-theme-variants",
    "href": "themes-styling.html#specialized-theme-variants",
    "title": "Themes & Styling",
    "section": "Specialized Theme Variants",
    "text": "Specialized Theme Variants\n\ntheme_cpal_minimal() - Focus on the Data\nWhen to use: Complex visualizations where every element should direct attention to the data itself.\n\n# Perfect for dense data visualizations\nlibrary(ggplot2)\nlibrary(cpaltemplates)\n\n# Create realistic complex dataset with multiple categories and dense points\nset.seed(789)  # For reproducible example\nn_points &lt;- 500\n\ncomplex_data &lt;- data.frame(\n  variable1 = rnorm(n_points, mean = 50, sd = 15),\n  variable2 = rnorm(n_points, mean = 25, sd = 8),\n  category = sample(c(\"Elementary\", \"Middle School\", \"High School\", \"Adult Ed\", \"Special Programs\"), \n                   n_points, replace = TRUE)\n)\n\n# Add some correlation between variables for more realistic data\ncomplex_data$variable2 &lt;- complex_data$variable2 + 0.3 * complex_data$variable1 + rnorm(n_points, 0, 5)\n\n# Create the plot\nggplot(complex_data, aes(x = variable1, y = variable2, color = category)) +\n  geom_point(alpha = 0.7, size = 1.2) +\n  theme_cpal_minimal() +\n  scale_color_cpal(palette = \"main\") +\n  labs(\n    title = \"Student Performance Distribution by Program Type\",\n    subtitle = \"Dense scatter plot showing relationship between assessment scores\",\n    x = \"Reading Score\",\n    y = \"Math Score\",\n    color = \"Program Type\"\n  ) +\n  guides(color = guide_legend(override.aes = list(alpha = 1, size = 2)))\n\n\n\n\n\n\n\n\nWhat makes it minimal: - Reduced grid lines: Only where absolutely necessary - Minimal axis decorations: Clean lines without excessive marking - Subdued backgrounds: Pure focus on data elements - Simplified legend styling: Less visual weight\nBest for: - Scatter plots with many points - Complex multi-series line charts - Heatmaps and matrix visualizations - Scientific/technical audiences who want data-first design\n\n\ntheme_cpal_dark() - Dark Mode Excellence\nWhen to use: Presentations in dark rooms, night viewing, or when your overall design uses dark backgrounds.\n\n# Optimized for dark backgrounds\nlibrary(ggplot2)\nlibrary(cpaltemplates)\n\n# Create data showing funding allocation across educational programs\nfunding_data &lt;- data.frame(\n  category = c(\"STEM Programs\", \"Arts Education\", \"Special Needs\", \n               \"After School\", \"Teacher Training\"),\n  value = c(2.8, 1.9, 3.2, 1.5, 2.1)  # Values in millions\n)\n\n# Reorder by value for better visual impact\nfunding_data$category &lt;- factor(funding_data$category, \n                               levels = funding_data$category[order(funding_data$value, decreasing = TRUE)])\n\n# Create the dark-themed plot\nggplot(funding_data, aes(x = category, y = value, fill = category)) +\n  geom_col(width = 0.7) +\n  theme_cpal_dark() +\n  scale_fill_cpal(palette = \"main\") +\n  labs(\n    title = \"Educational Program Funding Allocation\",\n    subtitle = \"2024 Budget Distribution (in millions)\",\n    x = \"\",\n    y = \"Funding Amount ($M)\",\n    fill = \"Program\"\n  ) +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    legend.position = \"none\"  # Categories are labeled on x-axis\n  ) +\n  scale_y_continuous(labels = scales::dollar_format(scale = 1, suffix = \"M\"))\n\n\n\n\n\n\n\n\nDark mode optimization: - Light text on dark background: High contrast for readability - Adjusted grid colors: Subtle lines that don‚Äôt overpower - Modified color palettes: Colors adjusted for dark background visibility - Reduced eye strain: Optimized for extended viewing\nPerfect for: - Conference presentations - Dashboard displays in low-light environments\n- Late-night analysis sessions - Modern UI design aesthetics\n\n\ntheme_cpal_classic() - Traditional Professional\nWhen to use: Formal reports, academic papers, traditional business contexts where conservative styling is preferred.\n\n# Traditional academic/business appearance\nlibrary(ggplot2)\nlibrary(cpaltemplates)\n\n# Create realistic quarterly enrollment data by program division\nfinancial_data &lt;- data.frame(\n  quarter = rep(c(\"Q1 2023\", \"Q2 2023\", \"Q3 2023\", \"Q4 2023\", \n                  \"Q1 2024\", \"Q2 2024\", \"Q3 2024\", \"Q4 2024\"), times = 4),\n  division = rep(c(\"K-12 Programs\", \"Adult Education\", \"Community Outreach\", \"Professional Development\"), each = 8),\n  revenue = c(\n    # K-12 Programs (highest enrollment, seasonal patterns)\n    850, 920, 780, 890, 880, 950, 810, 920,\n    # Adult Education (steady growth)\n    420, 450, 480, 510, 530, 560, 590, 620,\n    # Community Outreach (variable funding)\n    280, 320, 350, 300, 310, 370, 380, 340,\n    # Professional Development (project-based)\n    180, 240, 200, 260, 220, 280, 240, 300\n  )\n)\n\n# Convert quarter to factor with proper ordering\nfinancial_data$quarter &lt;- factor(financial_data$quarter, \n                                levels = c(\"Q1 2023\", \"Q2 2023\", \"Q3 2023\", \"Q4 2023\",\n                                          \"Q1 2024\", \"Q2 2024\", \"Q3 2024\", \"Q4 2024\"))\n\n# Create the classic-themed plot\nggplot(financial_data, aes(x = quarter, y = revenue, color = division, group = division)) +\n  geom_line(size = 1.2) +\n  geom_point(size = 2.5) +\n  theme_cpal_classic() +\n  scale_color_cpal(palette = \"main\") +\n  labs(\n    title = \"Quarterly Enrollment Revenue by Program Division\",\n    subtitle = \"Two-year trend analysis (2023-2024)\",\n    x = \"\",\n    y = \"Revenue ($ thousands)\",\n    color = \"Program Division\"\n  ) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  scale_y_continuous(labels = scales::dollar_format(scale = 1, suffix = \"K\"))\n\n\n\n\n\n\n\n\nClassic elements: - Full axis lines: Traditional x and y axes - Structured grid system: Both horizontal and vertical references - Formal typography: Conservative font sizing and spacing - Academic conventions: Follows traditional statistical graphics standards\nBest for: - Academic publications - Financial reports - Government documentation - Conservative business environments\n\n\ntheme_cpal_print() - Print Optimization\nWhen to use: PDFs, printed reports, black-and-white reproduction, or any materials that will be printed.\n\n# Optimized for print reproduction\nlibrary(ggplot2)\nlibrary(cpaltemplates)\n\n# Create realistic Q4 performance metrics for educational outcomes\nreport_data &lt;- data.frame(\n  metric = c(\"Student Retention\", \"Course Completion\", \"Test Score Improvement\", \n             \"Parent Satisfaction\", \"Teacher Retention\", \"Budget Efficiency\"),\n  value = c(87.5, 92.3, 78.9, 85.2, 91.7, 88.4)\n)\n\n# Order by performance for better visual impact\nreport_data$metric &lt;- factor(report_data$metric, \n                            levels = report_data$metric[order(report_data$value, decreasing = TRUE)])\n\n# Create print-optimized chart\nggplot(report_data, aes(x = metric, y = value)) +\n  geom_col(fill = cpal_colors(\"midnight\"), width = 0.6) +\n  theme_cpal_print() +\n  labs(\n    title = \"Q4 Performance Metrics\",\n    subtitle = \"Key Educational Outcomes (Percentage Achievement)\",\n    x = \"\",\n    y = \"Achievement Rate (%)\"\n  ) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  scale_y_continuous(limits = c(0, 100), breaks = seq(0, 100, 20)) +\n  geom_text(aes(label = paste0(value, \"%\")), \n            vjust = -0.5, size = 3, color = \"black\")\n\n\n\n\n\n\n\n\nPrint optimizations: - High contrast elements: Ensures visibility when printed - Conservative font choices: System fonts that render reliably - Black and white friendly: Works even without color printing - Appropriate sizing: Text and elements sized for page reproduction\nTechnical considerations: - DPI independence: Looks good at any print resolution - Color-to-grayscale: Maintains distinction when printed in B&W - Font embedding: Uses widely available fonts for compatibility\n\n\ntheme_cpal_map() - Geographic Visualization\nWhen to use: Maps, geographic data, spatial visualizations where decorative elements would interfere with geographic interpretation.\n\n# Clean geographic visualization\nlibrary(ggplot2)\nlibrary(maps)\nlibrary(cpaltemplates)\n\n# Get US state map data and add educational metrics\nstate_data &lt;- map_data(\"state\")\n\n# Create realistic education data by state (sample of states)\neducation_metrics &lt;- data.frame(\n  region = c(\"california\", \"texas\", \"florida\", \"new york\", \"illinois\", \n             \"pennsylvania\", \"ohio\", \"georgia\", \"north carolina\", \"michigan\",\n             \"arizona\", \"washington\", \"massachusetts\", \"virginia\", \"indiana\"),\n  student_population = c(6200000, 5400000, 2800000, 2600000, 2000000,\n                        1750000, 1650000, 1600000, 1550000, 1450000,\n                        1100000, 1080000, 980000, 1250000, 1040000)\n)\n\n# Join geographic data with education data\ngeographic_data &lt;- merge(state_data, education_metrics, by = \"region\", all.x = TRUE)\n\n# Create the map\nggplot(geographic_data, aes(x = long, y = lat, group = group, fill = student_population)) +\n  geom_polygon(color = \"white\", size = 0.2) +\n  theme_cpal_map() +\n  scale_fill_cpal(palette = \"teal_seq_5\", discrete = FALSE, \n                  na.value = \"grey90\",\n                  labels = scales::number_format(scale = 1e-6, suffix = \"M\")) +\n  labs(\n    title = \"Student Population by State\",\n    subtitle = \"Public K-12 enrollment across selected US states\",\n    fill = \"Student\\nPopulation\"\n  ) +\n  coord_map(\"albers\", lat0 = 39, lat1 = 45) +\n  guides(fill = guide_colorbar(title.position = \"top\", \n                              barwidth = 15, barheight = 0.8))\n\n\n\n\n\n\n\n\nMap-specific design: - Minimal axis elements: No competing lines or grids - Clean backgrounds: Nothing to interfere with geographic shapes - Optimized legends: Positioned to not cover important map areas - Coordinate system friendly: Works well with map projections"
  },
  {
    "objectID": "themes-styling.html#logo-integration-with-cpal-themes",
    "href": "themes-styling.html#logo-integration-with-cpal-themes",
    "title": "Themes & Styling",
    "section": "Logo Integration with CPAL Themes",
    "text": "Logo Integration with CPAL Themes\n\nAdding CPAL Logos to Themed Plots\nWhy logos matter: Logos provide immediate brand recognition and professional credibility. The add_cpal_logo() function seamlessly integrates CPAL branding with your themed visualizations.\nSmart logo integration: The function automatically detects your theme style (light vs.¬†dark) and selects the appropriate logo variant for optimal visibility.\n\n# Basic logo addition to any CPAL-themed plot\nlibrary(ggplot2)\nlibrary(cpaltemplates)\n# Create sample performance data\nperformance_data &lt;- data.frame(\n  category = c(\"Reading Proficiency\", \"Math Achievement\", \"Science Scores\", \n               \"Writing Assessment\", \"Critical Thinking\"),\n  value = c(78, 82, 75, 80, 77)\n)\n\n# Reorder by value for better presentation\nperformance_data$category &lt;- factor(performance_data$category, \n                                   levels = performance_data$category[order(performance_data$value)])\n\n# Create the base plot\nplot_with_logo &lt;- ggplot(performance_data, aes(x = category, y = value)) +\n  geom_col(fill = cpal_colors(\"midnight\"), width = 0.7) +\n  theme_cpal() +\n  labs(\n    title = \"Performance Metrics\",\n    subtitle = \"Student Achievement Across Key Areas\",\n    x = \"\",\n    y = \"Proficiency Rate (%)\"\n  ) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  scale_y_continuous(limits = c(0, 100), breaks = seq(0, 100, 20)) +\n  geom_text(aes(label = paste0(value, \"%\")), \n            vjust = -0.5, size = 3.5, color = \"black\")\n\n# Add CPAL logo to the plot\nplot_with_logo &lt;- plot_with_logo |&gt;\n  add_cpal_logo()\n\n# Display the plot\nplot_with_logo\n\n\n\n\n\n\n\n\n\n\nLogo Positioning Strategy\nChoose position based on your visualization content:\n\n# Top-right (default) - doesn't interfere with most data\nadd_cpal_logo(plot, position = \"top-right\")\n\n# Top-left - good when legend is on the right\nadd_cpal_logo(plot, position = \"top-left\")\n\n# Bottom-right - traditional corporate position\nadd_cpal_logo(plot, position = \"bottom-right\")\n\n# Bottom-left - when caption/source is on the right\nadd_cpal_logo(plot, position = \"bottom-left\")\n\nPosition decision guide:\n\n\n\n\n\n\n\n\nYour Plot Has‚Ä¶\nRecommended Position\nWhy\n\n\n\n\nLegend on right side\n\"top-left\"\nAvoids legend overlap\n\n\nLong title/subtitle\n\"bottom-right\"\nKeeps title area clean\n\n\nCaption/source note\n\"bottom-left\"\nBalances bottom elements\n\n\nDense data in corners\n\"top-right\"\nDefault safe choice\n\n\nMap visualization\n\"bottom-left\"\nTraditional map logo placement\n\n\n\n\n\nLogo Size Optimization\nSize affects both visibility and data interference:\n\n# Subtle branding (good for complex visualizations)\nadd_cpal_logo(plot, size = 0.06)\n\n# Standard branding (default)\nadd_cpal_logo(plot, size = 0.09)\n\n# Prominent branding (presentations, key reports)\nadd_cpal_logo(plot, size = 0.12)\n\nWhen to adjust logo size: - Complex visualizations: Smaller logos (0.06-0.08) avoid data interference - Simple charts: Standard size (0.09) provides clear branding - Presentations: Larger logos (0.10-0.12) ensure visibility from distance - Print materials: Consider final print size when choosing logo scale\n\n\nTheme-Logo Integration Examples\nDifferent themes work best with different logo approaches:\n\n# Light themes - standard logo placement\nstandard_plot &lt;- ggplot(data, aes(x = x, y = y)) +\n  geom_point(color = cpal_colors(\"teal\")) +\n  theme_cpal() +\n  labs(title = \"Standard Report Visualization\") |&gt;\n  add_cpal_logo(position = \"top-right\", size = 0.09)\n\n# Dark themes - automatically uses light logo variant\ndark_plot &lt;- ggplot(data, aes(x = x, y = y)) +\n  geom_point(color = cpal_colors(\"teal\")) +\n  theme_cpal_dark() +\n  labs(title = \"Dark Theme Presentation\") |&gt;\n  add_cpal_logo(position = \"bottom-right\", size = 0.10)\n\n# Minimal themes - smaller, subtle logo\nminimal_plot &lt;- ggplot(complex_data, aes(x = x, y = y, color = category)) +\n  geom_point(alpha = 0.7) +\n  theme_cpal_minimal() +\n  scale_color_cpal(palette = \"main\") |&gt;\n  add_cpal_logo(position = \"top-left\", size = 0.06)\n\n# Map themes - traditional bottom-left placement\nmap_plot &lt;- ggplot(geographic_data, aes(x = long, y = lat, fill = value)) +\n  geom_polygon() +\n  theme_cpal_map() +\n  scale_fill_cpal(palette = \"teal_seq_5\", discrete = FALSE) |&gt;\n  add_cpal_logo(position = \"bottom-left\", size = 0.08)\n\n\n\nTechnical Requirements\nDependencies: The logo function requires two additional packages:\n\n# Install if needed (these are suggested dependencies)\ninstall.packages(c(\"cowplot\", \"magick\"))\n\n# The function will inform you if packages are missing\nadd_cpal_logo(plot)  # Provides helpful error messages if dependencies missing\n\nCustom logo paths: For special cases or updated logos:\n\n# Use custom logo file\nadd_cpal_logo(plot, logo_path = \"path/to/custom_cpal_logo.png\")\n\n\n\nLogo Best Practices\nProfessional guidelines: 1. Consistent placement: Use the same position across related visualizations 2. Appropriate sizing: Logo should be visible but not dominant 3. Theme coordination: Let the function auto-detect theme for logo variant 4. Output consideration: Test logo visibility in final output format\nWhen to skip logos: - Internal working documents or draft visualizations - Plots that will be embedded in already-branded materials - Highly complex visualizations where any addition reduces clarity - Academic publications with strict formatting requirements"
  },
  {
    "objectID": "themes-styling.html#advanced-theme-customization",
    "href": "themes-styling.html#advanced-theme-customization",
    "title": "Themes & Styling",
    "section": "Advanced Theme Customization",
    "text": "Advanced Theme Customization\n\nCombining Themes with Custom Modifications\nStart with a CPAL theme, then make specific adjustments:\n\n# Start with CPAL theme, then customize\nggplot(data, aes(x = x, y = y)) +\n  geom_point() +\n  theme_cpal() +\n  theme(\n    plot.title = element_text(size = 20, color = cpal_colors(\"midnight\")),\n    legend.position = \"top\",\n    panel.grid.minor = element_blank()\n  )\n\nBest practices for customization: - Start with a CPAL theme: Don‚Äôt start from scratch - Make minimal changes: Preserve brand consistency - Test across outputs: Ensure customizations work in different formats\n\n\nSetting Default Themes\nFor session-wide consistency:\n\n# Set CPAL theme as default for all plots in this session\nset_theme_cpal()\n\n# Set a specific variant as default\nset_theme_cpal(\"minimal\", base_size = 16)\n\n# Now all plots automatically use CPAL theming\nggplot(data, aes(x = x, y = y)) + geom_point()  # Automatically themed!\n\nWhy use set_theme_cpal(): - Consistency: Every plot in your analysis uses the same theme - Efficiency: No need to add theme functions to every plot - Team collaboration: Ensures all team members‚Äô plots look consistent\n\n\nIntegration with Shiny Applications\nFor interactive dashboards:\n\n# Get CPAL colors for Shiny theming\nshiny_colors &lt;- get_shiny_theme_colors(\"default\")\n\n# Use in Shiny UI\nfluidPage(\n  theme = shinythemes::shinytheme(\"flatly\"),\n  tags$style(HTML(paste0(\"\n    .content-wrapper, .right-side {\n      background-color: \", shiny_colors$background, \";\n    }\n  \")))\n)"
  },
  {
    "objectID": "themes-styling.html#theme-selection-decision-guide",
    "href": "themes-styling.html#theme-selection-decision-guide",
    "title": "Themes & Styling",
    "section": "Theme Selection Decision Guide",
    "text": "Theme Selection Decision Guide\n\nQuick Decision Tree\n\ngraph TD\n    A[What's your output format?] --&gt; B[Digital display]\n    A --&gt; C[Print/PDF]\n    A --&gt; D[Presentation]\n    A --&gt; E[Geographic/Map]\n    \n    B --&gt; F[Complex data?]\n    F --&gt;|Yes| G[theme_cpal_minimal]\n    F --&gt;|No| H[theme_cpal default]\n    \n    C --&gt; I[theme_cpal_print]\n    \n    D --&gt; J[Dark background?]\n    J --&gt;|Yes| K[theme_cpal_dark]\n    J --&gt;|No| L[theme_cpal with base_size=18]\n    \n    E --&gt; M[theme_cpal_map]\n\n\n\n\n\n\n\n\n\n\n\n\nUse Case Matrix\n\n\n\n\n\n\n\n\nYour Situation\nRecommended Theme\nKey Parameters\n\n\n\n\nStandard report visualization\ntheme_cpal()\nDefault parameters\n\n\nExecutive presentation\ntheme_cpal(base_size = 18)\nLarger text for readability\n\n\nComplex scatter plot\ntheme_cpal_minimal(grid = \"both\")\nFocus on data points\n\n\nFinancial time series\ntheme_cpal_classic(grid = \"horizontal\")\nTraditional business style\n\n\nMap visualization\ntheme_cpal_map()\nClean geographic focus\n\n\nDark background slide\ntheme_cpal_dark(base_size = 16)\nOptimized contrast\n\n\nPrinted report\ntheme_cpal_print(base_size = 14)\nPrint optimization\n\n\nDashboard panel\ntheme_cpal_minimal(base_size = 12)\nCompact, information-dense"
  },
  {
    "objectID": "themes-styling.html#typography-and-font-management",
    "href": "themes-styling.html#typography-and-font-management",
    "title": "Themes & Styling",
    "section": "Typography and Font Management",
    "text": "Typography and Font Management\n\nUnderstanding CPAL‚Äôs Font Strategy\nPrimary Font: Inter - Usage: Headings, titles, axis labels - Characteristics: Modern, clean, highly readable - Why chosen: Professional appearance, excellent screen rendering\nSecondary Font: Roboto\n- Usage: Body text, annotations, legends - Characteristics: Neutral, versatile, web-optimized - Why chosen: Pairs well with Inter, widely supported\n\n\nFont Integration\n\n# Fonts are automatically integrated when you use CPAL themes\nsetup_cpal_google_fonts()  # Run once per session\n\n# Themes automatically use the best available font\ntheme_cpal()  # Will use Inter if available, fallback to system fonts\n\nCross-platform font handling: - Windows: Downloads and registers Google Fonts - Mac: Uses Google Fonts with system fallbacks\n- Linux: Graceful degradation to system fonts - Server environments: Automatic fallback to reliable system fonts"
  },
  {
    "objectID": "themes-styling.html#best-practices-and-guidelines",
    "href": "themes-styling.html#best-practices-and-guidelines",
    "title": "Themes & Styling",
    "section": "Best Practices and Guidelines",
    "text": "Best Practices and Guidelines\n\nTheme Consistency Rules\n\nOne theme per analysis: Don‚Äôt mix themes within the same report/presentation\nConsistent parameters: If you use base_size = 16 for one plot, use it for all\nAppropriate for audience: Academic audiences expect different styling than business\nOutput-appropriate: Web themes for web, print themes for print\n\n\n\nCommon Theme Mistakes\n‚ùå Don‚Äôt do this:\n\n# Mixing themes inconsistently\nplot1 + theme_cpal()\nplot2 + theme_cpal_minimal()\nplot3 + theme_cpal_dark()\n\n‚úÖ Do this instead:\n\n# Consistent theming with set_theme_cpal()\nset_theme_cpal(\"default\", base_size = 16)\nplot1  # Automatically themed\nplot2  # Automatically themed\nplot3  # Automatically themed\n\n\n\nPerformance Considerations\nTheme rendering speed: Complex themes take longer to render. For iterative analysis: - Use theme_cpal_minimal() during development - Switch to full themes for final outputs\nMemory usage: Themes are lightweight objects, but Google Fonts require initial download - Run setup_cpal_google_fonts() once per session - Fonts are cached after first download"
  },
  {
    "objectID": "themes-styling.html#troubleshooting-common-issues",
    "href": "themes-styling.html#troubleshooting-common-issues",
    "title": "Themes & Styling",
    "section": "Troubleshooting Common Issues",
    "text": "Troubleshooting Common Issues\n\nFonts Not Displaying Correctly\nProblem: Plots show default system fonts instead of CPAL fonts\n\n# Check font setup\nsetup_cpal_google_fonts(verbose = TRUE)\n\n# Force font refresh\nsetup_cpal_google_fonts(force_refresh = TRUE)\n\n\n\nThemes Look Different Than Expected\nProblem: Visual elements don‚Äôt match documentation examples - Check your ggplot2 version: Older versions may render differently - Verify color integration: Ensure you‚Äôre using scale_color_cpal() functions - Review customizations: Custom theme modifications may override CPAL styling\n\n\nPrint Output Issues\nProblem: Plots look different when printed\n\n# Always use print theme for printed outputs\nplot + theme_cpal_print()\n\n# Test with appropriate dimensions\nsave_cpal_plot(plot, \"test.png\", size = \"default\")"
  },
  {
    "objectID": "themes-styling.html#complete-workflow-examples",
    "href": "themes-styling.html#complete-workflow-examples",
    "title": "Themes & Styling",
    "section": "Complete Workflow Examples",
    "text": "Complete Workflow Examples\n\nStandard Report Workflow\n\nlibrary(cpaltemplates)\nlibrary(ggplot2)\n\n# Set up session\nsetup_cpal_google_fonts()\nset_theme_cpal(\"default\", base_size = 14)\n\n# Create multiple plots - all automatically themed\nplot1 &lt;- ggplot(data1, aes(x = category, y = value)) +\n  geom_col(fill = cpal_colors(\"midnight\")) +\n  labs(title = \"Performance by Category\")\n\nplot2 &lt;- ggplot(data2, aes(x = date, y = metric, color = division)) +\n  geom_line(size = 1) +\n  scale_color_cpal(palette = \"main\") +\n  labs(title = \"Trends Over Time\")\n\n# Save with consistent styling\nsave_cpal_plot(plot1, \"category_performance.png\")\nsave_cpal_plot(plot2, \"trends_over_time.png\")\n\n\n\nPresentation Workflow\n\n# Optimized for presentation display\nsetup_cpal_google_fonts()\n\n# Larger text for readability from distance\npresentation_plot &lt;- ggplot(data, aes(x = factor, y = outcome, fill = factor)) +\n  geom_col(show.legend = FALSE) +\n  scale_fill_cpal(palette = \"main\") +\n  theme_cpal(base_size = 18, legend_position = \"none\") +\n  labs(\n    title = \"Key Findings\",\n    subtitle = \"Clear, compelling insights\",\n    x = \"\", y = \"Impact Score\"\n  )\n\nsave_cpal_plot(presentation_plot, \"presentation_slide.png\", size = \"slide\")\n\n\nCPAL themes provide the foundation for professional, consistent, and accessible data visualization. Choose themes based on your output format and audience, customize thoughtfully, and always prioritize clarity and readability."
  }
]