# CPAL Shiny App Template
# Generated by cpaltemplates package
#
# This template provides a standardized starting point for CPAL Shiny applications
# with proper theming, fonts, and component styling.

# Load Required Libraries ----
library(shiny)
library(bslib)
library(cpaltemplates)
library(ggplot2)
library(dplyr)
library(DT)
library(plotly)

# CPAL Setup Functions ----

# Initialize CPAL fonts for consistent typography
cpaltemplates::setup_cpal_google_fonts()

# Create enhanced CPAL theme with SCSS styling
app_theme <- cpal_shiny(variant = "default") %>%
  cpal_add_scss_enhancements(
    include_geometric_headers = FALSE,    # Keep UI headers clean
    include_datatable_enhancements = TRUE,
    include_metric_cards = TRUE
  )

# Alternative: Basic theme without SCSS enhancements
# app_theme <- cpal_shiny()

# Sample Data ----
# Replace with your actual data loading functions
sample_data <- data.frame(
  program = c("Education", "Housing", "Health", "Employment", "Mental Health"),
  participants = c(1250, 890, 1100, 650, 420),
  completion_rate = c(0.78, 0.85, 0.72, 0.90, 0.68),
  budget = c(2.1, 1.8, 2.3, 1.2, 2.8)
)

# UI ----
ui <- navbarPage(
  title = "CPAL Data Dashboard",
  theme = app_theme,

  # Main Dashboard Tab ----
  tabPanel(
    "Dashboard",

    # Key Metrics Row
    fluidRow(
      class = "cpal-grid-container",

      # Metric Card 1
      div(
        class = "cpal-metric-card",
        h3("Total Participants", class = "cpal-metric-title"),
        div("5,310", class = "cpal-metric-value"),
        p("Active across all programs", class = "cpal-metric-subtitle")
      ),

      # Metric Card 2
      div(
        class = "cpal-metric-card",
        h3("Completion Rate", class = "cpal-metric-title"),
        div("81%", class = "cpal-metric-value"),
        p("Above 2024 target", class = "cpal-metric-subtitle")
      ),

      # Metric Card 3
      div(
        class = "cpal-metric-card",
        h3("Active Programs", class = "cpal-metric-title"),
        div("12", class = "cpal-metric-value"),
        p("Across 5 service areas", class = "cpal-metric-subtitle")
      )
    ),

    # Main Content Row
    fluidRow(
      # Sidebar Controls
      column(
        width = 3,
        wellPanel(
          h4("Dashboard Controls"),

          selectInput(
            "selected_program",
            "Select Program:",
            choices = unique(sample_data$program),
            selected = "Education"
          ),

          sliderInput(
            "date_range",
            "Date Range:",
            min = as.Date("2020-01-01"),
            max = as.Date("2024-12-31"),
            value = c(as.Date("2023-01-01"), as.Date("2024-12-31")),
            timeFormat = "%Y-%m"
          ),

          checkboxGroupInput(
            "metrics_to_show",
            "Metrics to Display:",
            choices = c(
              "Participants" = "participants",
              "Completion Rate" = "completion_rate",
              "Budget" = "budget"
            ),
            selected = c("participants", "completion_rate")
          ),

          br(),

          actionButton(
            "refresh_data",
            "Refresh Data",
            class = "btn-primary",
            icon = icon("refresh")
          )
        )
      ),

      # Main Content Area
      column(
        width = 9,

        # Plot Output
        card(
          card_header("Program Performance Visualization"),
          card_body(
            plotOutput("main_plot", height = "400px")
          )
        ),

        br(),

        # Data Table
        card(
          card_header("Program Details"),
          card_body(
            DT::dataTableOutput("program_table")
          )
        )
      )
    )
  ),

  # Data Explorer Tab ----
  tabPanel(
    "Data Explorer",

    fluidRow(
      column(
        width = 12,
        h2("CPAL Data Explorer"),
        p("Detailed view of program data with interactive filtering and analysis tools.")
      )
    ),

    fluidRow(
      column(
        width = 6,
        card(
          card_header("Interactive Plot"),
          card_body(
            plotlyOutput("interactive_plot", height = "500px")
          )
        )
      ),

      column(
        width = 6,
        card(
          card_header("Summary Statistics"),
          card_body(
            verbatimTextOutput("summary_stats")
          )
        )
      )
    )
  ),

  # About Tab ----
  tabPanel(
    "About",

    fluidRow(
      column(
        width = 8,
        offset = 2,

        div(
          class = "cpal-header",  # Use geometric styling for content headers
          h1("About This Dashboard")
        ),

        br(),

        p("This dashboard was created using the cpaltemplates R package to ensure
          consistent CPAL branding and data visualization standards."),

        h3("Key Features"),
        tags$ul(
          tags$li("Consistent CPAL color palettes and themes"),
          tags$li("Interactive data visualizations"),
          tags$li("Responsive design for desktop and mobile"),
          tags$li("Accessible design following WCAG guidelines"),
          tags$li("Professional styling matching CPAL reports")
        ),

        br(),

        div(
          class = "alert alert-info",
          strong("Technical Details: "),
          "Built with R Shiny, cpaltemplates, and bslib for modern Bootstrap 5 styling."
        )
      )
    )
  )
)

# Server ----
server <- function(input, output, session) {

  # Reactive data filtering
  filtered_data <- reactive({
    sample_data %>%
      filter(program == input$selected_program)
  })

  # Main plot output
  output$main_plot <- renderPlot({

    # Create base plot with CPAL styling
    p <- ggplot(sample_data, aes(x = reorder(program, participants), y = participants)) +
      geom_col(fill = cpal_colors_primary[["teal"]], alpha = 0.8) +
      coord_flip() +
      theme_cpal() +
      labs(
        title = "Program Participation Overview",
        subtitle = "2024 participant counts by program area",
        x = "Program Area",
        y = "Number of Participants"
      ) +
      scale_y_continuous(labels = scales::comma_format())

    # Highlight selected program
    if (!is.null(input$selected_program)) {
      p <- p +
        geom_col(
          data = sample_data %>% filter(program == input$selected_program),
          fill = cpal_colors_primary[["orange"]],
          alpha = 0.9
        )
    }

    print(p)
  })

  # Data table output with CPAL styling
  output$program_table <- DT::renderDataTable({

    sample_data %>%
      select(
        Program = program,
        Participants = participants,
        `Completion Rate` = completion_rate,
        `Budget ($M)` = budget
      ) %>%
      mutate(
        `Completion Rate` = scales::percent(`Completion Rate`, accuracy = 1),
        `Budget ($M)` = scales::dollar(`Budget ($M)`, suffix = "M")
      )

  }, options = list(
    pageLength = 10,
    dom = 'frtip',
    columnDefs = list(
      list(className = 'dt-center', targets = 1:3)
    )
  ), class = "compact hover")

  # Interactive plot for Data Explorer tab
  output$interactive_plot <- renderPlotly({

    p <- ggplot(sample_data, aes(x = participants, y = completion_rate,
                                size = budget, color = program)) +
      geom_point(alpha = 0.7) +
      scale_color_cpal() +
      theme_cpal() +
      labs(
        title = "Program Performance Matrix",
        x = "Number of Participants",
        y = "Completion Rate",
        size = "Budget ($M)",
        color = "Program"
      ) +
      scale_y_continuous(labels = scales::percent_format()) +
      scale_x_continuous(labels = scales::comma_format())

    # Convert to plotly with CPAL styling preserved
    ggplotly(p, tooltip = c("x", "y", "size", "colour"))
  })

  # Summary statistics
  output$summary_stats <- renderText({

    stats <- sample_data %>%
      summarise(
        total_participants = sum(participants),
        avg_completion_rate = mean(completion_rate),
        total_budget = sum(budget),
        programs_count = n()
      )

    paste0(
      "CPAL Program Summary Statistics\n",
      "================================\n\n",
      "Total Participants: ", scales::comma(stats$total_participants), "\n",
      "Average Completion Rate: ", scales::percent(stats$avg_completion_rate, accuracy = 1), "\n",
      "Total Budget: $", stats$total_budget, "M\n",
      "Active Programs: ", stats$programs_count, "\n\n",
      "Data last updated: ", Sys.Date()
    )
  })

  # Refresh data button functionality
  observeEvent(input$refresh_data, {
    showNotification(
      "Data refreshed successfully!",
      type = "success",
      duration = 3
    )
  })
}

# Run Application ----
shinyApp(ui = ui, server = server)

# Deployment Notes ----
#
# To deploy this app:
# 1. Ensure cpaltemplates package is installed on target server
# 2. Include any required data files in the app directory
# 3. Test theme rendering across different screen sizes
# 4. Verify Google Fonts load properly in deployment environment
#
# For rsconnect deployment:
# rsconnect::deployApp(appDir = ".", appName = "cpal-dashboard")
#
# For Docker deployment:
# Include cpaltemplates installation in Dockerfile
# FROM rocker/shiny:latest
# RUN R -e "devtools::install_github('cpal/cpaltemplates')"
